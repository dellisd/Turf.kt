{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Spatial K Spatial K is a set of libraries for working with geospatial data in Kotlin including an implementation of GeoJson and a port of Turfjs written in pure Kotlin. It supports Kotlin Multiplatform projects and also features a Kotlin DSL for building GeoJson objects. Installation Java and Kotlin/JVM dependencies { implementation \"io.github.dellisd.spatialk:geojson:<version>\" implementation \"io.github.dellisd.spatialk:turf:<version>\" } Kotlin Multiplatform commonMain { dependencies { implementation \"io.github.dellisd.spatialk:geojson:<version>\" implementation \"io.github.dellisd.spatialk:turf:<version>\" } } Snapshots Snapshot builds are available on Sonatype. repositories { maven { url \"https://oss.sonatype.org/content/repositories/snapshots/\" } } Supported targets Spatial K currently supports the following platform targets: jvm , js , mingwX64 , linuxX64 , macosX64 , iosX64 , iosArm64 , and iosArm32 .","title":"Introduction"},{"location":"#spatial-k","text":"Spatial K is a set of libraries for working with geospatial data in Kotlin including an implementation of GeoJson and a port of Turfjs written in pure Kotlin. It supports Kotlin Multiplatform projects and also features a Kotlin DSL for building GeoJson objects.","title":"Spatial K"},{"location":"#installation","text":"","title":"Installation"},{"location":"#java-and-kotlinjvm","text":"dependencies { implementation \"io.github.dellisd.spatialk:geojson:<version>\" implementation \"io.github.dellisd.spatialk:turf:<version>\" }","title":"Java and Kotlin/JVM"},{"location":"#kotlin-multiplatform","text":"commonMain { dependencies { implementation \"io.github.dellisd.spatialk:geojson:<version>\" implementation \"io.github.dellisd.spatialk:turf:<version>\" } }","title":"Kotlin Multiplatform"},{"location":"#snapshots","text":"Snapshot builds are available on Sonatype. repositories { maven { url \"https://oss.sonatype.org/content/repositories/snapshots/\" } }","title":"Snapshots"},{"location":"#supported-targets","text":"Spatial K currently supports the following platform targets: jvm , js , mingwX64 , linuxX64 , macosX64 , iosX64 , iosArm64 , and iosArm32 .","title":"Supported targets"},{"location":"geojson/","text":"GeoJson The geojson module contains an implementation of the GeoJson standard . See below for constructing GeoJson objects using the DSL. Installation Kotlin dependencies { implementation ( \"io.github.dellisd.spatialk:geojson:<version>\" ) } Groovy dependencies { implementation \"io.github.dellisd.spatialk:geojson:<version>\" } GeoJson Objects The GeoJson interface represents all GeoJson objects. All GeoJson objects can have a bbox property specified on them which is a BoundingBox that represents the bounds of that object's geometry. Geometry Geometry objects are a sealed hierarchy of classes that inherit from the Geometry class. This allows for exhaustive type checks in Kotlin using a when block. Kotlin val geometry : Geometry = getSomeGeometry () val type = when ( geometry ) { is Point -> \"Point\" is MultiPoint -> \"MultiPoint\" is LineString -> \"LineString\" is MultiLineString -> \"MultiLineString\" is Polygon -> \"Polygon\" is MultiPolygon -> \"MultiPolygon\" is GeometryCollection -> \"GeometryCollection\" } All seven types of GeoJSON geometries are implemented and summarized below. Full documentation can be found in the API pages . Position Positions are implemented as a DoubleArray -backed class. Each component ( longitude , latitude , altitude ) can be accessed by its propery. The class also supports destructuring. Positions are implemented as an interface where the longitude, latitude, and optionally an altitude are accessible as properties. The basic implementation of the Position interface is the LngLat class. Kotlin val position : Position = Position ( - 75.0 , 45.0 ) val ( longitude , latitude , altitude ) = position // Access values position . longitude position . latitude position . altitude // null if unspecified JSON [ -75 , 45 ] Point A Point is a single Position. Kotlin val point = Point ( Position ( - 75.0 , 45.0 )) println ( point . longitude ) // Prints: -75.0 JSON { \"type\" : \"Point\" , \"coordinates\" : [ -75 , 45 ] } MultiPoint A MultiPoint is an array of Positions. Kotlin val multiPoint = MultiPoint ( Position ( - 75.0 , 45.0 ), Position ( - 79.0 , 44.0 )) JSON { \"type\" : \"MultiPoint\" , \"coordinates\" : [[ -75 , 45 ], [ -79 , 44 ]] } LineString A LineString is a sequence of two or more Positions. Kotlin val lineString = LineString ( Position ( - 75.0 , 45.0 ), Position ( - 79.0 , 44.0 )) JSON { \"type\" : \"LineString\" , \"coordinates\" : [[ -75 , 45 ], [ -79 , 44 ]] } MultiLineString A MultiLineString is an array of LineStrings. Kotlin val multiLineString = MultiLineString ( listOf ( Position ( 12.3 , 45.6 ), Position ( 78.9 , 12.3 )), listOf ( Position ( 87.6 , 54.3 ), Position ( 21.9 , 56.4 )) ) JSON { \"type\" : \"MultiLineString\" , \"coordinates\" : [ [[ 12.3 , 45.6 ], [ 78.9 , 12.3 ]], [[ 87.6 , 54.3 ], [ 21.9 , 56.4 ]] ] } Polygon A Polygon is an array of rings. Each ring is a sequence of points with the last point matching the first point to indicate a closed area. The first ring defines the outer shape of the polygon, while all the following rings define \"holes\" inside the polygon. Kotlin val polygon = Polygon ( listOf ( Position ( - 79.87 , 43.42 ), Position ( - 78.89 , 43.49 ), Position ( - 79.07 , 44.02 ), Position ( - 79.95 , 43.87 ), Position ( - 79.87 , 43.42 ) ), listOf ( Position ( - 79.75 , 43.81 ), Position ( - 79.56 , 43.85 ), Position ( - 79.7 , 43.88 ), Position ( - 79.75 , 43.81 ) ) ) JSON { \"type\" : \"Polygon\" , \"coordinates\" : [ [[ -79.87 , 43.42 ], [ -78.89 , 43.49 ], [ -79.07 , 44.02 ], [ -79.95 , 43.87 ], [ -79.87 , 43.42 ]], [[ -79.75 , 43.81 ], [ -79.56 , 43.85 ], [ -79.7 , 43.88 ], [ -79.75 , 43.81 ]] ] } MultiPolygon A MultiPolygon is an array of Polygons. Kotlin val polygon = listOf ( Position ( - 79.87 , 43.42 ), Position ( - 78.89 , 43.49 ), Position ( - 79.07 , 44.02 ), Position ( - 79.95 , 43.87 ), Position ( - 79.87 , 43.42 ) ), listOf ( Position ( - 79.75 , 43.81 ), Position ( - 79.56 , 43.85 ), Position ( - 79.7 , 43.88 ), Position ( - 79.75 , 43.81 ) ) val multiPolygon = MultiPolygon ( polygon , polygon ) JSON { \"type\" : \"MultiPolygon\" , \"coordinates\" : [ [ [[ -79.87 , 43.42 ], [ -78.89 , 43.49 ], [ -79.07 , 44.02 ], [ -79.95 , 43.87 ], [ -79.87 , 43.42 ]], [[ -79.75 , 43.81 ], [ -79.56 , 43.85 ], [ -79.7 , 43.88 ], [ -79.75 , 43.81 ]] ], [ [[ -79.87 , 43.42 ], [ -78.89 , 43.49 ], [ -79.07 , 44.02 ], [ -79.95 , 43.87 ], [ -79.87 , 43.42 ]], [[ -79.75 , 43.81 ], [ -79.56 , 43.85 ], [ -79.7 , 43.88 ], [ -79.75 , 43.81 ]] ] ] } GeometryCollection A GeometryCollection is a collection of different types of Geometry. It implements the Collection interface and can be used in any place that a collection can be used. Kotlin val geometryCollection = GeometryCollection ( point , lineString ) // Can be iterated over, and used in any way a Collection<T> can be geometryCollection . forEach { geometry -> // ... } JSON { \"type\" : \"GeometryCollection\" , \"coordinates\" : [ { \"type\" : \"Point\" , \"coordinates\" : [ -75 , 45 ] }, { \"type\" : \"LineString\" , \"coordinates\" : [[ -75 , 45 ], [ -79 , 44 ]] } ] } Feature A Feature can contain a Geometry object, as well as a set of data properties, and optionally a commonly used identifier ( id ). A feature's properties are stored as a map of JsonElement objects from kotlinx.serialization . A set of helper methods to get and set properties with the appropriate types directly. Kotlin val feature = Feature ( point ) feature . setNumberProperty ( \"size\" , 9999 ) val size : Number? = feature . getNumberProperty ( \"size\" ) // 9999 val geometry : Geometry? = feature . geometry // point JSON { \"type\" : \"Feature\" , \"geometry\" : { \"type\" : \"Point\" , \"coordinates\" : [ -75 , 45 ] }, \"properties\" : { \"size\" : 9999 } } FeatureCollection A FeatureCollection is a collection of multiple features. FeatureCollection implements the Collection interface and can be used in any place that a collection can be used. Kotlin val featureCollection = FeatureCollection ( pointFeature ) featureCollection . forEach { feature -> // ... } JSON { \"type\" : \"FeatureCollection\" , \"features\" : [ { \"type\" : \"Feature\" , \"geometry\" : { \"type\" : \"Point\" , \"coordinates\" : [ -75 , 45 ] }, \"properties\" : { \"size\" : 9999 } } ] } BoundingBox The BoundingBox class is used to represent the bounding boxes that can be set for any GeoJson object. Like the Position class, bounding boxes are backed by a DoubleArray with each component accessible by its propery ( southwest and northeast ). Bounding boxes also support destructuring. Kotlin val bbox = BoundingBox ( west = 11.6 , south = 45.1 , east = 12.7 , north = 45.7 ) val ( southwest , northeast ) = bbox // Two Positions JSON [ 11.6 , 45.1 , 12.7 , 45.7 ] Serialization To Json Any GeoJson object can be serialized to a JSON string using the json() function. This function converts the object to JSON using string concatenation and is therefore very fast. Kotlin val featureCollection : FeatureCollection = getFeatureCollection () val json = featureCollection . json () println ( json ) Spatial-K is also fully compatible with kotlinx.serialization to allow for integration into more complex models, however this is much slower. For encoding directly to JSON strings, prefer to use the json() function. From Json The fromJson and fromJsonOrNull companion (or static) functions are available on each GeoJson class to decode each type of object from a JSON string. Kotlin // Throws exception if the JSON cannot be deserialized to a Point val myPoint = Point . fromJson ( \"{...geojson...}\" ) // Returns null if an error occurs val nullable = Point . fromJsonOrNull ( \"{...not a point...}\" ) Java // Throws exception if the JSON cannot be deserialized to a Point var myPoint = Point . fromJson ( \"{...geojson...}\" ) // Returns null if an error occurs var nullable = Point . fromJsonOrNull ( \"{...not a point...}\" ) Like with encoding, Spatial-K objects can also be decoded using kotlinx.serialization . Kotlin val feature : Feature = Json . decodeFromString ( Feature . serializer (), \"{...feature...}\" ) GeoJson DSL It's recommended to construct GeoJson objects in-code using the GeoJson DSL. Positions Convenience functions to construct latitude/longitude Position instances is included. These functions will check for valid latitude and longitude values and will throw an IllegalArgumentException otherwise. Kotlin lngLat ( longitude = - 75.0 , latitude = 45.0 ) // Throws exception!! lngLat ( longitude = - 565.0 , latitude = 45.0 ) JSON [ -75.0 , 45.0 ] Geometry Each geometry type has a corresponding DSL. A GeoJson object's bbox value can be assigned in any of the DSLs. Point Kotlin point ( longitude = - 75.0 , latitude = 45.0 , altitude = 100.0 ) // Or... point ( Position ( 12.5 , 35.9 )) JSON { \"type\" : \"Point\" , \"coordinates\" : [ -75.0 , 45.0 , 100.0 ] } MultiPoint The MultiPoint DSL creates a MultiPoint from many Point s, or by using the unary plus operator to add Position instances as positions in the geometry. Point geometries can also be added to the multi point using the unary plus operator. Kotlin val myPoint = Point ( 88.0 , 34.0 ) multiPoint { point ( - 75.0 , 45.0 ) + lngLat ( - 78.0 , 44.0 ) + myPoint } JSON { \"type\" : \"MultiPoint\" , \"coordinates\" : [ [ -75.0 , 45.0 ], [ -78.0 , 44.0 ], [ 88.0 , 34.0 ] ] } LineString A LineString contains main points. Like with MultiPoint , a LineString can also be built using the unary plus operator to add positions as part of the line. The order in which positions are added to the LineString is the order that the LineString will follow. Kotlin lineString { point ( 45.0 , 45.0 ) point ( 0.0 , 0.0 ) } JSON { \"type\" : \"LineString\" , \"coordinates\" : [[ 45.0 , 45.0 ], [ 0.0 , 0.0 ]] } MultiLineString The MultiLineString DSL uses the unary plus operator to add multiple line strings. The LineString DSL can be used to create LineString objects to add. Kotlin val simpleLine = lineString { point ( 45.0 , 45.0 ) point ( 0.0 , 0.0 ) } multiLineString { + simpleLine // Inline LineString creation lineString { point ( 44.4 , 55.5 ) point ( 55.5 , 66.6 ) } } JSON { \"type\" : \"MultiLineString\" , \"coordinates\" : [ [[ 45.0 , 45.0 ], [ 0.0 , 0.0 ]], [[ 44.4 , 55.5 ], [ 55.5 , 66.6 ]] ] } Polygon The Polygon DSL is used by specifying linear rings that make up the polygon's shape and holes. The first ring is the exterior ring with four or more positions. The last position must be the same as the first position. All ring s that follow will represent interior rings (i.e. holes) in the polygon. For convenience, the complete() function can be used to \"complete\" a ring. It adds the last position in the ring by copying the first position that was added. Kotlin val simpleLine = lineString { point ( 45.0 , 45.0 ) point ( 0.0 , 0.0 ) } polygon { ring { // LineStrings can be used as part of a ring + simpleLine point ( 12.0 , 12.0 ) complete () } ring { point ( 4.0 , 4.0 ) point ( 2.0 , 2.0 ) point ( 3.0 , 3.0 ) complete () } } JSON { \"type\" : \"Polygon\" , \"coordinates\" : [ [[ 45.0 , 45.0 ], [ 0.0 , 0.0 ], [ 12.0 , 12.0 ], [ 45.0 , 45.0 ]], [[ 4.0 , 4.0 ], [ 2.0 , 2.0 ], [ 3.0 , 3.0 ], [ 4.0 , 4.0 ]] ] } MultiPolygon Like with previous \"Multi\" geometries, the unary plus operator is used to add multiple Polygon objects. The Polygon DSL can also be used here. Kotlin val simplePolygon = previousExample () multiPolygon { + simplePolygon polygon { ring { point ( 12.0 , 0.0 ) point ( 0.0 , 12.0 ) point ( - 12.0 , 0.0 ) point ( 5.0 , 5.0 ) complete () } } } JSON { \"type\" : \"MultiPolygon\" , \"coordinates\" : [ [ [[ 45.0 , 45.0 ], [ 0.0 , 0.0 ], [ 12.0 , 12.0 ], [ 45.0 , 45.0 ]], [[ 4.0 , 4.0 ], [ 2.0 , 2.0 ], [ 3.0 , 3.0 ], [ 4.0 , 4.0 ]] ], [ [[ 12.0 , 0.0 ], [ 0.0 , 12.0 ], [ -12.0 , 0.0 ], [ 5.0 , 5.0 ], [ 12.0 , 0.0 ]] ] ] } Geometry Collection The unary plus operator can be used to add any geometry instance to a GeometryCollection . Kotlin val simplePoint : Point = previousPoint () val simpleLine : LineString = previousLineString () val simplePolygon : Polygon = previousPolygon () geometryCollection { + simplePoint + simpleLine + simplePolygon } JSON { \"type\" : \"GeometryCollection\" , \"geometries\" : [ { \"type\" : \"Point\" , \"coordinates\" : [ -75.0 , 45.0 , 100.0 ] }, { \"type\" : \"LineString\" , \"coordinates\" : [[ 45.0 , 45.0 ], [ 0.0 , 0.0 ]] }, { \"type\" : \"Polygon\" , \"coordinates\" : [ [[ 45.0 , 45.0 ], [ 0.0 , 0.0 ], [ 12.0 , 12.0 ], [ 45.0 , 45.0 ]], [[ 4.0 , 4.0 ], [ 2.0 , 2.0 ], [ 3.0 , 3.0 ], [ 4.0 , 4.0 ]] ] } ] } Feature The Feature DSL can construct a Feature object with a geometry, a bounding box, and an id. Properties can be specified in the PropertiesBuilder block by calling put(key, value) to add properties. Kotlin feature ( geometry = point ( - 75.0 , 45.0 ), id = \"point1\" , bbox = BoundingBox ( - 76.9 , 44.1 , - 74.2 , 45.7 )) { put ( \"name\" , \"Hello World\" ) put ( \"value\" , 13 ) put ( \"cool\" , true ) } JSON { \"type\" : \"Feature\" , \"id\" : \"point1\" , \"bbox\" : [ -76.9 , 44.1 , -74.2 , 45.7 ], \"properties\" : { \"name\" : \"Hello World\" , \"value\" : 13 , \"cool\" : true }, \"geometry\" : { \"type\" : \"Point\" , \"coordinates\" : [ -75.0 , 45.0 ] } } Feature Collection A FeatureCollection is constructed by adding multiple Feature objects using the unary plus operator. Kotlin featureCollection { feature ( geometry = point ( - 75.0 , 45.0 )) } JSON { \"type\" : \"FeatureCollection\" , \"features\" : [ { \"type\" : \"Feature\" , \"geometry\" : { \"type\" : \"Point\" , \"coordinates\" : [ -75.0 , 45.0 ] }, \"properties\" : {} } ] }","title":"GeoJson"},{"location":"geojson/#geojson","text":"The geojson module contains an implementation of the GeoJson standard . See below for constructing GeoJson objects using the DSL.","title":"GeoJson"},{"location":"geojson/#installation","text":"Kotlin dependencies { implementation ( \"io.github.dellisd.spatialk:geojson:<version>\" ) } Groovy dependencies { implementation \"io.github.dellisd.spatialk:geojson:<version>\" }","title":"Installation"},{"location":"geojson/#geojson-objects","text":"The GeoJson interface represents all GeoJson objects. All GeoJson objects can have a bbox property specified on them which is a BoundingBox that represents the bounds of that object's geometry.","title":"GeoJson Objects"},{"location":"geojson/#geometry","text":"Geometry objects are a sealed hierarchy of classes that inherit from the Geometry class. This allows for exhaustive type checks in Kotlin using a when block. Kotlin val geometry : Geometry = getSomeGeometry () val type = when ( geometry ) { is Point -> \"Point\" is MultiPoint -> \"MultiPoint\" is LineString -> \"LineString\" is MultiLineString -> \"MultiLineString\" is Polygon -> \"Polygon\" is MultiPolygon -> \"MultiPolygon\" is GeometryCollection -> \"GeometryCollection\" } All seven types of GeoJSON geometries are implemented and summarized below. Full documentation can be found in the API pages .","title":"Geometry"},{"location":"geojson/#position","text":"Positions are implemented as a DoubleArray -backed class. Each component ( longitude , latitude , altitude ) can be accessed by its propery. The class also supports destructuring. Positions are implemented as an interface where the longitude, latitude, and optionally an altitude are accessible as properties. The basic implementation of the Position interface is the LngLat class. Kotlin val position : Position = Position ( - 75.0 , 45.0 ) val ( longitude , latitude , altitude ) = position // Access values position . longitude position . latitude position . altitude // null if unspecified JSON [ -75 , 45 ]","title":"Position"},{"location":"geojson/#point","text":"A Point is a single Position. Kotlin val point = Point ( Position ( - 75.0 , 45.0 )) println ( point . longitude ) // Prints: -75.0 JSON { \"type\" : \"Point\" , \"coordinates\" : [ -75 , 45 ] }","title":"Point"},{"location":"geojson/#multipoint","text":"A MultiPoint is an array of Positions. Kotlin val multiPoint = MultiPoint ( Position ( - 75.0 , 45.0 ), Position ( - 79.0 , 44.0 )) JSON { \"type\" : \"MultiPoint\" , \"coordinates\" : [[ -75 , 45 ], [ -79 , 44 ]] }","title":"MultiPoint"},{"location":"geojson/#linestring","text":"A LineString is a sequence of two or more Positions. Kotlin val lineString = LineString ( Position ( - 75.0 , 45.0 ), Position ( - 79.0 , 44.0 )) JSON { \"type\" : \"LineString\" , \"coordinates\" : [[ -75 , 45 ], [ -79 , 44 ]] }","title":"LineString"},{"location":"geojson/#multilinestring","text":"A MultiLineString is an array of LineStrings. Kotlin val multiLineString = MultiLineString ( listOf ( Position ( 12.3 , 45.6 ), Position ( 78.9 , 12.3 )), listOf ( Position ( 87.6 , 54.3 ), Position ( 21.9 , 56.4 )) ) JSON { \"type\" : \"MultiLineString\" , \"coordinates\" : [ [[ 12.3 , 45.6 ], [ 78.9 , 12.3 ]], [[ 87.6 , 54.3 ], [ 21.9 , 56.4 ]] ] }","title":"MultiLineString"},{"location":"geojson/#polygon","text":"A Polygon is an array of rings. Each ring is a sequence of points with the last point matching the first point to indicate a closed area. The first ring defines the outer shape of the polygon, while all the following rings define \"holes\" inside the polygon. Kotlin val polygon = Polygon ( listOf ( Position ( - 79.87 , 43.42 ), Position ( - 78.89 , 43.49 ), Position ( - 79.07 , 44.02 ), Position ( - 79.95 , 43.87 ), Position ( - 79.87 , 43.42 ) ), listOf ( Position ( - 79.75 , 43.81 ), Position ( - 79.56 , 43.85 ), Position ( - 79.7 , 43.88 ), Position ( - 79.75 , 43.81 ) ) ) JSON { \"type\" : \"Polygon\" , \"coordinates\" : [ [[ -79.87 , 43.42 ], [ -78.89 , 43.49 ], [ -79.07 , 44.02 ], [ -79.95 , 43.87 ], [ -79.87 , 43.42 ]], [[ -79.75 , 43.81 ], [ -79.56 , 43.85 ], [ -79.7 , 43.88 ], [ -79.75 , 43.81 ]] ] }","title":"Polygon"},{"location":"geojson/#multipolygon","text":"A MultiPolygon is an array of Polygons. Kotlin val polygon = listOf ( Position ( - 79.87 , 43.42 ), Position ( - 78.89 , 43.49 ), Position ( - 79.07 , 44.02 ), Position ( - 79.95 , 43.87 ), Position ( - 79.87 , 43.42 ) ), listOf ( Position ( - 79.75 , 43.81 ), Position ( - 79.56 , 43.85 ), Position ( - 79.7 , 43.88 ), Position ( - 79.75 , 43.81 ) ) val multiPolygon = MultiPolygon ( polygon , polygon ) JSON { \"type\" : \"MultiPolygon\" , \"coordinates\" : [ [ [[ -79.87 , 43.42 ], [ -78.89 , 43.49 ], [ -79.07 , 44.02 ], [ -79.95 , 43.87 ], [ -79.87 , 43.42 ]], [[ -79.75 , 43.81 ], [ -79.56 , 43.85 ], [ -79.7 , 43.88 ], [ -79.75 , 43.81 ]] ], [ [[ -79.87 , 43.42 ], [ -78.89 , 43.49 ], [ -79.07 , 44.02 ], [ -79.95 , 43.87 ], [ -79.87 , 43.42 ]], [[ -79.75 , 43.81 ], [ -79.56 , 43.85 ], [ -79.7 , 43.88 ], [ -79.75 , 43.81 ]] ] ] }","title":"MultiPolygon"},{"location":"geojson/#geometrycollection","text":"A GeometryCollection is a collection of different types of Geometry. It implements the Collection interface and can be used in any place that a collection can be used. Kotlin val geometryCollection = GeometryCollection ( point , lineString ) // Can be iterated over, and used in any way a Collection<T> can be geometryCollection . forEach { geometry -> // ... } JSON { \"type\" : \"GeometryCollection\" , \"coordinates\" : [ { \"type\" : \"Point\" , \"coordinates\" : [ -75 , 45 ] }, { \"type\" : \"LineString\" , \"coordinates\" : [[ -75 , 45 ], [ -79 , 44 ]] } ] }","title":"GeometryCollection"},{"location":"geojson/#feature","text":"A Feature can contain a Geometry object, as well as a set of data properties, and optionally a commonly used identifier ( id ). A feature's properties are stored as a map of JsonElement objects from kotlinx.serialization . A set of helper methods to get and set properties with the appropriate types directly. Kotlin val feature = Feature ( point ) feature . setNumberProperty ( \"size\" , 9999 ) val size : Number? = feature . getNumberProperty ( \"size\" ) // 9999 val geometry : Geometry? = feature . geometry // point JSON { \"type\" : \"Feature\" , \"geometry\" : { \"type\" : \"Point\" , \"coordinates\" : [ -75 , 45 ] }, \"properties\" : { \"size\" : 9999 } }","title":"Feature"},{"location":"geojson/#featurecollection","text":"A FeatureCollection is a collection of multiple features. FeatureCollection implements the Collection interface and can be used in any place that a collection can be used. Kotlin val featureCollection = FeatureCollection ( pointFeature ) featureCollection . forEach { feature -> // ... } JSON { \"type\" : \"FeatureCollection\" , \"features\" : [ { \"type\" : \"Feature\" , \"geometry\" : { \"type\" : \"Point\" , \"coordinates\" : [ -75 , 45 ] }, \"properties\" : { \"size\" : 9999 } } ] }","title":"FeatureCollection"},{"location":"geojson/#boundingbox","text":"The BoundingBox class is used to represent the bounding boxes that can be set for any GeoJson object. Like the Position class, bounding boxes are backed by a DoubleArray with each component accessible by its propery ( southwest and northeast ). Bounding boxes also support destructuring. Kotlin val bbox = BoundingBox ( west = 11.6 , south = 45.1 , east = 12.7 , north = 45.7 ) val ( southwest , northeast ) = bbox // Two Positions JSON [ 11.6 , 45.1 , 12.7 , 45.7 ]","title":"BoundingBox"},{"location":"geojson/#serialization","text":"","title":"Serialization"},{"location":"geojson/#to-json","text":"Any GeoJson object can be serialized to a JSON string using the json() function. This function converts the object to JSON using string concatenation and is therefore very fast. Kotlin val featureCollection : FeatureCollection = getFeatureCollection () val json = featureCollection . json () println ( json ) Spatial-K is also fully compatible with kotlinx.serialization to allow for integration into more complex models, however this is much slower. For encoding directly to JSON strings, prefer to use the json() function.","title":"To Json"},{"location":"geojson/#from-json","text":"The fromJson and fromJsonOrNull companion (or static) functions are available on each GeoJson class to decode each type of object from a JSON string. Kotlin // Throws exception if the JSON cannot be deserialized to a Point val myPoint = Point . fromJson ( \"{...geojson...}\" ) // Returns null if an error occurs val nullable = Point . fromJsonOrNull ( \"{...not a point...}\" ) Java // Throws exception if the JSON cannot be deserialized to a Point var myPoint = Point . fromJson ( \"{...geojson...}\" ) // Returns null if an error occurs var nullable = Point . fromJsonOrNull ( \"{...not a point...}\" ) Like with encoding, Spatial-K objects can also be decoded using kotlinx.serialization . Kotlin val feature : Feature = Json . decodeFromString ( Feature . serializer (), \"{...feature...}\" )","title":"From Json"},{"location":"geojson/#geojson-dsl","text":"It's recommended to construct GeoJson objects in-code using the GeoJson DSL.","title":"GeoJson DSL"},{"location":"geojson/#positions","text":"Convenience functions to construct latitude/longitude Position instances is included. These functions will check for valid latitude and longitude values and will throw an IllegalArgumentException otherwise. Kotlin lngLat ( longitude = - 75.0 , latitude = 45.0 ) // Throws exception!! lngLat ( longitude = - 565.0 , latitude = 45.0 ) JSON [ -75.0 , 45.0 ]","title":"Positions"},{"location":"geojson/#geometry_1","text":"Each geometry type has a corresponding DSL. A GeoJson object's bbox value can be assigned in any of the DSLs.","title":"Geometry"},{"location":"geojson/#point_1","text":"Kotlin point ( longitude = - 75.0 , latitude = 45.0 , altitude = 100.0 ) // Or... point ( Position ( 12.5 , 35.9 )) JSON { \"type\" : \"Point\" , \"coordinates\" : [ -75.0 , 45.0 , 100.0 ] }","title":"Point"},{"location":"geojson/#multipoint_1","text":"The MultiPoint DSL creates a MultiPoint from many Point s, or by using the unary plus operator to add Position instances as positions in the geometry. Point geometries can also be added to the multi point using the unary plus operator. Kotlin val myPoint = Point ( 88.0 , 34.0 ) multiPoint { point ( - 75.0 , 45.0 ) + lngLat ( - 78.0 , 44.0 ) + myPoint } JSON { \"type\" : \"MultiPoint\" , \"coordinates\" : [ [ -75.0 , 45.0 ], [ -78.0 , 44.0 ], [ 88.0 , 34.0 ] ] }","title":"MultiPoint"},{"location":"geojson/#linestring_1","text":"A LineString contains main points. Like with MultiPoint , a LineString can also be built using the unary plus operator to add positions as part of the line. The order in which positions are added to the LineString is the order that the LineString will follow. Kotlin lineString { point ( 45.0 , 45.0 ) point ( 0.0 , 0.0 ) } JSON { \"type\" : \"LineString\" , \"coordinates\" : [[ 45.0 , 45.0 ], [ 0.0 , 0.0 ]] }","title":"LineString"},{"location":"geojson/#multilinestring_1","text":"The MultiLineString DSL uses the unary plus operator to add multiple line strings. The LineString DSL can be used to create LineString objects to add. Kotlin val simpleLine = lineString { point ( 45.0 , 45.0 ) point ( 0.0 , 0.0 ) } multiLineString { + simpleLine // Inline LineString creation lineString { point ( 44.4 , 55.5 ) point ( 55.5 , 66.6 ) } } JSON { \"type\" : \"MultiLineString\" , \"coordinates\" : [ [[ 45.0 , 45.0 ], [ 0.0 , 0.0 ]], [[ 44.4 , 55.5 ], [ 55.5 , 66.6 ]] ] }","title":"MultiLineString"},{"location":"geojson/#polygon_1","text":"The Polygon DSL is used by specifying linear rings that make up the polygon's shape and holes. The first ring is the exterior ring with four or more positions. The last position must be the same as the first position. All ring s that follow will represent interior rings (i.e. holes) in the polygon. For convenience, the complete() function can be used to \"complete\" a ring. It adds the last position in the ring by copying the first position that was added. Kotlin val simpleLine = lineString { point ( 45.0 , 45.0 ) point ( 0.0 , 0.0 ) } polygon { ring { // LineStrings can be used as part of a ring + simpleLine point ( 12.0 , 12.0 ) complete () } ring { point ( 4.0 , 4.0 ) point ( 2.0 , 2.0 ) point ( 3.0 , 3.0 ) complete () } } JSON { \"type\" : \"Polygon\" , \"coordinates\" : [ [[ 45.0 , 45.0 ], [ 0.0 , 0.0 ], [ 12.0 , 12.0 ], [ 45.0 , 45.0 ]], [[ 4.0 , 4.0 ], [ 2.0 , 2.0 ], [ 3.0 , 3.0 ], [ 4.0 , 4.0 ]] ] }","title":"Polygon"},{"location":"geojson/#multipolygon_1","text":"Like with previous \"Multi\" geometries, the unary plus operator is used to add multiple Polygon objects. The Polygon DSL can also be used here. Kotlin val simplePolygon = previousExample () multiPolygon { + simplePolygon polygon { ring { point ( 12.0 , 0.0 ) point ( 0.0 , 12.0 ) point ( - 12.0 , 0.0 ) point ( 5.0 , 5.0 ) complete () } } } JSON { \"type\" : \"MultiPolygon\" , \"coordinates\" : [ [ [[ 45.0 , 45.0 ], [ 0.0 , 0.0 ], [ 12.0 , 12.0 ], [ 45.0 , 45.0 ]], [[ 4.0 , 4.0 ], [ 2.0 , 2.0 ], [ 3.0 , 3.0 ], [ 4.0 , 4.0 ]] ], [ [[ 12.0 , 0.0 ], [ 0.0 , 12.0 ], [ -12.0 , 0.0 ], [ 5.0 , 5.0 ], [ 12.0 , 0.0 ]] ] ] }","title":"MultiPolygon"},{"location":"geojson/#geometry-collection","text":"The unary plus operator can be used to add any geometry instance to a GeometryCollection . Kotlin val simplePoint : Point = previousPoint () val simpleLine : LineString = previousLineString () val simplePolygon : Polygon = previousPolygon () geometryCollection { + simplePoint + simpleLine + simplePolygon } JSON { \"type\" : \"GeometryCollection\" , \"geometries\" : [ { \"type\" : \"Point\" , \"coordinates\" : [ -75.0 , 45.0 , 100.0 ] }, { \"type\" : \"LineString\" , \"coordinates\" : [[ 45.0 , 45.0 ], [ 0.0 , 0.0 ]] }, { \"type\" : \"Polygon\" , \"coordinates\" : [ [[ 45.0 , 45.0 ], [ 0.0 , 0.0 ], [ 12.0 , 12.0 ], [ 45.0 , 45.0 ]], [[ 4.0 , 4.0 ], [ 2.0 , 2.0 ], [ 3.0 , 3.0 ], [ 4.0 , 4.0 ]] ] } ] }","title":"Geometry Collection"},{"location":"geojson/#feature_1","text":"The Feature DSL can construct a Feature object with a geometry, a bounding box, and an id. Properties can be specified in the PropertiesBuilder block by calling put(key, value) to add properties. Kotlin feature ( geometry = point ( - 75.0 , 45.0 ), id = \"point1\" , bbox = BoundingBox ( - 76.9 , 44.1 , - 74.2 , 45.7 )) { put ( \"name\" , \"Hello World\" ) put ( \"value\" , 13 ) put ( \"cool\" , true ) } JSON { \"type\" : \"Feature\" , \"id\" : \"point1\" , \"bbox\" : [ -76.9 , 44.1 , -74.2 , 45.7 ], \"properties\" : { \"name\" : \"Hello World\" , \"value\" : 13 , \"cool\" : true }, \"geometry\" : { \"type\" : \"Point\" , \"coordinates\" : [ -75.0 , 45.0 ] } }","title":"Feature"},{"location":"geojson/#feature-collection","text":"A FeatureCollection is constructed by adding multiple Feature objects using the unary plus operator. Kotlin featureCollection { feature ( geometry = point ( - 75.0 , 45.0 )) } JSON { \"type\" : \"FeatureCollection\" , \"features\" : [ { \"type\" : \"Feature\" , \"geometry\" : { \"type\" : \"Point\" , \"coordinates\" : [ -75.0 , 45.0 ] }, \"properties\" : {} } ] }","title":"Feature Collection"},{"location":"ported-functions/","text":"Ported Functions The following functions have been ported as of version 0.2.0 of this library. You can view porting progress for the next release here . Measurement along area bbox bboxPolygon bearing center centerOfMass destination distance envelope length midpoint pointOnFeature polygonTangents pointToLineDistance rhumbBearing rhumbDestination rhumbDistance square greatCircle Coordinate Mutation cleanCoords flip rewind round Use round or Math.round from the standard library instead. truncate Transformation bboxClip bezierSpline buffer circle clone concave convex difference dissolve intersect lineOffset simplify tessellate transformRotate transformTranslate transformScale union voronoi Feature Conversion combine explode flatten lineToPolygon polygonize polygonToLine Miscellaneous kinks lineArc lineChunk lineIntersect Partially implemented. lineOverlap lineSegment lineSlice lineSliceAlong lineSplit mask nearestPointOnLine sector shortestPath unkinkPolygon Helper Use the GeoJson DSL instead. Random randomPosition randomPoint randomLineString randomPolygon Data sample Interpolation interpolate isobands isolines planepoint tin Joins pointsWithinPolygon tag Grids hexGrid pointGrid squareGrid triangleGrid Classification nearestPoint Aggregation collect clustersDbscan clustersKmeans Meta coordAll coordEach coordReduce featureEach featureReduce flattenEach flattenReduce getCoord getCoords getGeom getType geomEach geomReduce propEach segmentEach segmentReduce getCluster clusterEach clusterReduce Assertations collectionOf containsNumber geojsonType featureOf Booleans booleanClockwise booleanContains booleanCrosses booleanDisjoint booleanEqual booleanOverlap booleanParallel booleanPointInPolygon booleanPointOnLine booleanWithin Unit Conversion bearingToAzimuth convertArea convertLength degreesToRadians lengthToRadians lengthToDegrees radiansToLength radiansToDegrees toMercator toWgs84","title":"Ported Functions"},{"location":"ported-functions/#ported-functions","text":"The following functions have been ported as of version 0.2.0 of this library. You can view porting progress for the next release here .","title":"Ported Functions"},{"location":"ported-functions/#measurement","text":"along area bbox bboxPolygon bearing center centerOfMass destination distance envelope length midpoint pointOnFeature polygonTangents pointToLineDistance rhumbBearing rhumbDestination rhumbDistance square greatCircle","title":"Measurement"},{"location":"ported-functions/#coordinate-mutation","text":"cleanCoords flip rewind round Use round or Math.round from the standard library instead. truncate","title":"Coordinate Mutation"},{"location":"ported-functions/#transformation","text":"bboxClip bezierSpline buffer circle clone concave convex difference dissolve intersect lineOffset simplify tessellate transformRotate transformTranslate transformScale union voronoi","title":"Transformation"},{"location":"ported-functions/#feature-conversion","text":"combine explode flatten lineToPolygon polygonize polygonToLine","title":"Feature Conversion"},{"location":"ported-functions/#miscellaneous","text":"kinks lineArc lineChunk lineIntersect Partially implemented. lineOverlap lineSegment lineSlice lineSliceAlong lineSplit mask nearestPointOnLine sector shortestPath unkinkPolygon","title":"Miscellaneous"},{"location":"ported-functions/#helper","text":"Use the GeoJson DSL instead.","title":"Helper"},{"location":"ported-functions/#random","text":"randomPosition randomPoint randomLineString randomPolygon","title":"Random"},{"location":"ported-functions/#data","text":"sample","title":"Data"},{"location":"ported-functions/#interpolation","text":"interpolate isobands isolines planepoint tin","title":"Interpolation"},{"location":"ported-functions/#joins","text":"pointsWithinPolygon tag","title":"Joins"},{"location":"ported-functions/#grids","text":"hexGrid pointGrid squareGrid triangleGrid","title":"Grids"},{"location":"ported-functions/#classification","text":"nearestPoint","title":"Classification"},{"location":"ported-functions/#aggregation","text":"collect clustersDbscan clustersKmeans","title":"Aggregation"},{"location":"ported-functions/#meta","text":"coordAll coordEach coordReduce featureEach featureReduce flattenEach flattenReduce getCoord getCoords getGeom getType geomEach geomReduce propEach segmentEach segmentReduce getCluster clusterEach clusterReduce","title":"Meta"},{"location":"ported-functions/#assertations","text":"collectionOf containsNumber geojsonType featureOf","title":"Assertations"},{"location":"ported-functions/#booleans","text":"booleanClockwise booleanContains booleanCrosses booleanDisjoint booleanEqual booleanOverlap booleanParallel booleanPointInPolygon booleanPointOnLine booleanWithin","title":"Booleans"},{"location":"ported-functions/#unit-conversion","text":"bearingToAzimuth convertArea convertLength degreesToRadians lengthToRadians lengthToDegrees radiansToLength radiansToDegrees toMercator toWgs84","title":"Unit Conversion"},{"location":"turf/","text":"Turf Turfjs is a spatial analysis library for JavaScript applications and the turf module contains a Kotlin port of it with support for Kotlin Multiplatform projects. This module makes use of the classes defined in the geojson module as the GeoJson inputs to many of the turf functions. The documentation for the ported functions can be found in the API docs , while more details on each function can be found on the Turfjs site. Installation Kotlin dependencies { implementation ( \"io.github.dellisd.spatialk:turf:<version>\" ) } Groovy dependencies { implementation \"io.github.dellisd.spatialk:turf:<version>\" } Example Turf functions are available as top-level functions in Kotlin, or as static member functions in Java. Kotlin val point = LngLat ( - 75.0 , 45.0 ) val ( longitude , latitude ) = destination ( point , 100.0 , 0.0 ) Turf Functions A list of all turf functions and their current status in the port can be found on this page . Units of Measurement Units of measurement are represented using the Units enum. These enum values can be passed into functions to specify the units used by other values passed into the function. Kotlin val result = convertLength ( 12.5 , from = Units . Kilometers , to = Units . Miles ) Not all units are valid for every function. For example: acres cannot be used as a measure of distance. Calling a function like convertLength with Units.Acres as one of the arguments will cause an IllegalArgumentException .","title":"Overview"},{"location":"turf/#turf","text":"Turfjs is a spatial analysis library for JavaScript applications and the turf module contains a Kotlin port of it with support for Kotlin Multiplatform projects. This module makes use of the classes defined in the geojson module as the GeoJson inputs to many of the turf functions. The documentation for the ported functions can be found in the API docs , while more details on each function can be found on the Turfjs site.","title":"Turf"},{"location":"turf/#installation","text":"Kotlin dependencies { implementation ( \"io.github.dellisd.spatialk:turf:<version>\" ) } Groovy dependencies { implementation \"io.github.dellisd.spatialk:turf:<version>\" }","title":"Installation"},{"location":"turf/#example","text":"Turf functions are available as top-level functions in Kotlin, or as static member functions in Java. Kotlin val point = LngLat ( - 75.0 , 45.0 ) val ( longitude , latitude ) = destination ( point , 100.0 , 0.0 )","title":"Example"},{"location":"turf/#turf-functions","text":"A list of all turf functions and their current status in the port can be found on this page .","title":"Turf Functions"},{"location":"turf/#units-of-measurement","text":"Units of measurement are represented using the Units enum. These enum values can be passed into functions to specify the units used by other values passed into the function. Kotlin val result = convertLength ( 12.5 , from = Units . Kilometers , to = Units . Miles ) Not all units are valid for every function. For example: acres cannot be used as a measure of distance. Calling a function like convertLength with Units.Acres as one of the arguments will cause an IllegalArgumentException .","title":"Units of Measurement"},{"location":"api/","text":"/ All modules: Name turf geojson","title":"Index"},{"location":"api/#all-modules","text":"Name turf geojson","title":"All modules:"},{"location":"api/geojson/","text":"// geojson geojson Packages Name io.github.dellisd.spatialk.geojson io.github.dellisd.spatialk.geojson.dsl io.github.dellisd.spatialk.geojson.serialization","title":"geojson"},{"location":"api/geojson/#geojson","text":"","title":"geojson"},{"location":"api/geojson/#packages","text":"Name io.github.dellisd.spatialk.geojson io.github.dellisd.spatialk.geojson.dsl io.github.dellisd.spatialk.geojson.serialization","title":"Packages"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/","text":"// geojson / io.github.dellisd.spatialk.geojson Package io.github.dellisd.spatialk.geojson Types Name Summary BoundingBox [common] Content class BoundingBox ( coordinates : DoubleArray ) More info Represents an area bounded by a northeast and southwest . ExperimentalGeoJsonApi [common] Content @ Target (allowedTargets = [ AnnotationTarget.CLASS , AnnotationTarget.FUNCTION ]) annotation class ExperimentalGeoJsonApi Feature [common] Content class Feature ( geometry : Geometry ?, properties : Map < String , JsonElement>, id : String ?, bbox : BoundingBox ?) : GeoJson More info A feature object represents a spatially bounded thing. FeatureCollection [common] Content class FeatureCollection ( features : List < Feature >, bbox : BoundingBox ?) : Collection < Feature > , GeoJson More info A FeatureCollection object is a collection of Feature objects. GeoJson [common] Content interface GeoJson More info A GeoJSON object represents a Geometry , Feature , or collection of Features . Geometry [common] Content sealed class Geometry : GeoJson GeometryCollection [common] Content class GeometryCollection @ JvmOverloads ()constructor( geometries : List < Geometry >, bbox : BoundingBox ?) : Geometry , Collection < Geometry > LineString [common] Content class LineString @ JvmOverloads ()constructor( coordinates : List < Position >, bbox : BoundingBox ?) : Geometry MultiLineString [common] Content class MultiLineString @ JvmOverloads ()constructor( coordinates : List < List < Position >>, bbox : BoundingBox ?) : Geometry MultiPoint [common] Content class MultiPoint @ JvmOverloads ()constructor( coordinates : List < Position >, bbox : BoundingBox ?) : Geometry MultiPolygon [common] Content class MultiPolygon @ JvmOverloads ()constructor( coordinates : List < List < List < Position >>>, bbox : BoundingBox ?) : Geometry Point [common] Content class Point @ JvmOverloads ()constructor( coordinates : Position , bbox : BoundingBox ?) : Geometry Polygon [common] Content class Polygon @ JvmOverloads ()constructor( coordinates : List < List < Position >>, bbox : BoundingBox ?) : Geometry Position [common] Content class Position ( coordinates : DoubleArray ) More info A position is the fundamental geometry construct. Properties Name Summary hasAltitude [common] val BoundingBox . hasAltitude : Boolean hasAltitude [common] val Position . hasAltitude : Boolean","title":"Index"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/#package-iogithubdellisdspatialkgeojson","text":"","title":"Package io.github.dellisd.spatialk.geojson"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/#types","text":"Name Summary BoundingBox [common] Content class BoundingBox ( coordinates : DoubleArray ) More info Represents an area bounded by a northeast and southwest . ExperimentalGeoJsonApi [common] Content @ Target (allowedTargets = [ AnnotationTarget.CLASS , AnnotationTarget.FUNCTION ]) annotation class ExperimentalGeoJsonApi Feature [common] Content class Feature ( geometry : Geometry ?, properties : Map < String , JsonElement>, id : String ?, bbox : BoundingBox ?) : GeoJson More info A feature object represents a spatially bounded thing. FeatureCollection [common] Content class FeatureCollection ( features : List < Feature >, bbox : BoundingBox ?) : Collection < Feature > , GeoJson More info A FeatureCollection object is a collection of Feature objects. GeoJson [common] Content interface GeoJson More info A GeoJSON object represents a Geometry , Feature , or collection of Features . Geometry [common] Content sealed class Geometry : GeoJson GeometryCollection [common] Content class GeometryCollection @ JvmOverloads ()constructor( geometries : List < Geometry >, bbox : BoundingBox ?) : Geometry , Collection < Geometry > LineString [common] Content class LineString @ JvmOverloads ()constructor( coordinates : List < Position >, bbox : BoundingBox ?) : Geometry MultiLineString [common] Content class MultiLineString @ JvmOverloads ()constructor( coordinates : List < List < Position >>, bbox : BoundingBox ?) : Geometry MultiPoint [common] Content class MultiPoint @ JvmOverloads ()constructor( coordinates : List < Position >, bbox : BoundingBox ?) : Geometry MultiPolygon [common] Content class MultiPolygon @ JvmOverloads ()constructor( coordinates : List < List < List < Position >>>, bbox : BoundingBox ?) : Geometry Point [common] Content class Point @ JvmOverloads ()constructor( coordinates : Position , bbox : BoundingBox ?) : Geometry Polygon [common] Content class Polygon @ JvmOverloads ()constructor( coordinates : List < List < Position >>, bbox : BoundingBox ?) : Geometry Position [common] Content class Position ( coordinates : DoubleArray ) More info A position is the fundamental geometry construct.","title":"Types"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/#properties","text":"Name Summary hasAltitude [common] val BoundingBox . hasAltitude : Boolean hasAltitude [common] val Position . hasAltitude : Boolean","title":"Properties"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/has-altitude/","text":"// geojson / io.github.dellisd.spatialk.geojson / hasAltitude hasAltitude [common] Content val BoundingBox . hasAltitude : Boolean val Position . hasAltitude : Boolean","title":"Has altitude"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/has-altitude/#hasaltitude","text":"[common] Content val BoundingBox . hasAltitude : Boolean val Position . hasAltitude : Boolean","title":"hasAltitude"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-bounding-box/","text":"// geojson / io.github.dellisd.spatialk.geojson / BoundingBox BoundingBox [common] class BoundingBox ( coordinates : DoubleArray ) Represents an area bounded by a northeast and southwest . A GeoJSON object MAY have a member named \"bbox\" to include information on the coordinate range for its Geometries, Features, or FeatureCollections. When serialized, a BoundingBox is represented as an array of length 2*n where n is the number of dimensions represented in the contained geometries, with all axes of the most southwesterly point followed by all axes of the northeasterly point. The axes order of a BoundingBox follow the axes order of geometries. For the BoundingBox to be serialized in 3D form, both Positions must have a defined altitude. See also common https://tools.ietf.org/html/rfc7946#section-5 Constructors BoundingBox [common] fun BoundingBox (west: Double , south: Double , east: Double , north: Double ) BoundingBox [common] fun BoundingBox (coordinates: List < Double >) BoundingBox [common] fun BoundingBox (west: Double , south: Double , minAltitude: Double , east: Double , north: Double , maxAltitude: Double ) BoundingBox [common] fun BoundingBox (southwest: Position , northeast: Position ) BoundingBox [common] fun BoundingBox (coordinates: DoubleArray ) Functions Name Summary component1 [common] Content operator fun component1 (): Position component2 [common] Content operator fun component2 (): Position equals [common] Content open operator override fun equals (other: Any ?): Boolean hashCode [common] Content open override fun hashCode (): Int json [common] Content fun json (): String toString [common] Content open override fun toString (): String Properties Name Summary coordinates [common] val coordinates : DoubleArray The GeoJSON bounding box coordinate array northeast [common] val northeast : Position The northeastern corner of the BoundingBox southwest [common] val southwest : Position The southwestern corner of the BoundingBox Extensions Name Summary hasAltitude [common] Content val BoundingBox . hasAltitude : Boolean","title":"Index"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-bounding-box/#boundingbox","text":"[common] class BoundingBox ( coordinates : DoubleArray ) Represents an area bounded by a northeast and southwest . A GeoJSON object MAY have a member named \"bbox\" to include information on the coordinate range for its Geometries, Features, or FeatureCollections. When serialized, a BoundingBox is represented as an array of length 2*n where n is the number of dimensions represented in the contained geometries, with all axes of the most southwesterly point followed by all axes of the northeasterly point. The axes order of a BoundingBox follow the axes order of geometries. For the BoundingBox to be serialized in 3D form, both Positions must have a defined altitude.","title":"BoundingBox"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-bounding-box/#see-also","text":"common https://tools.ietf.org/html/rfc7946#section-5","title":"See also"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-bounding-box/#constructors","text":"BoundingBox [common] fun BoundingBox (west: Double , south: Double , east: Double , north: Double ) BoundingBox [common] fun BoundingBox (coordinates: List < Double >) BoundingBox [common] fun BoundingBox (west: Double , south: Double , minAltitude: Double , east: Double , north: Double , maxAltitude: Double ) BoundingBox [common] fun BoundingBox (southwest: Position , northeast: Position ) BoundingBox [common] fun BoundingBox (coordinates: DoubleArray )","title":"Constructors"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-bounding-box/#functions","text":"Name Summary component1 [common] Content operator fun component1 (): Position component2 [common] Content operator fun component2 (): Position equals [common] Content open operator override fun equals (other: Any ?): Boolean hashCode [common] Content open override fun hashCode (): Int json [common] Content fun json (): String toString [common] Content open override fun toString (): String","title":"Functions"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-bounding-box/#properties","text":"Name Summary coordinates [common] val coordinates : DoubleArray The GeoJSON bounding box coordinate array northeast [common] val northeast : Position The northeastern corner of the BoundingBox southwest [common] val southwest : Position The southwestern corner of the BoundingBox","title":"Properties"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-bounding-box/#extensions","text":"Name Summary hasAltitude [common] Content val BoundingBox . hasAltitude : Boolean","title":"Extensions"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-bounding-box/-bounding-box/","text":"// geojson / io.github.dellisd.spatialk.geojson / BoundingBox / BoundingBox BoundingBox [common] Content fun BoundingBox (west: Double , south: Double , east: Double , north: Double ) fun BoundingBox (coordinates: List < Double >) fun BoundingBox (west: Double , south: Double , minAltitude: Double , east: Double , north: Double , maxAltitude: Double ) fun BoundingBox (southwest: Position , northeast: Position ) fun BoundingBox (coordinates: DoubleArray )","title":" bounding box"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-bounding-box/-bounding-box/#boundingbox","text":"[common] Content fun BoundingBox (west: Double , south: Double , east: Double , north: Double ) fun BoundingBox (coordinates: List < Double >) fun BoundingBox (west: Double , south: Double , minAltitude: Double , east: Double , north: Double , maxAltitude: Double ) fun BoundingBox (southwest: Position , northeast: Position ) fun BoundingBox (coordinates: DoubleArray )","title":"BoundingBox"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-bounding-box/component1/","text":"// geojson / io.github.dellisd.spatialk.geojson / BoundingBox / component1 component1 [common] Content operator fun component1 (): Position","title":"Component1"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-bounding-box/component1/#component1","text":"[common] Content operator fun component1 (): Position","title":"component1"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-bounding-box/component2/","text":"// geojson / io.github.dellisd.spatialk.geojson / BoundingBox / component2 component2 [common] Content operator fun component2 (): Position","title":"Component2"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-bounding-box/component2/#component2","text":"[common] Content operator fun component2 (): Position","title":"component2"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-bounding-box/coordinates/","text":"// geojson / io.github.dellisd.spatialk.geojson / BoundingBox / coordinates coordinates [common] Content val coordinates : DoubleArray","title":"Coordinates"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-bounding-box/coordinates/#coordinates","text":"[common] Content val coordinates : DoubleArray","title":"coordinates"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-bounding-box/equals/","text":"// geojson / io.github.dellisd.spatialk.geojson / BoundingBox / equals equals [common] Content open operator override fun equals (other: Any ?): Boolean","title":"Equals"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-bounding-box/equals/#equals","text":"[common] Content open operator override fun equals (other: Any ?): Boolean","title":"equals"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-bounding-box/hash-code/","text":"// geojson / io.github.dellisd.spatialk.geojson / BoundingBox / hashCode hashCode [common] Content open override fun hashCode (): Int","title":"Hash code"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-bounding-box/hash-code/#hashcode","text":"[common] Content open override fun hashCode (): Int","title":"hashCode"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-bounding-box/json/","text":"// geojson / io.github.dellisd.spatialk.geojson / BoundingBox / json json [common] Content fun json (): String","title":"Json"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-bounding-box/json/#json","text":"[common] Content fun json (): String","title":"json"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-bounding-box/northeast/","text":"// geojson / io.github.dellisd.spatialk.geojson / BoundingBox / northeast northeast [common] Content val northeast : Position","title":"Northeast"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-bounding-box/northeast/#northeast","text":"[common] Content val northeast : Position","title":"northeast"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-bounding-box/southwest/","text":"// geojson / io.github.dellisd.spatialk.geojson / BoundingBox / southwest southwest [common] Content val southwest : Position","title":"Southwest"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-bounding-box/southwest/#southwest","text":"[common] Content val southwest : Position","title":"southwest"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-bounding-box/to-string/","text":"// geojson / io.github.dellisd.spatialk.geojson / BoundingBox / toString toString [common] Content open override fun toString (): String","title":"To string"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-bounding-box/to-string/#tostring","text":"[common] Content open override fun toString (): String","title":"toString"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-experimental-geo-json-api/","text":"// geojson / io.github.dellisd.spatialk.geojson / ExperimentalGeoJsonApi ExperimentalGeoJsonApi [common] @ Target (allowedTargets = [ AnnotationTarget.CLASS , AnnotationTarget.FUNCTION ]) annotation class ExperimentalGeoJsonApi","title":"Index"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-experimental-geo-json-api/#experimentalgeojsonapi","text":"[common] @ Target (allowedTargets = [ AnnotationTarget.CLASS , AnnotationTarget.FUNCTION ]) annotation class ExperimentalGeoJsonApi","title":"ExperimentalGeoJsonApi"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-experimental-geo-json-api/-experimental-geo-json-api/","text":"// geojson / io.github.dellisd.spatialk.geojson / ExperimentalGeoJsonApi / ExperimentalGeoJsonApi ExperimentalGeoJsonApi [common] Content fun ExperimentalGeoJsonApi ()","title":" experimental geo json api"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-experimental-geo-json-api/-experimental-geo-json-api/#experimentalgeojsonapi","text":"[common] Content fun ExperimentalGeoJsonApi ()","title":"ExperimentalGeoJsonApi"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature/","text":"// geojson / io.github.dellisd.spatialk.geojson / Feature Feature [common] class Feature ( geometry : Geometry ?, properties : Map < String , JsonElement>, id : String ?, bbox : BoundingBox ?) : GeoJson A feature object represents a spatially bounded thing. See also common https://tools.ietf.org/html/rfc7946#section-3.2 Constructors Feature [common] fun Feature (geometry: Geometry ?, properties: Map < String , JsonElement> = emptyMap(), id: String ? = null, bbox: BoundingBox ? = null) Types Name Summary Companion [common] Content object Companion Functions Name Summary component1 [common] Content operator fun component1 (): Geometry ? component2 [common] Content operator fun component2 (): Map < String , JsonElement> component3 [common] Content operator fun component3 (): String ? component4 [common] Content operator fun component4 (): BoundingBox ? copy [common] Content fun copy (geometry: Geometry ? = this.geometry, properties: Map < String , JsonElement> = this.properties, id: String ? = this.id, bbox: BoundingBox ? = this.bbox): Feature equals [common] Content open operator override fun equals (other: Any ?): Boolean getBooleanProperty [common] Content fun getBooleanProperty (key: String ): Boolean ? getJsonProperty [common] Content fun getJsonProperty (key: String ): JsonElement? getNumberProperty [common] Content fun getNumberProperty (key: String ): Number ? getProperty [common] Content @ JvmName (name = getPropertyCast) inline fun < T > getProperty (key: String ): T ? More info Gets the value of the property with the given key . getStringProperty [common] Content fun getStringProperty (key: String ): String ? hashCode [common] Content open override fun hashCode (): Int json [common] Content open override fun json (): String More info Gets a JSON representation of this object. removeProperty [common] Content fun removeProperty (key: String ): Any ? setBooleanProperty [common] Content fun setBooleanProperty (key: String , value: Boolean ?) setJsonProperty [common] Content fun setJsonProperty (key: String , value: JsonElement) setNumberProperty [common] Content fun setNumberProperty (key: String , value: Number ?) setStringProperty [common] Content fun setStringProperty (key: String , value: String ?) toString [common] Content open override fun toString (): String Properties Name Summary bbox [common] open override val bbox : BoundingBox ? = nullAn optional bounding box used to represent the limits of the object's geometry. geometry [common] val geometry : Geometry ?A Geometry object contained within the feature. id [common] val id : String ? = nullAn optionally included string that commonly identifies this feature. properties [common] val properties : Map < String , JsonElement>Additional properties about this feature.","title":"Index"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature/#feature","text":"[common] class Feature ( geometry : Geometry ?, properties : Map < String , JsonElement>, id : String ?, bbox : BoundingBox ?) : GeoJson A feature object represents a spatially bounded thing.","title":"Feature"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature/#see-also","text":"common https://tools.ietf.org/html/rfc7946#section-3.2","title":"See also"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature/#constructors","text":"Feature [common] fun Feature (geometry: Geometry ?, properties: Map < String , JsonElement> = emptyMap(), id: String ? = null, bbox: BoundingBox ? = null)","title":"Constructors"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature/#types","text":"Name Summary Companion [common] Content object Companion","title":"Types"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature/#functions","text":"Name Summary component1 [common] Content operator fun component1 (): Geometry ? component2 [common] Content operator fun component2 (): Map < String , JsonElement> component3 [common] Content operator fun component3 (): String ? component4 [common] Content operator fun component4 (): BoundingBox ? copy [common] Content fun copy (geometry: Geometry ? = this.geometry, properties: Map < String , JsonElement> = this.properties, id: String ? = this.id, bbox: BoundingBox ? = this.bbox): Feature equals [common] Content open operator override fun equals (other: Any ?): Boolean getBooleanProperty [common] Content fun getBooleanProperty (key: String ): Boolean ? getJsonProperty [common] Content fun getJsonProperty (key: String ): JsonElement? getNumberProperty [common] Content fun getNumberProperty (key: String ): Number ? getProperty [common] Content @ JvmName (name = getPropertyCast) inline fun < T > getProperty (key: String ): T ? More info Gets the value of the property with the given key . getStringProperty [common] Content fun getStringProperty (key: String ): String ? hashCode [common] Content open override fun hashCode (): Int json [common] Content open override fun json (): String More info Gets a JSON representation of this object. removeProperty [common] Content fun removeProperty (key: String ): Any ? setBooleanProperty [common] Content fun setBooleanProperty (key: String , value: Boolean ?) setJsonProperty [common] Content fun setJsonProperty (key: String , value: JsonElement) setNumberProperty [common] Content fun setNumberProperty (key: String , value: Number ?) setStringProperty [common] Content fun setStringProperty (key: String , value: String ?) toString [common] Content open override fun toString (): String","title":"Functions"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature/#properties","text":"Name Summary bbox [common] open override val bbox : BoundingBox ? = nullAn optional bounding box used to represent the limits of the object's geometry. geometry [common] val geometry : Geometry ?A Geometry object contained within the feature. id [common] val id : String ? = nullAn optionally included string that commonly identifies this feature. properties [common] val properties : Map < String , JsonElement>Additional properties about this feature.","title":"Properties"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature/-feature/","text":"// geojson / io.github.dellisd.spatialk.geojson / Feature / Feature Feature [common] Content fun Feature (geometry: Geometry ?, properties: Map < String , JsonElement> = emptyMap(), id: String ? = null, bbox: BoundingBox ? = null)","title":" feature"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature/-feature/#feature","text":"[common] Content fun Feature (geometry: Geometry ?, properties: Map < String , JsonElement> = emptyMap(), id: String ? = null, bbox: BoundingBox ? = null)","title":"Feature"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature/bbox/","text":"// geojson / io.github.dellisd.spatialk.geojson / Feature / bbox bbox [common] Content open override val bbox : BoundingBox ? = null","title":"Bbox"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature/bbox/#bbox","text":"[common] Content open override val bbox : BoundingBox ? = null","title":"bbox"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature/component1/","text":"// geojson / io.github.dellisd.spatialk.geojson / Feature / component1 component1 [common] Content operator fun component1 (): Geometry ?","title":"Component1"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature/component1/#component1","text":"[common] Content operator fun component1 (): Geometry ?","title":"component1"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature/component2/","text":"// geojson / io.github.dellisd.spatialk.geojson / Feature / component2 component2 [common] Content operator fun component2 (): Map < String , JsonElement>","title":"Component2"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature/component2/#component2","text":"[common] Content operator fun component2 (): Map < String , JsonElement>","title":"component2"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature/component3/","text":"// geojson / io.github.dellisd.spatialk.geojson / Feature / component3 component3 [common] Content operator fun component3 (): String ?","title":"Component3"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature/component3/#component3","text":"[common] Content operator fun component3 (): String ?","title":"component3"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature/component4/","text":"// geojson / io.github.dellisd.spatialk.geojson / Feature / component4 component4 [common] Content operator fun component4 (): BoundingBox ?","title":"Component4"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature/component4/#component4","text":"[common] Content operator fun component4 (): BoundingBox ?","title":"component4"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature/copy/","text":"// geojson / io.github.dellisd.spatialk.geojson / Feature / copy copy [common] Content fun copy (geometry: Geometry ? = this.geometry, properties: Map < String , JsonElement> = this.properties, id: String ? = this.id, bbox: BoundingBox ? = this.bbox): Feature","title":"Copy"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature/copy/#copy","text":"[common] Content fun copy (geometry: Geometry ? = this.geometry, properties: Map < String , JsonElement> = this.properties, id: String ? = this.id, bbox: BoundingBox ? = this.bbox): Feature","title":"copy"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature/equals/","text":"// geojson / io.github.dellisd.spatialk.geojson / Feature / equals equals [common] Content open operator override fun equals (other: Any ?): Boolean","title":"Equals"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature/equals/#equals","text":"[common] Content open operator override fun equals (other: Any ?): Boolean","title":"equals"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature/geometry/","text":"// geojson / io.github.dellisd.spatialk.geojson / Feature / geometry geometry [common] Content val geometry : Geometry ?","title":"Geometry"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature/geometry/#geometry","text":"[common] Content val geometry : Geometry ?","title":"geometry"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature/get-boolean-property/","text":"// geojson / io.github.dellisd.spatialk.geojson / Feature / getBooleanProperty getBooleanProperty [common] Content fun getBooleanProperty (key: String ): Boolean ?","title":"Get boolean property"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature/get-boolean-property/#getbooleanproperty","text":"[common] Content fun getBooleanProperty (key: String ): Boolean ?","title":"getBooleanProperty"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature/get-json-property/","text":"// geojson / io.github.dellisd.spatialk.geojson / Feature / getJsonProperty getJsonProperty [common] Content fun getJsonProperty (key: String ): JsonElement?","title":"Get json property"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature/get-json-property/#getjsonproperty","text":"[common] Content fun getJsonProperty (key: String ): JsonElement?","title":"getJsonProperty"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature/get-number-property/","text":"// geojson / io.github.dellisd.spatialk.geojson / Feature / getNumberProperty getNumberProperty [common] Content fun getNumberProperty (key: String ): Number ?","title":"Get number property"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature/get-number-property/#getnumberproperty","text":"[common] Content fun getNumberProperty (key: String ): Number ?","title":"getNumberProperty"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature/get-property/","text":"// geojson / io.github.dellisd.spatialk.geojson / Feature / getProperty getProperty [common] Content @ JvmName (name = getPropertyCast) inline fun < T > getProperty (key: String ): T ? More info Gets the value of the property with the given key . Return The value of the property cast to T ?, or null if the key had no value. Parameters common key The string key for the property","title":"Get property"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature/get-property/#getproperty","text":"[common] Content @ JvmName (name = getPropertyCast) inline fun < T > getProperty (key: String ): T ? More info Gets the value of the property with the given key .","title":"getProperty"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature/get-property/#return","text":"The value of the property cast to T ?, or null if the key had no value.","title":"Return"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature/get-property/#parameters","text":"common key The string key for the property","title":"Parameters"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature/get-string-property/","text":"// geojson / io.github.dellisd.spatialk.geojson / Feature / getStringProperty getStringProperty [common] Content fun getStringProperty (key: String ): String ?","title":"Get string property"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature/get-string-property/#getstringproperty","text":"[common] Content fun getStringProperty (key: String ): String ?","title":"getStringProperty"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature/hash-code/","text":"// geojson / io.github.dellisd.spatialk.geojson / Feature / hashCode hashCode [common] Content open override fun hashCode (): Int","title":"Hash code"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature/hash-code/#hashcode","text":"[common] Content open override fun hashCode (): Int","title":"hashCode"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature/id/","text":"// geojson / io.github.dellisd.spatialk.geojson / Feature / id id [common] Content val id : String ? = null","title":"Id"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature/id/#id","text":"[common] Content val id : String ? = null","title":"id"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature/json/","text":"// geojson / io.github.dellisd.spatialk.geojson / Feature / json json [common] Content open override fun json (): String More info Gets a JSON representation of this object. Return JSON representation","title":"Json"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature/json/#json","text":"[common] Content open override fun json (): String More info Gets a JSON representation of this object.","title":"json"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature/json/#return","text":"JSON representation","title":"Return"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature/properties/","text":"// geojson / io.github.dellisd.spatialk.geojson / Feature / properties properties [common] Content val properties : Map < String , JsonElement>","title":"Properties"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature/properties/#properties","text":"[common] Content val properties : Map < String , JsonElement>","title":"properties"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature/remove-property/","text":"// geojson / io.github.dellisd.spatialk.geojson / Feature / removeProperty removeProperty [common] Content fun removeProperty (key: String ): Any ?","title":"Remove property"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature/remove-property/#removeproperty","text":"[common] Content fun removeProperty (key: String ): Any ?","title":"removeProperty"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature/set-boolean-property/","text":"// geojson / io.github.dellisd.spatialk.geojson / Feature / setBooleanProperty setBooleanProperty [common] Content fun setBooleanProperty (key: String , value: Boolean ?)","title":"Set boolean property"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature/set-boolean-property/#setbooleanproperty","text":"[common] Content fun setBooleanProperty (key: String , value: Boolean ?)","title":"setBooleanProperty"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature/set-json-property/","text":"// geojson / io.github.dellisd.spatialk.geojson / Feature / setJsonProperty setJsonProperty [common] Content fun setJsonProperty (key: String , value: JsonElement)","title":"Set json property"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature/set-json-property/#setjsonproperty","text":"[common] Content fun setJsonProperty (key: String , value: JsonElement)","title":"setJsonProperty"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature/set-number-property/","text":"// geojson / io.github.dellisd.spatialk.geojson / Feature / setNumberProperty setNumberProperty [common] Content fun setNumberProperty (key: String , value: Number ?)","title":"Set number property"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature/set-number-property/#setnumberproperty","text":"[common] Content fun setNumberProperty (key: String , value: Number ?)","title":"setNumberProperty"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature/set-string-property/","text":"// geojson / io.github.dellisd.spatialk.geojson / Feature / setStringProperty setStringProperty [common] Content fun setStringProperty (key: String , value: String ?)","title":"Set string property"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature/set-string-property/#setstringproperty","text":"[common] Content fun setStringProperty (key: String , value: String ?)","title":"setStringProperty"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature/to-string/","text":"// geojson / io.github.dellisd.spatialk.geojson / Feature / toString toString [common] Content open override fun toString (): String","title":"To string"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature/to-string/#tostring","text":"[common] Content open override fun toString (): String","title":"toString"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature/-companion/","text":"// geojson / io.github.dellisd.spatialk.geojson / Feature / Companion Companion [common] object Companion Functions Name Summary fromJson [common] Content @ JvmStatic () fun fromJson (json: String ): Feature @ JvmStatic () fun fromJson (json: JsonObject): Feature fromJsonOrNull [common] Content @ JvmStatic () fun fromJsonOrNull (json: String ): Feature ?","title":"Index"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature/-companion/#companion","text":"[common] object Companion","title":"Companion"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature/-companion/#functions","text":"Name Summary fromJson [common] Content @ JvmStatic () fun fromJson (json: String ): Feature @ JvmStatic () fun fromJson (json: JsonObject): Feature fromJsonOrNull [common] Content @ JvmStatic () fun fromJsonOrNull (json: String ): Feature ?","title":"Functions"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature/-companion/from-json-or-null/","text":"// geojson / io.github.dellisd.spatialk.geojson / Feature / Companion / fromJsonOrNull fromJsonOrNull [common] Content @ JvmStatic () fun fromJsonOrNull (json: String ): Feature ?","title":"From json or null"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature/-companion/from-json-or-null/#fromjsonornull","text":"[common] Content @ JvmStatic () fun fromJsonOrNull (json: String ): Feature ?","title":"fromJsonOrNull"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature/-companion/from-json/","text":"// geojson / io.github.dellisd.spatialk.geojson / Feature / Companion / fromJson fromJson [common] Content @ JvmStatic () fun fromJson (json: String ): Feature @ JvmStatic () fun fromJson (json: JsonObject): Feature","title":"From json"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature/-companion/from-json/#fromjson","text":"[common] Content @ JvmStatic () fun fromJson (json: String ): Feature @ JvmStatic () fun fromJson (json: JsonObject): Feature","title":"fromJson"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature-collection/","text":"// geojson / io.github.dellisd.spatialk.geojson / FeatureCollection FeatureCollection [common] class FeatureCollection ( features : List < Feature >, bbox : BoundingBox ?) : Collection < Feature > , GeoJson A FeatureCollection object is a collection of Feature objects. This class implements the Collection interface and can be used as a Collection directly. The list of features contained in this collection are also accessible through the features property. See also common https://tools.ietf.org/html/rfc7946#section-3.3 Constructors FeatureCollection [common] fun FeatureCollection (vararg features: Feature , bbox: BoundingBox ? = null) FeatureCollection [common] fun FeatureCollection (features: List < Feature > = emptyList(), bbox: BoundingBox ? = null) Types Name Summary Companion [common] Content object Companion Functions Name Summary component1 [common] Content operator fun component1 (): List < Feature > component2 [common] Content operator fun component2 (): BoundingBox ? contains [common] Content open operator override fun contains (element: Feature ): Boolean containsAll [common] Content open override fun containsAll (elements: Collection < Feature >): Boolean equals [common] Content open operator override fun equals (other: Any ?): Boolean hashCode [common] Content open override fun hashCode (): Int isEmpty [common] Content open override fun isEmpty (): Boolean iterator [common] Content open operator override fun iterator (): Iterator < Feature > json [common] Content open override fun json (): String More info Gets a JSON representation of this object. toString [common] Content open override fun toString (): String Properties Name Summary bbox [common] open override val bbox : BoundingBox ? = nullAn optional bounding box used to represent the limits of the object's geometry. features [common] val features : List < Feature >The collection of Feature objects stored in this collection size [common] open override val size : Int","title":"Index"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature-collection/#featurecollection","text":"[common] class FeatureCollection ( features : List < Feature >, bbox : BoundingBox ?) : Collection < Feature > , GeoJson A FeatureCollection object is a collection of Feature objects. This class implements the Collection interface and can be used as a Collection directly. The list of features contained in this collection are also accessible through the features property.","title":"FeatureCollection"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature-collection/#see-also","text":"common https://tools.ietf.org/html/rfc7946#section-3.3","title":"See also"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature-collection/#constructors","text":"FeatureCollection [common] fun FeatureCollection (vararg features: Feature , bbox: BoundingBox ? = null) FeatureCollection [common] fun FeatureCollection (features: List < Feature > = emptyList(), bbox: BoundingBox ? = null)","title":"Constructors"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature-collection/#types","text":"Name Summary Companion [common] Content object Companion","title":"Types"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature-collection/#functions","text":"Name Summary component1 [common] Content operator fun component1 (): List < Feature > component2 [common] Content operator fun component2 (): BoundingBox ? contains [common] Content open operator override fun contains (element: Feature ): Boolean containsAll [common] Content open override fun containsAll (elements: Collection < Feature >): Boolean equals [common] Content open operator override fun equals (other: Any ?): Boolean hashCode [common] Content open override fun hashCode (): Int isEmpty [common] Content open override fun isEmpty (): Boolean iterator [common] Content open operator override fun iterator (): Iterator < Feature > json [common] Content open override fun json (): String More info Gets a JSON representation of this object. toString [common] Content open override fun toString (): String","title":"Functions"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature-collection/#properties","text":"Name Summary bbox [common] open override val bbox : BoundingBox ? = nullAn optional bounding box used to represent the limits of the object's geometry. features [common] val features : List < Feature >The collection of Feature objects stored in this collection size [common] open override val size : Int","title":"Properties"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature-collection/-feature-collection/","text":"// geojson / io.github.dellisd.spatialk.geojson / FeatureCollection / FeatureCollection FeatureCollection [common] Content fun FeatureCollection (vararg features: Feature , bbox: BoundingBox ? = null) fun FeatureCollection (features: List < Feature > = emptyList(), bbox: BoundingBox ? = null)","title":" feature collection"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature-collection/-feature-collection/#featurecollection","text":"[common] Content fun FeatureCollection (vararg features: Feature , bbox: BoundingBox ? = null) fun FeatureCollection (features: List < Feature > = emptyList(), bbox: BoundingBox ? = null)","title":"FeatureCollection"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature-collection/bbox/","text":"// geojson / io.github.dellisd.spatialk.geojson / FeatureCollection / bbox bbox [common] Content open override val bbox : BoundingBox ? = null","title":"Bbox"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature-collection/bbox/#bbox","text":"[common] Content open override val bbox : BoundingBox ? = null","title":"bbox"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature-collection/component1/","text":"// geojson / io.github.dellisd.spatialk.geojson / FeatureCollection / component1 component1 [common] Content operator fun component1 (): List < Feature >","title":"Component1"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature-collection/component1/#component1","text":"[common] Content operator fun component1 (): List < Feature >","title":"component1"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature-collection/component2/","text":"// geojson / io.github.dellisd.spatialk.geojson / FeatureCollection / component2 component2 [common] Content operator fun component2 (): BoundingBox ?","title":"Component2"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature-collection/component2/#component2","text":"[common] Content operator fun component2 (): BoundingBox ?","title":"component2"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature-collection/equals/","text":"// geojson / io.github.dellisd.spatialk.geojson / FeatureCollection / equals equals [common] Content open operator override fun equals (other: Any ?): Boolean","title":"Equals"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature-collection/equals/#equals","text":"[common] Content open operator override fun equals (other: Any ?): Boolean","title":"equals"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature-collection/features/","text":"// geojson / io.github.dellisd.spatialk.geojson / FeatureCollection / features features [common] Content val features : List < Feature >","title":"Features"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature-collection/features/#features","text":"[common] Content val features : List < Feature >","title":"features"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature-collection/hash-code/","text":"// geojson / io.github.dellisd.spatialk.geojson / FeatureCollection / hashCode hashCode [common] Content open override fun hashCode (): Int","title":"Hash code"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature-collection/hash-code/#hashcode","text":"[common] Content open override fun hashCode (): Int","title":"hashCode"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature-collection/json/","text":"// geojson / io.github.dellisd.spatialk.geojson / FeatureCollection / json json [common] Content open override fun json (): String More info Gets a JSON representation of this object. Return JSON representation","title":"Json"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature-collection/json/#json","text":"[common] Content open override fun json (): String More info Gets a JSON representation of this object.","title":"json"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature-collection/json/#return","text":"JSON representation","title":"Return"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature-collection/to-string/","text":"// geojson / io.github.dellisd.spatialk.geojson / FeatureCollection / toString toString [common] Content open override fun toString (): String","title":"To string"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature-collection/to-string/#tostring","text":"[common] Content open override fun toString (): String","title":"toString"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature-collection/-companion/","text":"// geojson / io.github.dellisd.spatialk.geojson / FeatureCollection / Companion Companion [common] object Companion Functions Name Summary fromJson [common] Content @ JvmStatic () fun fromJson (json: String ): FeatureCollection @ JvmStatic () fun fromJson (json: JsonObject): FeatureCollection fromJsonOrNull [common] Content @ JvmStatic () fun fromJsonOrNull (json: String ): FeatureCollection ?","title":"Index"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature-collection/-companion/#companion","text":"[common] object Companion","title":"Companion"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature-collection/-companion/#functions","text":"Name Summary fromJson [common] Content @ JvmStatic () fun fromJson (json: String ): FeatureCollection @ JvmStatic () fun fromJson (json: JsonObject): FeatureCollection fromJsonOrNull [common] Content @ JvmStatic () fun fromJsonOrNull (json: String ): FeatureCollection ?","title":"Functions"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature-collection/-companion/from-json-or-null/","text":"// geojson / io.github.dellisd.spatialk.geojson / FeatureCollection / Companion / fromJsonOrNull fromJsonOrNull [common] Content @ JvmStatic () fun fromJsonOrNull (json: String ): FeatureCollection ?","title":"From json or null"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature-collection/-companion/from-json-or-null/#fromjsonornull","text":"[common] Content @ JvmStatic () fun fromJsonOrNull (json: String ): FeatureCollection ?","title":"fromJsonOrNull"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature-collection/-companion/from-json/","text":"// geojson / io.github.dellisd.spatialk.geojson / FeatureCollection / Companion / fromJson fromJson [common] Content @ JvmStatic () fun fromJson (json: String ): FeatureCollection @ JvmStatic () fun fromJson (json: JsonObject): FeatureCollection","title":"From json"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-feature-collection/-companion/from-json/#fromjson","text":"[common] Content @ JvmStatic () fun fromJson (json: String ): FeatureCollection @ JvmStatic () fun fromJson (json: JsonObject): FeatureCollection","title":"fromJson"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-geo-json/","text":"// geojson / io.github.dellisd.spatialk.geojson / GeoJson GeoJson [common] interface GeoJson A GeoJSON object represents a Geometry , Feature , or collection of Features . Functions Name Summary json [common] Content abstract fun json (): String More info Gets a JSON representation of this object. Properties Name Summary bbox [common] abstract val bbox : BoundingBox ?An optional bounding box used to represent the limits of the object's geometry. Inheritors Name Feature FeatureCollection Geometry","title":"Index"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-geo-json/#geojson","text":"[common] interface GeoJson A GeoJSON object represents a Geometry , Feature , or collection of Features .","title":"GeoJson"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-geo-json/#functions","text":"Name Summary json [common] Content abstract fun json (): String More info Gets a JSON representation of this object.","title":"Functions"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-geo-json/#properties","text":"Name Summary bbox [common] abstract val bbox : BoundingBox ?An optional bounding box used to represent the limits of the object's geometry.","title":"Properties"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-geo-json/#inheritors","text":"Name Feature FeatureCollection Geometry","title":"Inheritors"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-geo-json/bbox/","text":"// geojson / io.github.dellisd.spatialk.geojson / GeoJson / bbox bbox [common] Content abstract val bbox : BoundingBox ?","title":"Bbox"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-geo-json/bbox/#bbox","text":"[common] Content abstract val bbox : BoundingBox ?","title":"bbox"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-geo-json/json/","text":"// geojson / io.github.dellisd.spatialk.geojson / GeoJson / json json [common] Content abstract fun json (): String More info Gets a JSON representation of this object. Return JSON representation","title":"Json"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-geo-json/json/#json","text":"[common] Content abstract fun json (): String More info Gets a JSON representation of this object.","title":"json"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-geo-json/json/#return","text":"JSON representation","title":"Return"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-geometry/","text":"// geojson / io.github.dellisd.spatialk.geojson / Geometry Geometry [common] sealed class Geometry : GeoJson Types Name Summary Companion [common] Content object Companion Functions Name Summary json [common] Content abstract fun json (): String More info Gets a JSON representation of this object. toString [common] Content open override fun toString (): String Properties Name Summary bbox [common] abstract override val bbox : BoundingBox ?An optional bounding box used to represent the limits of the object's geometry. Inheritors Name GeometryCollection LineString MultiLineString MultiPoint MultiPolygon Point Polygon","title":"Index"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-geometry/#geometry","text":"[common] sealed class Geometry : GeoJson","title":"Geometry"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-geometry/#types","text":"Name Summary Companion [common] Content object Companion","title":"Types"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-geometry/#functions","text":"Name Summary json [common] Content abstract fun json (): String More info Gets a JSON representation of this object. toString [common] Content open override fun toString (): String","title":"Functions"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-geometry/#properties","text":"Name Summary bbox [common] abstract override val bbox : BoundingBox ?An optional bounding box used to represent the limits of the object's geometry.","title":"Properties"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-geometry/#inheritors","text":"Name GeometryCollection LineString MultiLineString MultiPoint MultiPolygon Point Polygon","title":"Inheritors"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-geometry/bbox/","text":"// geojson / io.github.dellisd.spatialk.geojson / Geometry / bbox bbox [common] Content abstract override val bbox : BoundingBox ?","title":"Bbox"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-geometry/bbox/#bbox","text":"[common] Content abstract override val bbox : BoundingBox ?","title":"bbox"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-geometry/to-string/","text":"// geojson / io.github.dellisd.spatialk.geojson / Geometry / toString toString [common] Content open override fun toString (): String","title":"To string"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-geometry/to-string/#tostring","text":"[common] Content open override fun toString (): String","title":"toString"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-geometry/-companion/","text":"// geojson / io.github.dellisd.spatialk.geojson / Geometry / Companion Companion [common] object Companion Functions Name Summary fromJson [common] Content @ JvmStatic () fun fromJson (json: String ): Geometry @ JvmStatic () fun fromJson (json: JsonObject): Geometry fromJsonOrNull [common] Content @ JvmStatic () fun fromJsonOrNull (json: String ): Geometry ?","title":"Index"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-geometry/-companion/#companion","text":"[common] object Companion","title":"Companion"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-geometry/-companion/#functions","text":"Name Summary fromJson [common] Content @ JvmStatic () fun fromJson (json: String ): Geometry @ JvmStatic () fun fromJson (json: JsonObject): Geometry fromJsonOrNull [common] Content @ JvmStatic () fun fromJsonOrNull (json: String ): Geometry ?","title":"Functions"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-geometry/-companion/from-json-or-null/","text":"// geojson / io.github.dellisd.spatialk.geojson / Geometry / Companion / fromJsonOrNull fromJsonOrNull [common] Content @ JvmStatic () fun fromJsonOrNull (json: String ): Geometry ?","title":"From json or null"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-geometry/-companion/from-json-or-null/#fromjsonornull","text":"[common] Content @ JvmStatic () fun fromJsonOrNull (json: String ): Geometry ?","title":"fromJsonOrNull"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-geometry/-companion/from-json/","text":"// geojson / io.github.dellisd.spatialk.geojson / Geometry / Companion / fromJson fromJson [common] Content @ JvmStatic () fun fromJson (json: String ): Geometry @ JvmStatic () fun fromJson (json: JsonObject): Geometry","title":"From json"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-geometry/-companion/from-json/#fromjson","text":"[common] Content @ JvmStatic () fun fromJson (json: String ): Geometry @ JvmStatic () fun fromJson (json: JsonObject): Geometry","title":"fromJson"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-geometry-collection/","text":"// geojson / io.github.dellisd.spatialk.geojson / GeometryCollection GeometryCollection [common] class GeometryCollection @ JvmOverloads ()constructor( geometries : List < Geometry >, bbox : BoundingBox ?) : Geometry , Collection < Geometry > Constructors GeometryCollection [common] @ JvmOverloads () fun GeometryCollection (vararg geometries: Geometry , bbox: BoundingBox ? = null) Types Name Summary Companion [common] Content object Companion Functions Name Summary contains [common] Content open operator override fun contains (element: Geometry ): Boolean containsAll [common] Content open override fun containsAll (elements: Collection < Geometry >): Boolean equals [common] Content open operator override fun equals (other: Any ?): Boolean hashCode [common] Content open override fun hashCode (): Int isEmpty [common] Content open override fun isEmpty (): Boolean iterator [common] Content open operator override fun iterator (): Iterator < Geometry > json [common] Content open override fun json (): String More info Gets a JSON representation of this object. toString [common] Content open override fun toString (): String Properties Name Summary bbox [common] open override val bbox : BoundingBox ? = nullAn optional bounding box used to represent the limits of the object's geometry. geometries [common] val geometries : List < Geometry > size [common] open override val size : Int","title":"Index"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-geometry-collection/#geometrycollection","text":"[common] class GeometryCollection @ JvmOverloads ()constructor( geometries : List < Geometry >, bbox : BoundingBox ?) : Geometry , Collection < Geometry >","title":"GeometryCollection"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-geometry-collection/#constructors","text":"GeometryCollection [common] @ JvmOverloads () fun GeometryCollection (vararg geometries: Geometry , bbox: BoundingBox ? = null)","title":"Constructors"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-geometry-collection/#types","text":"Name Summary Companion [common] Content object Companion","title":"Types"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-geometry-collection/#functions","text":"Name Summary contains [common] Content open operator override fun contains (element: Geometry ): Boolean containsAll [common] Content open override fun containsAll (elements: Collection < Geometry >): Boolean equals [common] Content open operator override fun equals (other: Any ?): Boolean hashCode [common] Content open override fun hashCode (): Int isEmpty [common] Content open override fun isEmpty (): Boolean iterator [common] Content open operator override fun iterator (): Iterator < Geometry > json [common] Content open override fun json (): String More info Gets a JSON representation of this object. toString [common] Content open override fun toString (): String","title":"Functions"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-geometry-collection/#properties","text":"Name Summary bbox [common] open override val bbox : BoundingBox ? = nullAn optional bounding box used to represent the limits of the object's geometry. geometries [common] val geometries : List < Geometry > size [common] open override val size : Int","title":"Properties"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-geometry-collection/-geometry-collection/","text":"// geojson / io.github.dellisd.spatialk.geojson / GeometryCollection / GeometryCollection GeometryCollection [common] Content @ JvmOverloads () fun GeometryCollection (vararg geometries: Geometry , bbox: BoundingBox ? = null) @ JvmOverloads () fun GeometryCollection (geometries: List < Geometry >, bbox: BoundingBox ? = null)","title":" geometry collection"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-geometry-collection/-geometry-collection/#geometrycollection","text":"[common] Content @ JvmOverloads () fun GeometryCollection (vararg geometries: Geometry , bbox: BoundingBox ? = null) @ JvmOverloads () fun GeometryCollection (geometries: List < Geometry >, bbox: BoundingBox ? = null)","title":"GeometryCollection"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-geometry-collection/bbox/","text":"// geojson / io.github.dellisd.spatialk.geojson / GeometryCollection / bbox bbox [common] Content open override val bbox : BoundingBox ? = null","title":"Bbox"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-geometry-collection/bbox/#bbox","text":"[common] Content open override val bbox : BoundingBox ? = null","title":"bbox"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-geometry-collection/equals/","text":"// geojson / io.github.dellisd.spatialk.geojson / GeometryCollection / equals equals [common] Content open operator override fun equals (other: Any ?): Boolean","title":"Equals"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-geometry-collection/equals/#equals","text":"[common] Content open operator override fun equals (other: Any ?): Boolean","title":"equals"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-geometry-collection/geometries/","text":"// geojson / io.github.dellisd.spatialk.geojson / GeometryCollection / geometries geometries [common] Content val geometries : List < Geometry >","title":"Geometries"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-geometry-collection/geometries/#geometries","text":"[common] Content val geometries : List < Geometry >","title":"geometries"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-geometry-collection/hash-code/","text":"// geojson / io.github.dellisd.spatialk.geojson / GeometryCollection / hashCode hashCode [common] Content open override fun hashCode (): Int","title":"Hash code"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-geometry-collection/hash-code/#hashcode","text":"[common] Content open override fun hashCode (): Int","title":"hashCode"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-geometry-collection/json/","text":"// geojson / io.github.dellisd.spatialk.geojson / GeometryCollection / json json [common] Content open override fun json (): String More info Gets a JSON representation of this object. Return JSON representation","title":"Json"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-geometry-collection/json/#json","text":"[common] Content open override fun json (): String More info Gets a JSON representation of this object.","title":"json"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-geometry-collection/json/#return","text":"JSON representation","title":"Return"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-geometry-collection/-companion/","text":"// geojson / io.github.dellisd.spatialk.geojson / GeometryCollection / Companion Companion [common] object Companion Functions Name Summary fromJson [common] Content @ JvmStatic () fun fromJson (json: String ): GeometryCollection @ JvmStatic () fun fromJson (json: JsonObject): GeometryCollection fromJsonOrNull [common] Content @ JvmStatic () fun fromJsonOrNull (json: String ): GeometryCollection ?","title":"Index"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-geometry-collection/-companion/#companion","text":"[common] object Companion","title":"Companion"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-geometry-collection/-companion/#functions","text":"Name Summary fromJson [common] Content @ JvmStatic () fun fromJson (json: String ): GeometryCollection @ JvmStatic () fun fromJson (json: JsonObject): GeometryCollection fromJsonOrNull [common] Content @ JvmStatic () fun fromJsonOrNull (json: String ): GeometryCollection ?","title":"Functions"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-geometry-collection/-companion/from-json-or-null/","text":"// geojson / io.github.dellisd.spatialk.geojson / GeometryCollection / Companion / fromJsonOrNull fromJsonOrNull [common] Content @ JvmStatic () fun fromJsonOrNull (json: String ): GeometryCollection ?","title":"From json or null"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-geometry-collection/-companion/from-json-or-null/#fromjsonornull","text":"[common] Content @ JvmStatic () fun fromJsonOrNull (json: String ): GeometryCollection ?","title":"fromJsonOrNull"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-geometry-collection/-companion/from-json/","text":"// geojson / io.github.dellisd.spatialk.geojson / GeometryCollection / Companion / fromJson fromJson [common] Content @ JvmStatic () fun fromJson (json: String ): GeometryCollection @ JvmStatic () fun fromJson (json: JsonObject): GeometryCollection","title":"From json"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-geometry-collection/-companion/from-json/#fromjson","text":"[common] Content @ JvmStatic () fun fromJson (json: String ): GeometryCollection @ JvmStatic () fun fromJson (json: JsonObject): GeometryCollection","title":"fromJson"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-line-string/","text":"// geojson / io.github.dellisd.spatialk.geojson / LineString LineString [common] class LineString @ JvmOverloads ()constructor( coordinates : List < Position >, bbox : BoundingBox ?) : Geometry Constructors LineString [common] @ JvmOverloads () fun LineString (vararg coordinates: Position , bbox: BoundingBox ? = null) LineString [common] @ JvmOverloads () fun LineString (coordinates: Array < DoubleArray >, bbox: BoundingBox ? = null) Types Name Summary Companion [common] Content object Companion Functions Name Summary equals [common] Content open operator override fun equals (other: Any ?): Boolean hashCode [common] Content open override fun hashCode (): Int json [common] Content open override fun json (): String More info Gets a JSON representation of this object. toString [common] Content open override fun toString (): String Properties Name Summary bbox [common] open override val bbox : BoundingBox ? = nullAn optional bounding box used to represent the limits of the object's geometry. coordinates [common] val coordinates : List < Position >","title":"Index"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-line-string/#linestring","text":"[common] class LineString @ JvmOverloads ()constructor( coordinates : List < Position >, bbox : BoundingBox ?) : Geometry","title":"LineString"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-line-string/#constructors","text":"LineString [common] @ JvmOverloads () fun LineString (vararg coordinates: Position , bbox: BoundingBox ? = null) LineString [common] @ JvmOverloads () fun LineString (coordinates: Array < DoubleArray >, bbox: BoundingBox ? = null)","title":"Constructors"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-line-string/#types","text":"Name Summary Companion [common] Content object Companion","title":"Types"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-line-string/#functions","text":"Name Summary equals [common] Content open operator override fun equals (other: Any ?): Boolean hashCode [common] Content open override fun hashCode (): Int json [common] Content open override fun json (): String More info Gets a JSON representation of this object. toString [common] Content open override fun toString (): String","title":"Functions"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-line-string/#properties","text":"Name Summary bbox [common] open override val bbox : BoundingBox ? = nullAn optional bounding box used to represent the limits of the object's geometry. coordinates [common] val coordinates : List < Position >","title":"Properties"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-line-string/-line-string/","text":"// geojson / io.github.dellisd.spatialk.geojson / LineString / LineString LineString [common] Content @ JvmOverloads () fun LineString (vararg coordinates: Position , bbox: BoundingBox ? = null) @ JvmOverloads () fun LineString (coordinates: Array < DoubleArray >, bbox: BoundingBox ? = null) @ JvmOverloads () fun LineString (coordinates: List < Position >, bbox: BoundingBox ? = null)","title":" line string"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-line-string/-line-string/#linestring","text":"[common] Content @ JvmOverloads () fun LineString (vararg coordinates: Position , bbox: BoundingBox ? = null) @ JvmOverloads () fun LineString (coordinates: Array < DoubleArray >, bbox: BoundingBox ? = null) @ JvmOverloads () fun LineString (coordinates: List < Position >, bbox: BoundingBox ? = null)","title":"LineString"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-line-string/bbox/","text":"// geojson / io.github.dellisd.spatialk.geojson / LineString / bbox bbox [common] Content open override val bbox : BoundingBox ? = null","title":"Bbox"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-line-string/bbox/#bbox","text":"[common] Content open override val bbox : BoundingBox ? = null","title":"bbox"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-line-string/coordinates/","text":"// geojson / io.github.dellisd.spatialk.geojson / LineString / coordinates coordinates [common] Content val coordinates : List < Position >","title":"Coordinates"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-line-string/coordinates/#coordinates","text":"[common] Content val coordinates : List < Position >","title":"coordinates"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-line-string/equals/","text":"// geojson / io.github.dellisd.spatialk.geojson / LineString / equals equals [common] Content open operator override fun equals (other: Any ?): Boolean","title":"Equals"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-line-string/equals/#equals","text":"[common] Content open operator override fun equals (other: Any ?): Boolean","title":"equals"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-line-string/hash-code/","text":"// geojson / io.github.dellisd.spatialk.geojson / LineString / hashCode hashCode [common] Content open override fun hashCode (): Int","title":"Hash code"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-line-string/hash-code/#hashcode","text":"[common] Content open override fun hashCode (): Int","title":"hashCode"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-line-string/json/","text":"// geojson / io.github.dellisd.spatialk.geojson / LineString / json json [common] Content open override fun json (): String More info Gets a JSON representation of this object. Return JSON representation","title":"Json"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-line-string/json/#json","text":"[common] Content open override fun json (): String More info Gets a JSON representation of this object.","title":"json"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-line-string/json/#return","text":"JSON representation","title":"Return"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-line-string/-companion/","text":"// geojson / io.github.dellisd.spatialk.geojson / LineString / Companion Companion [common] object Companion Functions Name Summary fromJson [common] Content @ JvmStatic () fun fromJson (json: String ): LineString @ JvmStatic () fun fromJson (json: JsonObject): LineString fromJsonOrNull [common] Content @ JvmStatic () fun fromJsonOrNull (json: String ): LineString ?","title":"Index"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-line-string/-companion/#companion","text":"[common] object Companion","title":"Companion"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-line-string/-companion/#functions","text":"Name Summary fromJson [common] Content @ JvmStatic () fun fromJson (json: String ): LineString @ JvmStatic () fun fromJson (json: JsonObject): LineString fromJsonOrNull [common] Content @ JvmStatic () fun fromJsonOrNull (json: String ): LineString ?","title":"Functions"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-line-string/-companion/from-json-or-null/","text":"// geojson / io.github.dellisd.spatialk.geojson / LineString / Companion / fromJsonOrNull fromJsonOrNull [common] Content @ JvmStatic () fun fromJsonOrNull (json: String ): LineString ?","title":"From json or null"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-line-string/-companion/from-json-or-null/#fromjsonornull","text":"[common] Content @ JvmStatic () fun fromJsonOrNull (json: String ): LineString ?","title":"fromJsonOrNull"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-line-string/-companion/from-json/","text":"// geojson / io.github.dellisd.spatialk.geojson / LineString / Companion / fromJson fromJson [common] Content @ JvmStatic () fun fromJson (json: String ): LineString @ JvmStatic () fun fromJson (json: JsonObject): LineString","title":"From json"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-line-string/-companion/from-json/#fromjson","text":"[common] Content @ JvmStatic () fun fromJson (json: String ): LineString @ JvmStatic () fun fromJson (json: JsonObject): LineString","title":"fromJson"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-multi-line-string/","text":"// geojson / io.github.dellisd.spatialk.geojson / MultiLineString MultiLineString [common] class MultiLineString @ JvmOverloads ()constructor( coordinates : List < List < Position >>, bbox : BoundingBox ?) : Geometry Constructors MultiLineString [common] @ JvmOverloads () fun MultiLineString (vararg coordinates: List < Position >, bbox: BoundingBox ? = null) MultiLineString [common] @ JvmOverloads () fun MultiLineString (coordinates: Array < Array < DoubleArray >>, bbox: BoundingBox ? = null) Types Name Summary Companion [common] Content object Companion Functions Name Summary equals [common] Content open operator override fun equals (other: Any ?): Boolean hashCode [common] Content open override fun hashCode (): Int json [common] Content open override fun json (): String More info Gets a JSON representation of this object. toString [common] Content open override fun toString (): String Properties Name Summary bbox [common] open override val bbox : BoundingBox ? = nullAn optional bounding box used to represent the limits of the object's geometry. coordinates [common] val coordinates : List < List < Position >>","title":"Index"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-multi-line-string/#multilinestring","text":"[common] class MultiLineString @ JvmOverloads ()constructor( coordinates : List < List < Position >>, bbox : BoundingBox ?) : Geometry","title":"MultiLineString"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-multi-line-string/#constructors","text":"MultiLineString [common] @ JvmOverloads () fun MultiLineString (vararg coordinates: List < Position >, bbox: BoundingBox ? = null) MultiLineString [common] @ JvmOverloads () fun MultiLineString (coordinates: Array < Array < DoubleArray >>, bbox: BoundingBox ? = null)","title":"Constructors"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-multi-line-string/#types","text":"Name Summary Companion [common] Content object Companion","title":"Types"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-multi-line-string/#functions","text":"Name Summary equals [common] Content open operator override fun equals (other: Any ?): Boolean hashCode [common] Content open override fun hashCode (): Int json [common] Content open override fun json (): String More info Gets a JSON representation of this object. toString [common] Content open override fun toString (): String","title":"Functions"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-multi-line-string/#properties","text":"Name Summary bbox [common] open override val bbox : BoundingBox ? = nullAn optional bounding box used to represent the limits of the object's geometry. coordinates [common] val coordinates : List < List < Position >>","title":"Properties"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-multi-line-string/-multi-line-string/","text":"// geojson / io.github.dellisd.spatialk.geojson / MultiLineString / MultiLineString MultiLineString [common] Content @ JvmOverloads () fun MultiLineString (vararg coordinates: List < Position >, bbox: BoundingBox ? = null) @ JvmOverloads () fun MultiLineString (coordinates: Array < Array < DoubleArray >>, bbox: BoundingBox ? = null) @ JvmOverloads () fun MultiLineString (coordinates: List < List < Position >>, bbox: BoundingBox ? = null)","title":" multi line string"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-multi-line-string/-multi-line-string/#multilinestring","text":"[common] Content @ JvmOverloads () fun MultiLineString (vararg coordinates: List < Position >, bbox: BoundingBox ? = null) @ JvmOverloads () fun MultiLineString (coordinates: Array < Array < DoubleArray >>, bbox: BoundingBox ? = null) @ JvmOverloads () fun MultiLineString (coordinates: List < List < Position >>, bbox: BoundingBox ? = null)","title":"MultiLineString"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-multi-line-string/bbox/","text":"// geojson / io.github.dellisd.spatialk.geojson / MultiLineString / bbox bbox [common] Content open override val bbox : BoundingBox ? = null","title":"Bbox"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-multi-line-string/bbox/#bbox","text":"[common] Content open override val bbox : BoundingBox ? = null","title":"bbox"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-multi-line-string/coordinates/","text":"// geojson / io.github.dellisd.spatialk.geojson / MultiLineString / coordinates coordinates [common] Content val coordinates : List < List < Position >>","title":"Coordinates"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-multi-line-string/coordinates/#coordinates","text":"[common] Content val coordinates : List < List < Position >>","title":"coordinates"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-multi-line-string/equals/","text":"// geojson / io.github.dellisd.spatialk.geojson / MultiLineString / equals equals [common] Content open operator override fun equals (other: Any ?): Boolean","title":"Equals"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-multi-line-string/equals/#equals","text":"[common] Content open operator override fun equals (other: Any ?): Boolean","title":"equals"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-multi-line-string/hash-code/","text":"// geojson / io.github.dellisd.spatialk.geojson / MultiLineString / hashCode hashCode [common] Content open override fun hashCode (): Int","title":"Hash code"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-multi-line-string/hash-code/#hashcode","text":"[common] Content open override fun hashCode (): Int","title":"hashCode"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-multi-line-string/json/","text":"// geojson / io.github.dellisd.spatialk.geojson / MultiLineString / json json [common] Content open override fun json (): String More info Gets a JSON representation of this object. Return JSON representation","title":"Json"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-multi-line-string/json/#json","text":"[common] Content open override fun json (): String More info Gets a JSON representation of this object.","title":"json"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-multi-line-string/json/#return","text":"JSON representation","title":"Return"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-multi-line-string/-companion/","text":"// geojson / io.github.dellisd.spatialk.geojson / MultiLineString / Companion Companion [common] object Companion Functions Name Summary fromJson [common] Content @ JvmStatic () fun fromJson (json: String ): MultiLineString @ JvmStatic () fun fromJson (json: JsonObject): MultiLineString fromJsonOrNull [common] Content @ JvmStatic () fun fromJsonOrNull (json: String ): MultiLineString ?","title":"Index"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-multi-line-string/-companion/#companion","text":"[common] object Companion","title":"Companion"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-multi-line-string/-companion/#functions","text":"Name Summary fromJson [common] Content @ JvmStatic () fun fromJson (json: String ): MultiLineString @ JvmStatic () fun fromJson (json: JsonObject): MultiLineString fromJsonOrNull [common] Content @ JvmStatic () fun fromJsonOrNull (json: String ): MultiLineString ?","title":"Functions"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-multi-line-string/-companion/from-json-or-null/","text":"// geojson / io.github.dellisd.spatialk.geojson / MultiLineString / Companion / fromJsonOrNull fromJsonOrNull [common] Content @ JvmStatic () fun fromJsonOrNull (json: String ): MultiLineString ?","title":"From json or null"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-multi-line-string/-companion/from-json-or-null/#fromjsonornull","text":"[common] Content @ JvmStatic () fun fromJsonOrNull (json: String ): MultiLineString ?","title":"fromJsonOrNull"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-multi-line-string/-companion/from-json/","text":"// geojson / io.github.dellisd.spatialk.geojson / MultiLineString / Companion / fromJson fromJson [common] Content @ JvmStatic () fun fromJson (json: String ): MultiLineString @ JvmStatic () fun fromJson (json: JsonObject): MultiLineString","title":"From json"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-multi-line-string/-companion/from-json/#fromjson","text":"[common] Content @ JvmStatic () fun fromJson (json: String ): MultiLineString @ JvmStatic () fun fromJson (json: JsonObject): MultiLineString","title":"fromJson"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-multi-point/","text":"// geojson / io.github.dellisd.spatialk.geojson / MultiPoint MultiPoint [common] class MultiPoint @ JvmOverloads ()constructor( coordinates : List < Position >, bbox : BoundingBox ?) : Geometry Constructors MultiPoint [common] @ JvmOverloads () fun MultiPoint (vararg coordinates: Position , bbox: BoundingBox ? = null) MultiPoint [common] @ JvmOverloads () fun MultiPoint (coordinates: Array < DoubleArray >, bbox: BoundingBox ? = null) Types Name Summary Companion [common] Content object Companion Functions Name Summary equals [common] Content open operator override fun equals (other: Any ?): Boolean hashCode [common] Content open override fun hashCode (): Int json [common] Content open override fun json (): String More info Gets a JSON representation of this object. toString [common] Content open override fun toString (): String Properties Name Summary bbox [common] open override val bbox : BoundingBox ? = nullAn optional bounding box used to represent the limits of the object's geometry. coordinates [common] val coordinates : List < Position >","title":"Index"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-multi-point/#multipoint","text":"[common] class MultiPoint @ JvmOverloads ()constructor( coordinates : List < Position >, bbox : BoundingBox ?) : Geometry","title":"MultiPoint"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-multi-point/#constructors","text":"MultiPoint [common] @ JvmOverloads () fun MultiPoint (vararg coordinates: Position , bbox: BoundingBox ? = null) MultiPoint [common] @ JvmOverloads () fun MultiPoint (coordinates: Array < DoubleArray >, bbox: BoundingBox ? = null)","title":"Constructors"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-multi-point/#types","text":"Name Summary Companion [common] Content object Companion","title":"Types"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-multi-point/#functions","text":"Name Summary equals [common] Content open operator override fun equals (other: Any ?): Boolean hashCode [common] Content open override fun hashCode (): Int json [common] Content open override fun json (): String More info Gets a JSON representation of this object. toString [common] Content open override fun toString (): String","title":"Functions"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-multi-point/#properties","text":"Name Summary bbox [common] open override val bbox : BoundingBox ? = nullAn optional bounding box used to represent the limits of the object's geometry. coordinates [common] val coordinates : List < Position >","title":"Properties"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-multi-point/-multi-point/","text":"// geojson / io.github.dellisd.spatialk.geojson / MultiPoint / MultiPoint MultiPoint [common] Content @ JvmOverloads () fun MultiPoint (vararg coordinates: Position , bbox: BoundingBox ? = null) @ JvmOverloads () fun MultiPoint (coordinates: Array < DoubleArray >, bbox: BoundingBox ? = null) @ JvmOverloads () fun MultiPoint (coordinates: List < Position >, bbox: BoundingBox ? = null)","title":" multi point"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-multi-point/-multi-point/#multipoint","text":"[common] Content @ JvmOverloads () fun MultiPoint (vararg coordinates: Position , bbox: BoundingBox ? = null) @ JvmOverloads () fun MultiPoint (coordinates: Array < DoubleArray >, bbox: BoundingBox ? = null) @ JvmOverloads () fun MultiPoint (coordinates: List < Position >, bbox: BoundingBox ? = null)","title":"MultiPoint"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-multi-point/bbox/","text":"// geojson / io.github.dellisd.spatialk.geojson / MultiPoint / bbox bbox [common] Content open override val bbox : BoundingBox ? = null","title":"Bbox"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-multi-point/bbox/#bbox","text":"[common] Content open override val bbox : BoundingBox ? = null","title":"bbox"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-multi-point/coordinates/","text":"// geojson / io.github.dellisd.spatialk.geojson / MultiPoint / coordinates coordinates [common] Content val coordinates : List < Position >","title":"Coordinates"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-multi-point/coordinates/#coordinates","text":"[common] Content val coordinates : List < Position >","title":"coordinates"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-multi-point/equals/","text":"// geojson / io.github.dellisd.spatialk.geojson / MultiPoint / equals equals [common] Content open operator override fun equals (other: Any ?): Boolean","title":"Equals"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-multi-point/equals/#equals","text":"[common] Content open operator override fun equals (other: Any ?): Boolean","title":"equals"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-multi-point/hash-code/","text":"// geojson / io.github.dellisd.spatialk.geojson / MultiPoint / hashCode hashCode [common] Content open override fun hashCode (): Int","title":"Hash code"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-multi-point/hash-code/#hashcode","text":"[common] Content open override fun hashCode (): Int","title":"hashCode"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-multi-point/json/","text":"// geojson / io.github.dellisd.spatialk.geojson / MultiPoint / json json [common] Content open override fun json (): String More info Gets a JSON representation of this object. Return JSON representation","title":"Json"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-multi-point/json/#json","text":"[common] Content open override fun json (): String More info Gets a JSON representation of this object.","title":"json"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-multi-point/json/#return","text":"JSON representation","title":"Return"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-multi-point/-companion/","text":"// geojson / io.github.dellisd.spatialk.geojson / MultiPoint / Companion Companion [common] object Companion Functions Name Summary fromJson [common] Content @ JvmStatic () fun fromJson (json: String ): MultiPoint @ JvmStatic () fun fromJson (json: JsonObject): MultiPoint fromJsonOrNull [common] Content @ JvmStatic () fun fromJsonOrNull (json: String ): MultiPoint ?","title":"Index"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-multi-point/-companion/#companion","text":"[common] object Companion","title":"Companion"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-multi-point/-companion/#functions","text":"Name Summary fromJson [common] Content @ JvmStatic () fun fromJson (json: String ): MultiPoint @ JvmStatic () fun fromJson (json: JsonObject): MultiPoint fromJsonOrNull [common] Content @ JvmStatic () fun fromJsonOrNull (json: String ): MultiPoint ?","title":"Functions"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-multi-point/-companion/from-json-or-null/","text":"// geojson / io.github.dellisd.spatialk.geojson / MultiPoint / Companion / fromJsonOrNull fromJsonOrNull [common] Content @ JvmStatic () fun fromJsonOrNull (json: String ): MultiPoint ?","title":"From json or null"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-multi-point/-companion/from-json-or-null/#fromjsonornull","text":"[common] Content @ JvmStatic () fun fromJsonOrNull (json: String ): MultiPoint ?","title":"fromJsonOrNull"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-multi-point/-companion/from-json/","text":"// geojson / io.github.dellisd.spatialk.geojson / MultiPoint / Companion / fromJson fromJson [common] Content @ JvmStatic () fun fromJson (json: String ): MultiPoint @ JvmStatic () fun fromJson (json: JsonObject): MultiPoint","title":"From json"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-multi-point/-companion/from-json/#fromjson","text":"[common] Content @ JvmStatic () fun fromJson (json: String ): MultiPoint @ JvmStatic () fun fromJson (json: JsonObject): MultiPoint","title":"fromJson"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-multi-polygon/","text":"// geojson / io.github.dellisd.spatialk.geojson / MultiPolygon MultiPolygon [common] class MultiPolygon @ JvmOverloads ()constructor( coordinates : List < List < List < Position >>>, bbox : BoundingBox ?) : Geometry Constructors MultiPolygon [common] @ JvmOverloads () fun MultiPolygon (vararg coordinates: List < List < Position >>, bbox: BoundingBox ? = null) MultiPolygon [common] @ JvmOverloads () fun MultiPolygon (coordinates: Array < Array < Array < DoubleArray >>>, bbox: BoundingBox ? = null) Types Name Summary Companion [common] Content object Companion Functions Name Summary equals [common] Content open operator override fun equals (other: Any ?): Boolean hashCode [common] Content open override fun hashCode (): Int json [common] Content open override fun json (): String More info Gets a JSON representation of this object. toString [common] Content open override fun toString (): String Properties Name Summary bbox [common] open override val bbox : BoundingBox ? = nullAn optional bounding box used to represent the limits of the object's geometry. coordinates [common] val coordinates : List < List < List < Position >>>","title":"Index"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-multi-polygon/#multipolygon","text":"[common] class MultiPolygon @ JvmOverloads ()constructor( coordinates : List < List < List < Position >>>, bbox : BoundingBox ?) : Geometry","title":"MultiPolygon"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-multi-polygon/#constructors","text":"MultiPolygon [common] @ JvmOverloads () fun MultiPolygon (vararg coordinates: List < List < Position >>, bbox: BoundingBox ? = null) MultiPolygon [common] @ JvmOverloads () fun MultiPolygon (coordinates: Array < Array < Array < DoubleArray >>>, bbox: BoundingBox ? = null)","title":"Constructors"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-multi-polygon/#types","text":"Name Summary Companion [common] Content object Companion","title":"Types"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-multi-polygon/#functions","text":"Name Summary equals [common] Content open operator override fun equals (other: Any ?): Boolean hashCode [common] Content open override fun hashCode (): Int json [common] Content open override fun json (): String More info Gets a JSON representation of this object. toString [common] Content open override fun toString (): String","title":"Functions"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-multi-polygon/#properties","text":"Name Summary bbox [common] open override val bbox : BoundingBox ? = nullAn optional bounding box used to represent the limits of the object's geometry. coordinates [common] val coordinates : List < List < List < Position >>>","title":"Properties"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-multi-polygon/-multi-polygon/","text":"// geojson / io.github.dellisd.spatialk.geojson / MultiPolygon / MultiPolygon MultiPolygon [common] Content @ JvmOverloads () fun MultiPolygon (vararg coordinates: List < List < Position >>, bbox: BoundingBox ? = null) @ JvmOverloads () fun MultiPolygon (coordinates: Array < Array < Array < DoubleArray >>>, bbox: BoundingBox ? = null) @ JvmOverloads () fun MultiPolygon (coordinates: List < List < List < Position >>>, bbox: BoundingBox ? = null)","title":" multi polygon"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-multi-polygon/-multi-polygon/#multipolygon","text":"[common] Content @ JvmOverloads () fun MultiPolygon (vararg coordinates: List < List < Position >>, bbox: BoundingBox ? = null) @ JvmOverloads () fun MultiPolygon (coordinates: Array < Array < Array < DoubleArray >>>, bbox: BoundingBox ? = null) @ JvmOverloads () fun MultiPolygon (coordinates: List < List < List < Position >>>, bbox: BoundingBox ? = null)","title":"MultiPolygon"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-multi-polygon/bbox/","text":"// geojson / io.github.dellisd.spatialk.geojson / MultiPolygon / bbox bbox [common] Content open override val bbox : BoundingBox ? = null","title":"Bbox"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-multi-polygon/bbox/#bbox","text":"[common] Content open override val bbox : BoundingBox ? = null","title":"bbox"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-multi-polygon/coordinates/","text":"// geojson / io.github.dellisd.spatialk.geojson / MultiPolygon / coordinates coordinates [common] Content val coordinates : List < List < List < Position >>>","title":"Coordinates"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-multi-polygon/coordinates/#coordinates","text":"[common] Content val coordinates : List < List < List < Position >>>","title":"coordinates"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-multi-polygon/equals/","text":"// geojson / io.github.dellisd.spatialk.geojson / MultiPolygon / equals equals [common] Content open operator override fun equals (other: Any ?): Boolean","title":"Equals"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-multi-polygon/equals/#equals","text":"[common] Content open operator override fun equals (other: Any ?): Boolean","title":"equals"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-multi-polygon/hash-code/","text":"// geojson / io.github.dellisd.spatialk.geojson / MultiPolygon / hashCode hashCode [common] Content open override fun hashCode (): Int","title":"Hash code"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-multi-polygon/hash-code/#hashcode","text":"[common] Content open override fun hashCode (): Int","title":"hashCode"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-multi-polygon/json/","text":"// geojson / io.github.dellisd.spatialk.geojson / MultiPolygon / json json [common] Content open override fun json (): String More info Gets a JSON representation of this object. Return JSON representation","title":"Json"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-multi-polygon/json/#json","text":"[common] Content open override fun json (): String More info Gets a JSON representation of this object.","title":"json"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-multi-polygon/json/#return","text":"JSON representation","title":"Return"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-multi-polygon/-companion/","text":"// geojson / io.github.dellisd.spatialk.geojson / MultiPolygon / Companion Companion [common] object Companion Functions Name Summary fromJson [common] Content @ JvmStatic () fun fromJson (json: String ): MultiPolygon fromJsonOrNull [common] Content @ JvmStatic () fun fromJsonOrNull (json: String ): MultiPolygon ?","title":"Index"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-multi-polygon/-companion/#companion","text":"[common] object Companion","title":"Companion"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-multi-polygon/-companion/#functions","text":"Name Summary fromJson [common] Content @ JvmStatic () fun fromJson (json: String ): MultiPolygon fromJsonOrNull [common] Content @ JvmStatic () fun fromJsonOrNull (json: String ): MultiPolygon ?","title":"Functions"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-multi-polygon/-companion/from-json-or-null/","text":"// geojson / io.github.dellisd.spatialk.geojson / MultiPolygon / Companion / fromJsonOrNull fromJsonOrNull [common] Content @ JvmStatic () fun fromJsonOrNull (json: String ): MultiPolygon ?","title":"From json or null"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-multi-polygon/-companion/from-json-or-null/#fromjsonornull","text":"[common] Content @ JvmStatic () fun fromJsonOrNull (json: String ): MultiPolygon ?","title":"fromJsonOrNull"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-multi-polygon/-companion/from-json/","text":"// geojson / io.github.dellisd.spatialk.geojson / MultiPolygon / Companion / fromJson fromJson [common] Content @ JvmStatic () fun fromJson (json: String ): MultiPolygon","title":"From json"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-multi-polygon/-companion/from-json/#fromjson","text":"[common] Content @ JvmStatic () fun fromJson (json: String ): MultiPolygon","title":"fromJson"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-point/","text":"// geojson / io.github.dellisd.spatialk.geojson / Point Point [common] class Point @ JvmOverloads ()constructor( coordinates : Position , bbox : BoundingBox ?) : Geometry Constructors Point [common] @ JvmOverloads () fun Point (coordinates: DoubleArray , bbox: BoundingBox ? = null) Types Name Summary Companion [common] Content object Companion Functions Name Summary equals [common] Content open operator override fun equals (other: Any ?): Boolean hashCode [common] Content open override fun hashCode (): Int json [common] Content open override fun json (): String More info Gets a JSON representation of this object. toString [common] Content open override fun toString (): String Properties Name Summary bbox [common] open override val bbox : BoundingBox ? = nullAn optional bounding box used to represent the limits of the object's geometry. coordinates [common] val coordinates : Position","title":"Index"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-point/#point","text":"[common] class Point @ JvmOverloads ()constructor( coordinates : Position , bbox : BoundingBox ?) : Geometry","title":"Point"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-point/#constructors","text":"Point [common] @ JvmOverloads () fun Point (coordinates: DoubleArray , bbox: BoundingBox ? = null)","title":"Constructors"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-point/#types","text":"Name Summary Companion [common] Content object Companion","title":"Types"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-point/#functions","text":"Name Summary equals [common] Content open operator override fun equals (other: Any ?): Boolean hashCode [common] Content open override fun hashCode (): Int json [common] Content open override fun json (): String More info Gets a JSON representation of this object. toString [common] Content open override fun toString (): String","title":"Functions"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-point/#properties","text":"Name Summary bbox [common] open override val bbox : BoundingBox ? = nullAn optional bounding box used to represent the limits of the object's geometry. coordinates [common] val coordinates : Position","title":"Properties"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-point/-point/","text":"// geojson / io.github.dellisd.spatialk.geojson / Point / Point Point [common] Content @ JvmOverloads () fun Point (coordinates: DoubleArray , bbox: BoundingBox ? = null) @ JvmOverloads () fun Point (coordinates: Position , bbox: BoundingBox ? = null)","title":" point"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-point/-point/#point","text":"[common] Content @ JvmOverloads () fun Point (coordinates: DoubleArray , bbox: BoundingBox ? = null) @ JvmOverloads () fun Point (coordinates: Position , bbox: BoundingBox ? = null)","title":"Point"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-point/bbox/","text":"// geojson / io.github.dellisd.spatialk.geojson / Point / bbox bbox [common] Content open override val bbox : BoundingBox ? = null","title":"Bbox"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-point/bbox/#bbox","text":"[common] Content open override val bbox : BoundingBox ? = null","title":"bbox"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-point/coordinates/","text":"// geojson / io.github.dellisd.spatialk.geojson / Point / coordinates coordinates [common] Content val coordinates : Position","title":"Coordinates"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-point/coordinates/#coordinates","text":"[common] Content val coordinates : Position","title":"coordinates"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-point/equals/","text":"// geojson / io.github.dellisd.spatialk.geojson / Point / equals equals [common] Content open operator override fun equals (other: Any ?): Boolean","title":"Equals"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-point/equals/#equals","text":"[common] Content open operator override fun equals (other: Any ?): Boolean","title":"equals"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-point/hash-code/","text":"// geojson / io.github.dellisd.spatialk.geojson / Point / hashCode hashCode [common] Content open override fun hashCode (): Int","title":"Hash code"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-point/hash-code/#hashcode","text":"[common] Content open override fun hashCode (): Int","title":"hashCode"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-point/json/","text":"// geojson / io.github.dellisd.spatialk.geojson / Point / json json [common] Content open override fun json (): String More info Gets a JSON representation of this object. Return JSON representation","title":"Json"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-point/json/#json","text":"[common] Content open override fun json (): String More info Gets a JSON representation of this object.","title":"json"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-point/json/#return","text":"JSON representation","title":"Return"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-point/-companion/","text":"// geojson / io.github.dellisd.spatialk.geojson / Point / Companion Companion [common] object Companion Functions Name Summary fromJson [common] Content @ JvmStatic () fun fromJson (json: String ): Point fromJsonOrNull [common] Content @ JvmStatic () fun fromJsonOrNull (json: String ): Point ?","title":"Index"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-point/-companion/#companion","text":"[common] object Companion","title":"Companion"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-point/-companion/#functions","text":"Name Summary fromJson [common] Content @ JvmStatic () fun fromJson (json: String ): Point fromJsonOrNull [common] Content @ JvmStatic () fun fromJsonOrNull (json: String ): Point ?","title":"Functions"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-point/-companion/from-json-or-null/","text":"// geojson / io.github.dellisd.spatialk.geojson / Point / Companion / fromJsonOrNull fromJsonOrNull [common] Content @ JvmStatic () fun fromJsonOrNull (json: String ): Point ?","title":"From json or null"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-point/-companion/from-json-or-null/#fromjsonornull","text":"[common] Content @ JvmStatic () fun fromJsonOrNull (json: String ): Point ?","title":"fromJsonOrNull"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-point/-companion/from-json/","text":"// geojson / io.github.dellisd.spatialk.geojson / Point / Companion / fromJson fromJson [common] Content @ JvmStatic () fun fromJson (json: String ): Point","title":"From json"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-point/-companion/from-json/#fromjson","text":"[common] Content @ JvmStatic () fun fromJson (json: String ): Point","title":"fromJson"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-polygon/","text":"// geojson / io.github.dellisd.spatialk.geojson / Polygon Polygon [common] class Polygon @ JvmOverloads ()constructor( coordinates : List < List < Position >>, bbox : BoundingBox ?) : Geometry Constructors Polygon [common] @ JvmOverloads () fun Polygon (vararg coordinates: List < Position >, bbox: BoundingBox ? = null) Polygon [common] @ JvmOverloads () fun Polygon (coordinates: Array < Array < DoubleArray >>, bbox: BoundingBox ? = null) Types Name Summary Companion [common] Content object Companion Functions Name Summary equals [common] Content open operator override fun equals (other: Any ?): Boolean hashCode [common] Content open override fun hashCode (): Int json [common] Content open override fun json (): String More info Gets a JSON representation of this object. toString [common] Content open override fun toString (): String Properties Name Summary bbox [common] open override val bbox : BoundingBox ? = nullAn optional bounding box used to represent the limits of the object's geometry. coordinates [common] val coordinates : List < List < Position >>","title":"Index"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-polygon/#polygon","text":"[common] class Polygon @ JvmOverloads ()constructor( coordinates : List < List < Position >>, bbox : BoundingBox ?) : Geometry","title":"Polygon"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-polygon/#constructors","text":"Polygon [common] @ JvmOverloads () fun Polygon (vararg coordinates: List < Position >, bbox: BoundingBox ? = null) Polygon [common] @ JvmOverloads () fun Polygon (coordinates: Array < Array < DoubleArray >>, bbox: BoundingBox ? = null)","title":"Constructors"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-polygon/#types","text":"Name Summary Companion [common] Content object Companion","title":"Types"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-polygon/#functions","text":"Name Summary equals [common] Content open operator override fun equals (other: Any ?): Boolean hashCode [common] Content open override fun hashCode (): Int json [common] Content open override fun json (): String More info Gets a JSON representation of this object. toString [common] Content open override fun toString (): String","title":"Functions"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-polygon/#properties","text":"Name Summary bbox [common] open override val bbox : BoundingBox ? = nullAn optional bounding box used to represent the limits of the object's geometry. coordinates [common] val coordinates : List < List < Position >>","title":"Properties"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-polygon/-polygon/","text":"// geojson / io.github.dellisd.spatialk.geojson / Polygon / Polygon Polygon [common] Content @ JvmOverloads () fun Polygon (vararg coordinates: List < Position >, bbox: BoundingBox ? = null) @ JvmOverloads () fun Polygon (coordinates: Array < Array < DoubleArray >>, bbox: BoundingBox ? = null) @ JvmOverloads () fun Polygon (coordinates: List < List < Position >>, bbox: BoundingBox ? = null)","title":" polygon"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-polygon/-polygon/#polygon","text":"[common] Content @ JvmOverloads () fun Polygon (vararg coordinates: List < Position >, bbox: BoundingBox ? = null) @ JvmOverloads () fun Polygon (coordinates: Array < Array < DoubleArray >>, bbox: BoundingBox ? = null) @ JvmOverloads () fun Polygon (coordinates: List < List < Position >>, bbox: BoundingBox ? = null)","title":"Polygon"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-polygon/bbox/","text":"// geojson / io.github.dellisd.spatialk.geojson / Polygon / bbox bbox [common] Content open override val bbox : BoundingBox ? = null","title":"Bbox"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-polygon/bbox/#bbox","text":"[common] Content open override val bbox : BoundingBox ? = null","title":"bbox"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-polygon/coordinates/","text":"// geojson / io.github.dellisd.spatialk.geojson / Polygon / coordinates coordinates [common] Content val coordinates : List < List < Position >>","title":"Coordinates"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-polygon/coordinates/#coordinates","text":"[common] Content val coordinates : List < List < Position >>","title":"coordinates"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-polygon/equals/","text":"// geojson / io.github.dellisd.spatialk.geojson / Polygon / equals equals [common] Content open operator override fun equals (other: Any ?): Boolean","title":"Equals"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-polygon/equals/#equals","text":"[common] Content open operator override fun equals (other: Any ?): Boolean","title":"equals"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-polygon/hash-code/","text":"// geojson / io.github.dellisd.spatialk.geojson / Polygon / hashCode hashCode [common] Content open override fun hashCode (): Int","title":"Hash code"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-polygon/hash-code/#hashcode","text":"[common] Content open override fun hashCode (): Int","title":"hashCode"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-polygon/json/","text":"// geojson / io.github.dellisd.spatialk.geojson / Polygon / json json [common] Content open override fun json (): String More info Gets a JSON representation of this object. Return JSON representation","title":"Json"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-polygon/json/#json","text":"[common] Content open override fun json (): String More info Gets a JSON representation of this object.","title":"json"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-polygon/json/#return","text":"JSON representation","title":"Return"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-polygon/-companion/","text":"// geojson / io.github.dellisd.spatialk.geojson / Polygon / Companion Companion [common] object Companion Functions Name Summary fromJson [common] Content @ JvmStatic () fun fromJson (json: String ): Polygon fromJsonOrNull [common] Content @ JvmStatic () fun fromJsonOrNull (json: String ): Polygon ?","title":"Index"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-polygon/-companion/#companion","text":"[common] object Companion","title":"Companion"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-polygon/-companion/#functions","text":"Name Summary fromJson [common] Content @ JvmStatic () fun fromJson (json: String ): Polygon fromJsonOrNull [common] Content @ JvmStatic () fun fromJsonOrNull (json: String ): Polygon ?","title":"Functions"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-polygon/-companion/from-json-or-null/","text":"// geojson / io.github.dellisd.spatialk.geojson / Polygon / Companion / fromJsonOrNull fromJsonOrNull [common] Content @ JvmStatic () fun fromJsonOrNull (json: String ): Polygon ?","title":"From json or null"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-polygon/-companion/from-json-or-null/#fromjsonornull","text":"[common] Content @ JvmStatic () fun fromJsonOrNull (json: String ): Polygon ?","title":"fromJsonOrNull"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-polygon/-companion/from-json/","text":"// geojson / io.github.dellisd.spatialk.geojson / Polygon / Companion / fromJson fromJson [common] Content @ JvmStatic () fun fromJson (json: String ): Polygon","title":"From json"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-polygon/-companion/from-json/#fromjson","text":"[common] Content @ JvmStatic () fun fromJson (json: String ): Polygon","title":"fromJson"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-position/","text":"// geojson / io.github.dellisd.spatialk.geojson / Position Position [common] class Position ( coordinates : DoubleArray ) A position is the fundamental geometry construct. Positions are represented by Position s in Spatial K In JSON, a position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude , or easting and northing, precisely in that order using decimal numbers. Altitude or elevation MAY be included as an optional third element. When serialized, the latitude , longitude , and altitude (if present) will be represented as an array. LngLat(longitude = -75.0, latitude = 45.0) will be serialized as [-75.0,45.0] See also common https://tools.ietf.org/html/rfc7946#section-3.1.1 io.github.dellisd.spatialk.geojson.serialization.PositionSerializer Constructors Position [common] fun Position (longitude: Double , latitude: Double ) Position [common] fun Position (longitude: Double , latitude: Double , altitude: Double ) Position [common] fun Position (longitude: Double , latitude: Double , altitude: Double ?) Position [common] fun Position (coordinates: DoubleArray ) Functions Name Summary component1 [common] Content operator fun component1 (): Double More info Component function for getting the longitude component2 [common] Content operator fun component2 (): Double More info Component function for getting the latitude component3 [common] Content operator fun component3 (): Double ? More info Component function for getting the altitude equals [common] Content open operator override fun equals (other: Any ?): Boolean hashCode [common] Content open override fun hashCode (): Int json [common] Content fun json (): String toString [common] Content open override fun toString (): String Properties Name Summary altitude [common] val altitude : Double ?Optionally, an altitude or elevation for this position coordinates [common] val coordinates : DoubleArray latitude [common] val latitude : Double The latitude value of this position (or northing value for projected coordinates) longitude [common] val longitude : Double The longitude value of this position (or easting value for projected coordinates) Extensions Name Summary hasAltitude [common] Content val Position . hasAltitude : Boolean","title":"Index"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-position/#position","text":"[common] class Position ( coordinates : DoubleArray ) A position is the fundamental geometry construct. Positions are represented by Position s in Spatial K In JSON, a position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude , or easting and northing, precisely in that order using decimal numbers. Altitude or elevation MAY be included as an optional third element. When serialized, the latitude , longitude , and altitude (if present) will be represented as an array. LngLat(longitude = -75.0, latitude = 45.0) will be serialized as [-75.0,45.0]","title":"Position"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-position/#see-also","text":"common https://tools.ietf.org/html/rfc7946#section-3.1.1 io.github.dellisd.spatialk.geojson.serialization.PositionSerializer","title":"See also"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-position/#constructors","text":"Position [common] fun Position (longitude: Double , latitude: Double ) Position [common] fun Position (longitude: Double , latitude: Double , altitude: Double ) Position [common] fun Position (longitude: Double , latitude: Double , altitude: Double ?) Position [common] fun Position (coordinates: DoubleArray )","title":"Constructors"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-position/#functions","text":"Name Summary component1 [common] Content operator fun component1 (): Double More info Component function for getting the longitude component2 [common] Content operator fun component2 (): Double More info Component function for getting the latitude component3 [common] Content operator fun component3 (): Double ? More info Component function for getting the altitude equals [common] Content open operator override fun equals (other: Any ?): Boolean hashCode [common] Content open override fun hashCode (): Int json [common] Content fun json (): String toString [common] Content open override fun toString (): String","title":"Functions"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-position/#properties","text":"Name Summary altitude [common] val altitude : Double ?Optionally, an altitude or elevation for this position coordinates [common] val coordinates : DoubleArray latitude [common] val latitude : Double The latitude value of this position (or northing value for projected coordinates) longitude [common] val longitude : Double The longitude value of this position (or easting value for projected coordinates)","title":"Properties"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-position/#extensions","text":"Name Summary hasAltitude [common] Content val Position . hasAltitude : Boolean","title":"Extensions"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-position/-position/","text":"// geojson / io.github.dellisd.spatialk.geojson / Position / Position Position [common] Content fun Position (longitude: Double , latitude: Double ) fun Position (longitude: Double , latitude: Double , altitude: Double ) fun Position (longitude: Double , latitude: Double , altitude: Double ?) fun Position (coordinates: DoubleArray )","title":" position"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-position/-position/#position","text":"[common] Content fun Position (longitude: Double , latitude: Double ) fun Position (longitude: Double , latitude: Double , altitude: Double ) fun Position (longitude: Double , latitude: Double , altitude: Double ?) fun Position (coordinates: DoubleArray )","title":"Position"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-position/altitude/","text":"// geojson / io.github.dellisd.spatialk.geojson / Position / altitude altitude [common] Content val altitude : Double ?","title":"Altitude"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-position/altitude/#altitude","text":"[common] Content val altitude : Double ?","title":"altitude"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-position/component1/","text":"// geojson / io.github.dellisd.spatialk.geojson / Position / component1 component1 [common] Content operator fun component1 (): Double More info Component function for getting the longitude Return longitude","title":"Component1"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-position/component1/#component1","text":"[common] Content operator fun component1 (): Double More info Component function for getting the longitude","title":"component1"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-position/component1/#return","text":"longitude","title":"Return"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-position/component2/","text":"// geojson / io.github.dellisd.spatialk.geojson / Position / component2 component2 [common] Content operator fun component2 (): Double More info Component function for getting the latitude Return latitude","title":"Component2"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-position/component2/#component2","text":"[common] Content operator fun component2 (): Double More info Component function for getting the latitude","title":"component2"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-position/component2/#return","text":"latitude","title":"Return"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-position/component3/","text":"// geojson / io.github.dellisd.spatialk.geojson / Position / component3 component3 [common] Content operator fun component3 (): Double ? More info Component function for getting the altitude Return altitude","title":"Component3"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-position/component3/#component3","text":"[common] Content operator fun component3 (): Double ? More info Component function for getting the altitude","title":"component3"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-position/component3/#return","text":"altitude","title":"Return"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-position/coordinates/","text":"// geojson / io.github.dellisd.spatialk.geojson / Position / coordinates coordinates [common] Content val coordinates : DoubleArray","title":"Coordinates"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-position/coordinates/#coordinates","text":"[common] Content val coordinates : DoubleArray","title":"coordinates"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-position/equals/","text":"// geojson / io.github.dellisd.spatialk.geojson / Position / equals equals [common] Content open operator override fun equals (other: Any ?): Boolean","title":"Equals"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-position/equals/#equals","text":"[common] Content open operator override fun equals (other: Any ?): Boolean","title":"equals"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-position/hash-code/","text":"// geojson / io.github.dellisd.spatialk.geojson / Position / hashCode hashCode [common] Content open override fun hashCode (): Int","title":"Hash code"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-position/hash-code/#hashcode","text":"[common] Content open override fun hashCode (): Int","title":"hashCode"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-position/json/","text":"// geojson / io.github.dellisd.spatialk.geojson / Position / json json [common] Content fun json (): String","title":"Json"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-position/json/#json","text":"[common] Content fun json (): String","title":"json"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-position/latitude/","text":"// geojson / io.github.dellisd.spatialk.geojson / Position / latitude latitude [common] Content val latitude : Double","title":"Latitude"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-position/latitude/#latitude","text":"[common] Content val latitude : Double","title":"latitude"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-position/longitude/","text":"// geojson / io.github.dellisd.spatialk.geojson / Position / longitude longitude [common] Content val longitude : Double","title":"Longitude"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-position/longitude/#longitude","text":"[common] Content val longitude : Double","title":"longitude"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-position/to-string/","text":"// geojson / io.github.dellisd.spatialk.geojson / Position / toString toString [common] Content open override fun toString (): String","title":"To string"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson/-position/to-string/#tostring","text":"[common] Content open override fun toString (): String","title":"toString"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/","text":"// geojson / io.github.dellisd.spatialk.geojson.dsl Package io.github.dellisd.spatialk.geojson.dsl Types Name Summary FeatureCollectionDsl [common] Content class FeatureCollectionDsl ( features : MutableList < Feature >, bbox : BoundingBox ?) GeometryCollectionDsl [common] Content class GeometryCollectionDsl ( geometries : MutableList < Geometry >) : GeometryDsl < GeometryCollection > GeometryDsl [common] Content abstract class GeometryDsl < T : Geometry > LineStringDsl [common] Content class LineStringDsl ( points : MutableList < Position >) : GeometryDsl < LineString > MultiLineStringDsl [common] Content class MultiLineStringDsl ( coordinates : MutableList < List < Position >>) : GeometryDsl < MultiLineString > MultiPointDsl [common] Content class MultiPointDsl ( points : MutableList < Position >) : GeometryDsl < MultiPoint > MultiPolygonDsl [common] Content class MultiPolygonDsl ( coordinates : MutableList < List < List < Position >>>) : GeometryDsl < MultiPolygon > PointDsl [common] Content class PointDsl ( coordinates : Position ) : GeometryDsl < Point > PolygonDsl [common] Content class PolygonDsl ( coordinates : MutableList < List < Position >>) : GeometryDsl < Polygon > PropertiesBuilder [common] Content class PropertiesBuilder Functions Name Summary feature [common] Content inline fun feature (geometry: Geometry ? = null, id: String ? = null, bbox: BoundingBox ? = null, properties: PropertiesBuilder .() -> Unit = {}): Feature featureCollection [common] Content inline fun featureCollection (block: FeatureCollectionDsl .() -> Unit ): geometryCollection [common] Content inline fun geometryCollection (block: GeometryCollectionDsl .() -> Unit ): lineString [common] Content inline fun lineString (block: LineStringDsl .() -> Unit ): lngLat [common] Content fun lngLat (longitude: Double , latitude: Double ): Position fun lngLat (longitude: Double , latitude: Double , altitude: Double ): Position fun lngLat (longitude: Double , latitude: Double , altitude: Double ?): Position multiLineString [common] Content inline fun multiLineString (block: MultiLineStringDsl .() -> Unit ): multiPoint [common] Content inline fun multiPoint (block: MultiPointDsl .() -> Unit ): MultiPoint multiPolygon [common] Content inline fun multiPolygon (block: MultiPolygonDsl .() -> Unit ): point [common] Content inline fun point (longitude: Double , latitude: Double , altitude: Double ? = null, block: PointDsl .() -> Unit = {}): Point polygon [common] Content inline fun polygon (block: PolygonDsl .() -> Unit ):","title":"Index"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/#package-iogithubdellisdspatialkgeojsondsl","text":"","title":"Package io.github.dellisd.spatialk.geojson.dsl"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/#types","text":"Name Summary FeatureCollectionDsl [common] Content class FeatureCollectionDsl ( features : MutableList < Feature >, bbox : BoundingBox ?) GeometryCollectionDsl [common] Content class GeometryCollectionDsl ( geometries : MutableList < Geometry >) : GeometryDsl < GeometryCollection > GeometryDsl [common] Content abstract class GeometryDsl < T : Geometry > LineStringDsl [common] Content class LineStringDsl ( points : MutableList < Position >) : GeometryDsl < LineString > MultiLineStringDsl [common] Content class MultiLineStringDsl ( coordinates : MutableList < List < Position >>) : GeometryDsl < MultiLineString > MultiPointDsl [common] Content class MultiPointDsl ( points : MutableList < Position >) : GeometryDsl < MultiPoint > MultiPolygonDsl [common] Content class MultiPolygonDsl ( coordinates : MutableList < List < List < Position >>>) : GeometryDsl < MultiPolygon > PointDsl [common] Content class PointDsl ( coordinates : Position ) : GeometryDsl < Point > PolygonDsl [common] Content class PolygonDsl ( coordinates : MutableList < List < Position >>) : GeometryDsl < Polygon > PropertiesBuilder [common] Content class PropertiesBuilder","title":"Types"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/#functions","text":"Name Summary feature [common] Content inline fun feature (geometry: Geometry ? = null, id: String ? = null, bbox: BoundingBox ? = null, properties: PropertiesBuilder .() -> Unit = {}): Feature featureCollection [common] Content inline fun featureCollection (block: FeatureCollectionDsl .() -> Unit ): geometryCollection [common] Content inline fun geometryCollection (block: GeometryCollectionDsl .() -> Unit ): lineString [common] Content inline fun lineString (block: LineStringDsl .() -> Unit ): lngLat [common] Content fun lngLat (longitude: Double , latitude: Double ): Position fun lngLat (longitude: Double , latitude: Double , altitude: Double ): Position fun lngLat (longitude: Double , latitude: Double , altitude: Double ?): Position multiLineString [common] Content inline fun multiLineString (block: MultiLineStringDsl .() -> Unit ): multiPoint [common] Content inline fun multiPoint (block: MultiPointDsl .() -> Unit ): MultiPoint multiPolygon [common] Content inline fun multiPolygon (block: MultiPolygonDsl .() -> Unit ): point [common] Content inline fun point (longitude: Double , latitude: Double , altitude: Double ? = null, block: PointDsl .() -> Unit = {}): Point polygon [common] Content inline fun polygon (block: PolygonDsl .() -> Unit ):","title":"Functions"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/feature-collection/","text":"// geojson / io.github.dellisd.spatialk.geojson.dsl / featureCollection featureCollection [common] Content inline fun featureCollection (block: FeatureCollectionDsl .() -> Unit ):","title":"Feature collection"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/feature-collection/#featurecollection","text":"[common] Content inline fun featureCollection (block: FeatureCollectionDsl .() -> Unit ):","title":"featureCollection"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/feature/","text":"// geojson / io.github.dellisd.spatialk.geojson.dsl / feature feature [common] Content inline fun feature (geometry: Geometry ? = null, id: String ? = null, bbox: BoundingBox ? = null, properties: PropertiesBuilder .() -> Unit = {}): Feature","title":"Feature"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/feature/#feature","text":"[common] Content inline fun feature (geometry: Geometry ? = null, id: String ? = null, bbox: BoundingBox ? = null, properties: PropertiesBuilder .() -> Unit = {}): Feature","title":"feature"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/geometry-collection/","text":"// geojson / io.github.dellisd.spatialk.geojson.dsl / geometryCollection geometryCollection [common] Content inline fun geometryCollection (block: GeometryCollectionDsl .() -> Unit ):","title":"Geometry collection"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/geometry-collection/#geometrycollection","text":"[common] Content inline fun geometryCollection (block: GeometryCollectionDsl .() -> Unit ):","title":"geometryCollection"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/line-string/","text":"// geojson / io.github.dellisd.spatialk.geojson.dsl / lineString lineString [common] Content inline fun lineString (block: LineStringDsl .() -> Unit ):","title":"Line string"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/line-string/#linestring","text":"[common] Content inline fun lineString (block: LineStringDsl .() -> Unit ):","title":"lineString"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/lng-lat/","text":"// geojson / io.github.dellisd.spatialk.geojson.dsl / lngLat lngLat [common] Content fun lngLat (longitude: Double , latitude: Double ): Position fun lngLat (longitude: Double , latitude: Double , altitude: Double ): Position fun lngLat (longitude: Double , latitude: Double , altitude: Double ?): Position","title":"Lng lat"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/lng-lat/#lnglat","text":"[common] Content fun lngLat (longitude: Double , latitude: Double ): Position fun lngLat (longitude: Double , latitude: Double , altitude: Double ): Position fun lngLat (longitude: Double , latitude: Double , altitude: Double ?): Position","title":"lngLat"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/multi-line-string/","text":"// geojson / io.github.dellisd.spatialk.geojson.dsl / multiLineString multiLineString [common] Content inline fun multiLineString (block: MultiLineStringDsl .() -> Unit ):","title":"Multi line string"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/multi-line-string/#multilinestring","text":"[common] Content inline fun multiLineString (block: MultiLineStringDsl .() -> Unit ):","title":"multiLineString"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/multi-point/","text":"// geojson / io.github.dellisd.spatialk.geojson.dsl / multiPoint multiPoint [common] Content inline fun multiPoint (block: MultiPointDsl .() -> Unit ): MultiPoint","title":"Multi point"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/multi-point/#multipoint","text":"[common] Content inline fun multiPoint (block: MultiPointDsl .() -> Unit ): MultiPoint","title":"multiPoint"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/multi-polygon/","text":"// geojson / io.github.dellisd.spatialk.geojson.dsl / multiPolygon multiPolygon [common] Content inline fun multiPolygon (block: MultiPolygonDsl .() -> Unit ):","title":"Multi polygon"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/multi-polygon/#multipolygon","text":"[common] Content inline fun multiPolygon (block: MultiPolygonDsl .() -> Unit ):","title":"multiPolygon"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/point/","text":"// geojson / io.github.dellisd.spatialk.geojson.dsl / point point [common] Content inline fun point (longitude: Double , latitude: Double , altitude: Double ? = null, block: PointDsl .() -> Unit = {}): Point","title":"Point"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/point/#point","text":"[common] Content inline fun point (longitude: Double , latitude: Double , altitude: Double ? = null, block: PointDsl .() -> Unit = {}): Point","title":"point"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/polygon/","text":"// geojson / io.github.dellisd.spatialk.geojson.dsl / polygon polygon [common] Content inline fun polygon (block: PolygonDsl .() -> Unit ):","title":"Polygon"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/polygon/#polygon","text":"[common] Content inline fun polygon (block: PolygonDsl .() -> Unit ):","title":"polygon"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-feature-collection-dsl/","text":"// geojson / io.github.dellisd.spatialk.geojson.dsl / FeatureCollectionDsl FeatureCollectionDsl [common] class FeatureCollectionDsl ( features : MutableList < Feature >, bbox : BoundingBox ?) Functions Name Summary create [common] Content fun create (): FeatureCollection feature [common] Content fun feature (geometry: Geometry ? = null, id: String ? = null, bbox: BoundingBox ? = null, properties: PropertiesBuilder .() -> Unit = {}) unaryPlus [common] Content operator fun Feature . unaryPlus () Properties Name Summary bbox [common] var bbox : BoundingBox ? = null","title":"Index"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-feature-collection-dsl/#featurecollectiondsl","text":"[common] class FeatureCollectionDsl ( features : MutableList < Feature >, bbox : BoundingBox ?)","title":"FeatureCollectionDsl"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-feature-collection-dsl/#functions","text":"Name Summary create [common] Content fun create (): FeatureCollection feature [common] Content fun feature (geometry: Geometry ? = null, id: String ? = null, bbox: BoundingBox ? = null, properties: PropertiesBuilder .() -> Unit = {}) unaryPlus [common] Content operator fun Feature . unaryPlus ()","title":"Functions"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-feature-collection-dsl/#properties","text":"Name Summary bbox [common] var bbox : BoundingBox ? = null","title":"Properties"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-feature-collection-dsl/-feature-collection-dsl/","text":"// geojson / io.github.dellisd.spatialk.geojson.dsl / FeatureCollectionDsl / FeatureCollectionDsl FeatureCollectionDsl [common] Content fun FeatureCollectionDsl (features: MutableList < Feature > = mutableListOf(), bbox: BoundingBox ? = null)","title":" feature collection dsl"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-feature-collection-dsl/-feature-collection-dsl/#featurecollectiondsl","text":"[common] Content fun FeatureCollectionDsl (features: MutableList < Feature > = mutableListOf(), bbox: BoundingBox ? = null)","title":"FeatureCollectionDsl"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-feature-collection-dsl/bbox/","text":"// geojson / io.github.dellisd.spatialk.geojson.dsl / FeatureCollectionDsl / bbox bbox [common] Content var bbox : BoundingBox ? = null","title":"Bbox"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-feature-collection-dsl/bbox/#bbox","text":"[common] Content var bbox : BoundingBox ? = null","title":"bbox"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-feature-collection-dsl/create/","text":"// geojson / io.github.dellisd.spatialk.geojson.dsl / FeatureCollectionDsl / create create [common] Content fun create (): FeatureCollection","title":"Create"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-feature-collection-dsl/create/#create","text":"[common] Content fun create (): FeatureCollection","title":"create"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-feature-collection-dsl/feature/","text":"// geojson / io.github.dellisd.spatialk.geojson.dsl / FeatureCollectionDsl / feature feature [common] Content fun feature (geometry: Geometry ? = null, id: String ? = null, bbox: BoundingBox ? = null, properties: PropertiesBuilder .() -> Unit = {})","title":"Feature"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-feature-collection-dsl/feature/#feature","text":"[common] Content fun feature (geometry: Geometry ? = null, id: String ? = null, bbox: BoundingBox ? = null, properties: PropertiesBuilder .() -> Unit = {})","title":"feature"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-feature-collection-dsl/unary-plus/","text":"// geojson / io.github.dellisd.spatialk.geojson.dsl / FeatureCollectionDsl / unaryPlus unaryPlus [common] Content operator fun Feature . unaryPlus ()","title":"Unary plus"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-feature-collection-dsl/unary-plus/#unaryplus","text":"[common] Content operator fun Feature . unaryPlus ()","title":"unaryPlus"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-geometry-collection-dsl/","text":"// geojson / io.github.dellisd.spatialk.geojson.dsl / GeometryCollectionDsl GeometryCollectionDsl [common] class GeometryCollectionDsl ( geometries : MutableList < Geometry >) : GeometryDsl < GeometryCollection > Functions Name Summary create [common] Content open override fun create (): GeometryCollection unaryPlus [common] Content operator fun Geometry . unaryPlus () Properties Name Summary bbox [common] var bbox : BoundingBox ?","title":"Index"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-geometry-collection-dsl/#geometrycollectiondsl","text":"[common] class GeometryCollectionDsl ( geometries : MutableList < Geometry >) : GeometryDsl < GeometryCollection >","title":"GeometryCollectionDsl"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-geometry-collection-dsl/#functions","text":"Name Summary create [common] Content open override fun create (): GeometryCollection unaryPlus [common] Content operator fun Geometry . unaryPlus ()","title":"Functions"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-geometry-collection-dsl/#properties","text":"Name Summary bbox [common] var bbox : BoundingBox ?","title":"Properties"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-geometry-collection-dsl/-geometry-collection-dsl/","text":"// geojson / io.github.dellisd.spatialk.geojson.dsl / GeometryCollectionDsl / GeometryCollectionDsl GeometryCollectionDsl [common] Content fun GeometryCollectionDsl (geometries: MutableList < Geometry > = mutableListOf())","title":" geometry collection dsl"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-geometry-collection-dsl/-geometry-collection-dsl/#geometrycollectiondsl","text":"[common] Content fun GeometryCollectionDsl (geometries: MutableList < Geometry > = mutableListOf())","title":"GeometryCollectionDsl"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-geometry-collection-dsl/create/","text":"// geojson / io.github.dellisd.spatialk.geojson.dsl / GeometryCollectionDsl / create create [common] Content open override fun create (): GeometryCollection","title":"Create"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-geometry-collection-dsl/create/#create","text":"[common] Content open override fun create (): GeometryCollection","title":"create"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-geometry-collection-dsl/unary-plus/","text":"// geojson / io.github.dellisd.spatialk.geojson.dsl / GeometryCollectionDsl / unaryPlus unaryPlus [common] Content operator fun Geometry . unaryPlus ()","title":"Unary plus"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-geometry-collection-dsl/unary-plus/#unaryplus","text":"[common] Content operator fun Geometry . unaryPlus ()","title":"unaryPlus"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-geometry-dsl/","text":"// geojson / io.github.dellisd.spatialk.geojson.dsl / GeometryDsl GeometryDsl [common] abstract class GeometryDsl < T : Geometry > Functions Name Summary create [common] Content abstract fun create (): T Properties Name Summary bbox [common] var bbox : BoundingBox ? = null Inheritors Name PointDsl MultiPointDsl LineStringDsl MultiLineStringDsl PolygonDsl MultiPolygonDsl GeometryCollectionDsl","title":"Index"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-geometry-dsl/#geometrydsl","text":"[common] abstract class GeometryDsl < T : Geometry >","title":"GeometryDsl"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-geometry-dsl/#functions","text":"Name Summary create [common] Content abstract fun create (): T","title":"Functions"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-geometry-dsl/#properties","text":"Name Summary bbox [common] var bbox : BoundingBox ? = null","title":"Properties"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-geometry-dsl/#inheritors","text":"Name PointDsl MultiPointDsl LineStringDsl MultiLineStringDsl PolygonDsl MultiPolygonDsl GeometryCollectionDsl","title":"Inheritors"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-geometry-dsl/bbox/","text":"// geojson / io.github.dellisd.spatialk.geojson.dsl / GeometryDsl / bbox bbox [common] Content var bbox : BoundingBox ? = null","title":"Bbox"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-geometry-dsl/bbox/#bbox","text":"[common] Content var bbox : BoundingBox ? = null","title":"bbox"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-geometry-dsl/create/","text":"// geojson / io.github.dellisd.spatialk.geojson.dsl / GeometryDsl / create create [common] Content abstract fun create (): T","title":"Create"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-geometry-dsl/create/#create","text":"[common] Content abstract fun create (): T","title":"create"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-line-string-dsl/","text":"// geojson / io.github.dellisd.spatialk.geojson.dsl / LineStringDsl LineStringDsl [common] class LineStringDsl ( points : MutableList < Position >) : GeometryDsl < LineString > Functions Name Summary create [common] Content open override fun create (): LineString point [common] Content fun point (longitude: Double , latitude: Double , altitude: Double ? = null) unaryPlus [common] Content operator fun Point . unaryPlus () operator fun Position . unaryPlus () Properties Name Summary bbox [common] var bbox : BoundingBox ?","title":"Index"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-line-string-dsl/#linestringdsl","text":"[common] class LineStringDsl ( points : MutableList < Position >) : GeometryDsl < LineString >","title":"LineStringDsl"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-line-string-dsl/#functions","text":"Name Summary create [common] Content open override fun create (): LineString point [common] Content fun point (longitude: Double , latitude: Double , altitude: Double ? = null) unaryPlus [common] Content operator fun Point . unaryPlus () operator fun Position . unaryPlus ()","title":"Functions"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-line-string-dsl/#properties","text":"Name Summary bbox [common] var bbox : BoundingBox ?","title":"Properties"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-line-string-dsl/-line-string-dsl/","text":"// geojson / io.github.dellisd.spatialk.geojson.dsl / LineStringDsl / LineStringDsl LineStringDsl [common] Content fun LineStringDsl (points: MutableList < Position > = mutableListOf())","title":" line string dsl"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-line-string-dsl/-line-string-dsl/#linestringdsl","text":"[common] Content fun LineStringDsl (points: MutableList < Position > = mutableListOf())","title":"LineStringDsl"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-line-string-dsl/create/","text":"// geojson / io.github.dellisd.spatialk.geojson.dsl / LineStringDsl / create create [common] Content open override fun create (): LineString","title":"Create"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-line-string-dsl/create/#create","text":"[common] Content open override fun create (): LineString","title":"create"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-line-string-dsl/point/","text":"// geojson / io.github.dellisd.spatialk.geojson.dsl / LineStringDsl / point point [common] Content fun point (longitude: Double , latitude: Double , altitude: Double ? = null)","title":"Point"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-line-string-dsl/point/#point","text":"[common] Content fun point (longitude: Double , latitude: Double , altitude: Double ? = null)","title":"point"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-line-string-dsl/unary-plus/","text":"// geojson / io.github.dellisd.spatialk.geojson.dsl / LineStringDsl / unaryPlus unaryPlus [common] Content operator fun Position . unaryPlus () operator fun Point . unaryPlus ()","title":"Unary plus"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-line-string-dsl/unary-plus/#unaryplus","text":"[common] Content operator fun Position . unaryPlus () operator fun Point . unaryPlus ()","title":"unaryPlus"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-multi-line-string-dsl/","text":"// geojson / io.github.dellisd.spatialk.geojson.dsl / MultiLineStringDsl MultiLineStringDsl [common] class MultiLineStringDsl ( coordinates : MutableList < List < Position >>) : GeometryDsl < MultiLineString > Functions Name Summary create [common] Content open override fun create (): MultiLineString lineString [common] Content inline fun lineString (block: LineStringDsl .() -> Unit ) unaryPlus [common] Content operator fun LineString . unaryPlus () Properties Name Summary bbox [common] var bbox : BoundingBox ?","title":"Index"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-multi-line-string-dsl/#multilinestringdsl","text":"[common] class MultiLineStringDsl ( coordinates : MutableList < List < Position >>) : GeometryDsl < MultiLineString >","title":"MultiLineStringDsl"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-multi-line-string-dsl/#functions","text":"Name Summary create [common] Content open override fun create (): MultiLineString lineString [common] Content inline fun lineString (block: LineStringDsl .() -> Unit ) unaryPlus [common] Content operator fun LineString . unaryPlus ()","title":"Functions"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-multi-line-string-dsl/#properties","text":"Name Summary bbox [common] var bbox : BoundingBox ?","title":"Properties"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-multi-line-string-dsl/-multi-line-string-dsl/","text":"// geojson / io.github.dellisd.spatialk.geojson.dsl / MultiLineStringDsl / MultiLineStringDsl MultiLineStringDsl [common] Content fun MultiLineStringDsl (coordinates: MutableList < List < Position >> = mutableListOf())","title":" multi line string dsl"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-multi-line-string-dsl/-multi-line-string-dsl/#multilinestringdsl","text":"[common] Content fun MultiLineStringDsl (coordinates: MutableList < List < Position >> = mutableListOf())","title":"MultiLineStringDsl"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-multi-line-string-dsl/create/","text":"// geojson / io.github.dellisd.spatialk.geojson.dsl / MultiLineStringDsl / create create [common] Content open override fun create (): MultiLineString","title":"Create"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-multi-line-string-dsl/create/#create","text":"[common] Content open override fun create (): MultiLineString","title":"create"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-multi-line-string-dsl/line-string/","text":"// geojson / io.github.dellisd.spatialk.geojson.dsl / MultiLineStringDsl / lineString lineString [common] Content inline fun lineString (block: LineStringDsl .() -> Unit )","title":"Line string"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-multi-line-string-dsl/line-string/#linestring","text":"[common] Content inline fun lineString (block: LineStringDsl .() -> Unit )","title":"lineString"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-multi-line-string-dsl/unary-plus/","text":"// geojson / io.github.dellisd.spatialk.geojson.dsl / MultiLineStringDsl / unaryPlus unaryPlus [common] Content operator fun LineString . unaryPlus ()","title":"Unary plus"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-multi-line-string-dsl/unary-plus/#unaryplus","text":"[common] Content operator fun LineString . unaryPlus ()","title":"unaryPlus"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-multi-point-dsl/","text":"// geojson / io.github.dellisd.spatialk.geojson.dsl / MultiPointDsl MultiPointDsl [common] class MultiPointDsl ( points : MutableList < Position >) : GeometryDsl < MultiPoint > Functions Name Summary create [common] Content open override fun create (): MultiPoint point [common] Content fun point (longitude: Double , latitude: Double , altitude: Double ? = null) unaryPlus [common] Content operator fun Point . unaryPlus () operator fun Position . unaryPlus () Properties Name Summary bbox [common] var bbox : BoundingBox ?","title":"Index"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-multi-point-dsl/#multipointdsl","text":"[common] class MultiPointDsl ( points : MutableList < Position >) : GeometryDsl < MultiPoint >","title":"MultiPointDsl"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-multi-point-dsl/#functions","text":"Name Summary create [common] Content open override fun create (): MultiPoint point [common] Content fun point (longitude: Double , latitude: Double , altitude: Double ? = null) unaryPlus [common] Content operator fun Point . unaryPlus () operator fun Position . unaryPlus ()","title":"Functions"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-multi-point-dsl/#properties","text":"Name Summary bbox [common] var bbox : BoundingBox ?","title":"Properties"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-multi-point-dsl/-multi-point-dsl/","text":"// geojson / io.github.dellisd.spatialk.geojson.dsl / MultiPointDsl / MultiPointDsl MultiPointDsl [common] Content fun MultiPointDsl (points: MutableList < Position > = mutableListOf())","title":" multi point dsl"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-multi-point-dsl/-multi-point-dsl/#multipointdsl","text":"[common] Content fun MultiPointDsl (points: MutableList < Position > = mutableListOf())","title":"MultiPointDsl"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-multi-point-dsl/create/","text":"// geojson / io.github.dellisd.spatialk.geojson.dsl / MultiPointDsl / create create [common] Content open override fun create (): MultiPoint","title":"Create"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-multi-point-dsl/create/#create","text":"[common] Content open override fun create (): MultiPoint","title":"create"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-multi-point-dsl/point/","text":"// geojson / io.github.dellisd.spatialk.geojson.dsl / MultiPointDsl / point point [common] Content fun point (longitude: Double , latitude: Double , altitude: Double ? = null)","title":"Point"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-multi-point-dsl/point/#point","text":"[common] Content fun point (longitude: Double , latitude: Double , altitude: Double ? = null)","title":"point"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-multi-point-dsl/unary-plus/","text":"// geojson / io.github.dellisd.spatialk.geojson.dsl / MultiPointDsl / unaryPlus unaryPlus [common] Content operator fun Position . unaryPlus () operator fun Point . unaryPlus ()","title":"Unary plus"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-multi-point-dsl/unary-plus/#unaryplus","text":"[common] Content operator fun Position . unaryPlus () operator fun Point . unaryPlus ()","title":"unaryPlus"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-multi-polygon-dsl/","text":"// geojson / io.github.dellisd.spatialk.geojson.dsl / MultiPolygonDsl MultiPolygonDsl [common] class MultiPolygonDsl ( coordinates : MutableList < List < List < Position >>>) : GeometryDsl < MultiPolygon > Functions Name Summary create [common] Content open override fun create (): MultiPolygon polygon [common] Content inline fun polygon (block: PolygonDsl .() -> Unit ) unaryPlus [common] Content operator fun Polygon . unaryPlus () Properties Name Summary bbox [common] var bbox : BoundingBox ?","title":"Index"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-multi-polygon-dsl/#multipolygondsl","text":"[common] class MultiPolygonDsl ( coordinates : MutableList < List < List < Position >>>) : GeometryDsl < MultiPolygon >","title":"MultiPolygonDsl"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-multi-polygon-dsl/#functions","text":"Name Summary create [common] Content open override fun create (): MultiPolygon polygon [common] Content inline fun polygon (block: PolygonDsl .() -> Unit ) unaryPlus [common] Content operator fun Polygon . unaryPlus ()","title":"Functions"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-multi-polygon-dsl/#properties","text":"Name Summary bbox [common] var bbox : BoundingBox ?","title":"Properties"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-multi-polygon-dsl/-multi-polygon-dsl/","text":"// geojson / io.github.dellisd.spatialk.geojson.dsl / MultiPolygonDsl / MultiPolygonDsl MultiPolygonDsl [common] Content fun MultiPolygonDsl (coordinates: MutableList < List < List < Position >>> = mutableListOf())","title":" multi polygon dsl"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-multi-polygon-dsl/-multi-polygon-dsl/#multipolygondsl","text":"[common] Content fun MultiPolygonDsl (coordinates: MutableList < List < List < Position >>> = mutableListOf())","title":"MultiPolygonDsl"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-multi-polygon-dsl/create/","text":"// geojson / io.github.dellisd.spatialk.geojson.dsl / MultiPolygonDsl / create create [common] Content open override fun create (): MultiPolygon","title":"Create"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-multi-polygon-dsl/create/#create","text":"[common] Content open override fun create (): MultiPolygon","title":"create"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-multi-polygon-dsl/polygon/","text":"// geojson / io.github.dellisd.spatialk.geojson.dsl / MultiPolygonDsl / polygon polygon [common] Content inline fun polygon (block: PolygonDsl .() -> Unit )","title":"Polygon"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-multi-polygon-dsl/polygon/#polygon","text":"[common] Content inline fun polygon (block: PolygonDsl .() -> Unit )","title":"polygon"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-multi-polygon-dsl/unary-plus/","text":"// geojson / io.github.dellisd.spatialk.geojson.dsl / MultiPolygonDsl / unaryPlus unaryPlus [common] Content operator fun Polygon . unaryPlus ()","title":"Unary plus"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-multi-polygon-dsl/unary-plus/#unaryplus","text":"[common] Content operator fun Polygon . unaryPlus ()","title":"unaryPlus"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-point-dsl/","text":"// geojson / io.github.dellisd.spatialk.geojson.dsl / PointDsl PointDsl [common] class PointDsl ( coordinates : Position ) : GeometryDsl < Point > Functions Name Summary create [common] Content open override fun create (): Point Properties Name Summary bbox [common] var bbox : BoundingBox ?","title":"Index"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-point-dsl/#pointdsl","text":"[common] class PointDsl ( coordinates : Position ) : GeometryDsl < Point >","title":"PointDsl"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-point-dsl/#functions","text":"Name Summary create [common] Content open override fun create (): Point","title":"Functions"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-point-dsl/#properties","text":"Name Summary bbox [common] var bbox : BoundingBox ?","title":"Properties"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-point-dsl/-point-dsl/","text":"// geojson / io.github.dellisd.spatialk.geojson.dsl / PointDsl / PointDsl PointDsl [common] Content fun PointDsl (coordinates: Position )","title":" point dsl"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-point-dsl/-point-dsl/#pointdsl","text":"[common] Content fun PointDsl (coordinates: Position )","title":"PointDsl"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-point-dsl/create/","text":"// geojson / io.github.dellisd.spatialk.geojson.dsl / PointDsl / create create [common] Content open override fun create (): Point","title":"Create"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-point-dsl/create/#create","text":"[common] Content open override fun create (): Point","title":"create"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-polygon-dsl/","text":"// geojson / io.github.dellisd.spatialk.geojson.dsl / PolygonDsl PolygonDsl [common] class PolygonDsl ( coordinates : MutableList < List < Position >>) : GeometryDsl < Polygon > Types Name Summary RingDsl [common] Content inner class RingDsl ( points : MutableList < Position >) Functions Name Summary create [common] Content open override fun create (): Polygon ring [common] Content fun ring (block: PolygonDsl.RingDsl .() -> Unit ) Properties Name Summary bbox [common] var bbox : BoundingBox ?","title":"Index"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-polygon-dsl/#polygondsl","text":"[common] class PolygonDsl ( coordinates : MutableList < List < Position >>) : GeometryDsl < Polygon >","title":"PolygonDsl"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-polygon-dsl/#types","text":"Name Summary RingDsl [common] Content inner class RingDsl ( points : MutableList < Position >)","title":"Types"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-polygon-dsl/#functions","text":"Name Summary create [common] Content open override fun create (): Polygon ring [common] Content fun ring (block: PolygonDsl.RingDsl .() -> Unit )","title":"Functions"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-polygon-dsl/#properties","text":"Name Summary bbox [common] var bbox : BoundingBox ?","title":"Properties"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-polygon-dsl/-polygon-dsl/","text":"// geojson / io.github.dellisd.spatialk.geojson.dsl / PolygonDsl / PolygonDsl PolygonDsl [common] Content fun PolygonDsl (coordinates: MutableList < List < Position >> = mutableListOf())","title":" polygon dsl"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-polygon-dsl/-polygon-dsl/#polygondsl","text":"[common] Content fun PolygonDsl (coordinates: MutableList < List < Position >> = mutableListOf())","title":"PolygonDsl"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-polygon-dsl/create/","text":"// geojson / io.github.dellisd.spatialk.geojson.dsl / PolygonDsl / create create [common] Content open override fun create (): Polygon","title":"Create"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-polygon-dsl/create/#create","text":"[common] Content open override fun create (): Polygon","title":"create"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-polygon-dsl/ring/","text":"// geojson / io.github.dellisd.spatialk.geojson.dsl / PolygonDsl / ring ring [common] Content fun ring (block: PolygonDsl.RingDsl .() -> Unit )","title":"Ring"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-polygon-dsl/ring/#ring","text":"[common] Content fun ring (block: PolygonDsl.RingDsl .() -> Unit )","title":"ring"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-polygon-dsl/-ring-dsl/","text":"// geojson / io.github.dellisd.spatialk.geojson.dsl / PolygonDsl / RingDsl RingDsl [common] inner class RingDsl ( points : MutableList < Position >) Functions Name Summary complete [common] Content fun complete () lineString [common] Content inline fun lineString (block: LineStringDsl .() -> Unit ) point [common] Content fun point (longitude: Double , latitude: Double , altitude: Double ? = null) unaryPlus [common] Content operator fun LineString . unaryPlus () operator fun Point . unaryPlus () operator fun Position . unaryPlus ()","title":"Index"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-polygon-dsl/-ring-dsl/#ringdsl","text":"[common] inner class RingDsl ( points : MutableList < Position >)","title":"RingDsl"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-polygon-dsl/-ring-dsl/#functions","text":"Name Summary complete [common] Content fun complete () lineString [common] Content inline fun lineString (block: LineStringDsl .() -> Unit ) point [common] Content fun point (longitude: Double , latitude: Double , altitude: Double ? = null) unaryPlus [common] Content operator fun LineString . unaryPlus () operator fun Point . unaryPlus () operator fun Position . unaryPlus ()","title":"Functions"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-polygon-dsl/-ring-dsl/-ring-dsl/","text":"// geojson / io.github.dellisd.spatialk.geojson.dsl / PolygonDsl / RingDsl / RingDsl RingDsl [common] Content fun RingDsl (points: MutableList < Position > = mutableListOf())","title":" ring dsl"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-polygon-dsl/-ring-dsl/-ring-dsl/#ringdsl","text":"[common] Content fun RingDsl (points: MutableList < Position > = mutableListOf())","title":"RingDsl"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-polygon-dsl/-ring-dsl/complete/","text":"// geojson / io.github.dellisd.spatialk.geojson.dsl / PolygonDsl / RingDsl / complete complete [common] Content fun complete ()","title":"Complete"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-polygon-dsl/-ring-dsl/complete/#complete","text":"[common] Content fun complete ()","title":"complete"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-polygon-dsl/-ring-dsl/line-string/","text":"// geojson / io.github.dellisd.spatialk.geojson.dsl / PolygonDsl / RingDsl / lineString lineString [common] Content inline fun lineString (block: LineStringDsl .() -> Unit )","title":"Line string"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-polygon-dsl/-ring-dsl/line-string/#linestring","text":"[common] Content inline fun lineString (block: LineStringDsl .() -> Unit )","title":"lineString"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-polygon-dsl/-ring-dsl/point/","text":"// geojson / io.github.dellisd.spatialk.geojson.dsl / PolygonDsl / RingDsl / point point [common] Content fun point (longitude: Double , latitude: Double , altitude: Double ? = null)","title":"Point"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-polygon-dsl/-ring-dsl/point/#point","text":"[common] Content fun point (longitude: Double , latitude: Double , altitude: Double ? = null)","title":"point"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-polygon-dsl/-ring-dsl/unary-plus/","text":"// geojson / io.github.dellisd.spatialk.geojson.dsl / PolygonDsl / RingDsl / unaryPlus unaryPlus [common] Content operator fun Position . unaryPlus () operator fun Point . unaryPlus () operator fun LineString . unaryPlus ()","title":"Unary plus"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-polygon-dsl/-ring-dsl/unary-plus/#unaryplus","text":"[common] Content operator fun Position . unaryPlus () operator fun Point . unaryPlus () operator fun LineString . unaryPlus ()","title":"unaryPlus"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-properties-builder/","text":"// geojson / io.github.dellisd.spatialk.geojson.dsl / PropertiesBuilder PropertiesBuilder [common] class PropertiesBuilder Functions Name Summary build [common] Content fun build (): Map < String , JsonElement> put [common] Content fun put (key: String , value: Boolean ?) fun put (key: String , value: Number ?) fun put (key: String , value: String ?) fun put (key: String , value: JsonElement)","title":"Index"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-properties-builder/#propertiesbuilder","text":"[common] class PropertiesBuilder","title":"PropertiesBuilder"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-properties-builder/#functions","text":"Name Summary build [common] Content fun build (): Map < String , JsonElement> put [common] Content fun put (key: String , value: Boolean ?) fun put (key: String , value: Number ?) fun put (key: String , value: String ?) fun put (key: String , value: JsonElement)","title":"Functions"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-properties-builder/-properties-builder/","text":"// geojson / io.github.dellisd.spatialk.geojson.dsl / PropertiesBuilder / PropertiesBuilder PropertiesBuilder [common] Content fun PropertiesBuilder ()","title":" properties builder"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-properties-builder/-properties-builder/#propertiesbuilder","text":"[common] Content fun PropertiesBuilder ()","title":"PropertiesBuilder"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-properties-builder/build/","text":"// geojson / io.github.dellisd.spatialk.geojson.dsl / PropertiesBuilder / build build [common] Content fun build (): Map < String , JsonElement>","title":"Build"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-properties-builder/build/#build","text":"[common] Content fun build (): Map < String , JsonElement>","title":"build"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-properties-builder/put/","text":"// geojson / io.github.dellisd.spatialk.geojson.dsl / PropertiesBuilder / put put [common] Content fun put (key: String , value: String ?) fun put (key: String , value: Number ?) fun put (key: String , value: Boolean ?) fun put (key: String , value: JsonElement)","title":"Put"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.dsl/-properties-builder/put/#put","text":"[common] Content fun put (key: String , value: String ?) fun put (key: String , value: Number ?) fun put (key: String , value: Boolean ?) fun put (key: String , value: JsonElement)","title":"put"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.serialization/","text":"// geojson / io.github.dellisd.spatialk.geojson.serialization Package io.github.dellisd.spatialk.geojson.serialization Types Name Summary BoundingBoxSerializer [common] Content object BoundingBoxSerializer : KSerializer< BoundingBox > FeatureCollectionSerializer [common] Content object FeatureCollectionSerializer : JsonSerializer < FeatureCollection > FeatureSerializer [common] Content object FeatureSerializer : JsonSerializer < Feature > GeometrySerializer [common] Content object GeometrySerializer : KSerializer< Geometry > PositionSerializer [common] Content object PositionSerializer : KSerializer< Position > More info KSerializer implementation for implementations of the Position interface.","title":"Index"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.serialization/#package-iogithubdellisdspatialkgeojsonserialization","text":"","title":"Package io.github.dellisd.spatialk.geojson.serialization"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.serialization/#types","text":"Name Summary BoundingBoxSerializer [common] Content object BoundingBoxSerializer : KSerializer< BoundingBox > FeatureCollectionSerializer [common] Content object FeatureCollectionSerializer : JsonSerializer < FeatureCollection > FeatureSerializer [common] Content object FeatureSerializer : JsonSerializer < Feature > GeometrySerializer [common] Content object GeometrySerializer : KSerializer< Geometry > PositionSerializer [common] Content object PositionSerializer : KSerializer< Position > More info KSerializer implementation for implementations of the Position interface.","title":"Types"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.serialization/-bounding-box-serializer/","text":"// geojson / io.github.dellisd.spatialk.geojson.serialization / BoundingBoxSerializer BoundingBoxSerializer [common] object BoundingBoxSerializer : KSerializer< BoundingBox > Functions Name Summary deserialize [common] Content open override fun deserialize (decoder: Decoder): BoundingBox serialize [common] Content open override fun serialize (encoder: Encoder, value: BoundingBox ) Properties Name Summary descriptor [common] open override val descriptor : SerialDescriptor","title":"Index"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.serialization/-bounding-box-serializer/#boundingboxserializer","text":"[common] object BoundingBoxSerializer : KSerializer< BoundingBox >","title":"BoundingBoxSerializer"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.serialization/-bounding-box-serializer/#functions","text":"Name Summary deserialize [common] Content open override fun deserialize (decoder: Decoder): BoundingBox serialize [common] Content open override fun serialize (encoder: Encoder, value: BoundingBox )","title":"Functions"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.serialization/-bounding-box-serializer/#properties","text":"Name Summary descriptor [common] open override val descriptor : SerialDescriptor","title":"Properties"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.serialization/-bounding-box-serializer/descriptor/","text":"// geojson / io.github.dellisd.spatialk.geojson.serialization / BoundingBoxSerializer / descriptor descriptor [common] Content open override val descriptor : SerialDescriptor","title":"Descriptor"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.serialization/-bounding-box-serializer/descriptor/#descriptor","text":"[common] Content open override val descriptor : SerialDescriptor","title":"descriptor"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.serialization/-bounding-box-serializer/deserialize/","text":"// geojson / io.github.dellisd.spatialk.geojson.serialization / BoundingBoxSerializer / deserialize deserialize [common] Content open override fun deserialize (decoder: Decoder): BoundingBox","title":"Deserialize"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.serialization/-bounding-box-serializer/deserialize/#deserialize","text":"[common] Content open override fun deserialize (decoder: Decoder): BoundingBox","title":"deserialize"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.serialization/-bounding-box-serializer/serialize/","text":"// geojson / io.github.dellisd.spatialk.geojson.serialization / BoundingBoxSerializer / serialize serialize [common] Content open override fun serialize (encoder: Encoder, value: BoundingBox )","title":"Serialize"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.serialization/-bounding-box-serializer/serialize/#serialize","text":"[common] Content open override fun serialize (encoder: Encoder, value: BoundingBox )","title":"serialize"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.serialization/-feature-collection-serializer/","text":"// geojson / io.github.dellisd.spatialk.geojson.serialization / FeatureCollectionSerializer FeatureCollectionSerializer [common] object FeatureCollectionSerializer : JsonSerializer < FeatureCollection > Functions Name Summary deserialize [common] Content open override fun deserialize (input: JsonDecoder): FeatureCollection open override fun deserialize (decoder: Decoder): FeatureCollection serialize [common] Content open override fun serialize (output: JsonEncoder, value: FeatureCollection ) open override fun serialize (encoder: Encoder, value: FeatureCollection ) Properties Name Summary descriptor [common] open override val descriptor : SerialDescriptor","title":"Index"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.serialization/-feature-collection-serializer/#featurecollectionserializer","text":"[common] object FeatureCollectionSerializer : JsonSerializer < FeatureCollection >","title":"FeatureCollectionSerializer"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.serialization/-feature-collection-serializer/#functions","text":"Name Summary deserialize [common] Content open override fun deserialize (input: JsonDecoder): FeatureCollection open override fun deserialize (decoder: Decoder): FeatureCollection serialize [common] Content open override fun serialize (output: JsonEncoder, value: FeatureCollection ) open override fun serialize (encoder: Encoder, value: FeatureCollection )","title":"Functions"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.serialization/-feature-collection-serializer/#properties","text":"Name Summary descriptor [common] open override val descriptor : SerialDescriptor","title":"Properties"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.serialization/-feature-collection-serializer/descriptor/","text":"// geojson / io.github.dellisd.spatialk.geojson.serialization / FeatureCollectionSerializer / descriptor descriptor [common] Content open override val descriptor : SerialDescriptor","title":"Descriptor"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.serialization/-feature-collection-serializer/descriptor/#descriptor","text":"[common] Content open override val descriptor : SerialDescriptor","title":"descriptor"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.serialization/-feature-collection-serializer/deserialize/","text":"// geojson / io.github.dellisd.spatialk.geojson.serialization / FeatureCollectionSerializer / deserialize deserialize [common] Content open override fun deserialize (input: JsonDecoder): FeatureCollection","title":"Deserialize"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.serialization/-feature-collection-serializer/deserialize/#deserialize","text":"[common] Content open override fun deserialize (input: JsonDecoder): FeatureCollection","title":"deserialize"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.serialization/-feature-collection-serializer/serialize/","text":"// geojson / io.github.dellisd.spatialk.geojson.serialization / FeatureCollectionSerializer / serialize serialize [common] Content open override fun serialize (output: JsonEncoder, value: FeatureCollection )","title":"Serialize"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.serialization/-feature-collection-serializer/serialize/#serialize","text":"[common] Content open override fun serialize (output: JsonEncoder, value: FeatureCollection )","title":"serialize"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.serialization/-feature-serializer/","text":"// geojson / io.github.dellisd.spatialk.geojson.serialization / FeatureSerializer FeatureSerializer [common] object FeatureSerializer : JsonSerializer < Feature > Functions Name Summary deserialize [common] Content open override fun deserialize (input: JsonDecoder): Feature open override fun deserialize (decoder: Decoder): Feature serialize [common] Content open override fun serialize (output: JsonEncoder, value: Feature ) open override fun serialize (encoder: Encoder, value: Feature ) Properties Name Summary descriptor [common] open override val descriptor : SerialDescriptor","title":"Index"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.serialization/-feature-serializer/#featureserializer","text":"[common] object FeatureSerializer : JsonSerializer < Feature >","title":"FeatureSerializer"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.serialization/-feature-serializer/#functions","text":"Name Summary deserialize [common] Content open override fun deserialize (input: JsonDecoder): Feature open override fun deserialize (decoder: Decoder): Feature serialize [common] Content open override fun serialize (output: JsonEncoder, value: Feature ) open override fun serialize (encoder: Encoder, value: Feature )","title":"Functions"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.serialization/-feature-serializer/#properties","text":"Name Summary descriptor [common] open override val descriptor : SerialDescriptor","title":"Properties"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.serialization/-feature-serializer/descriptor/","text":"// geojson / io.github.dellisd.spatialk.geojson.serialization / FeatureSerializer / descriptor descriptor [common] Content open override val descriptor : SerialDescriptor","title":"Descriptor"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.serialization/-feature-serializer/descriptor/#descriptor","text":"[common] Content open override val descriptor : SerialDescriptor","title":"descriptor"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.serialization/-feature-serializer/deserialize/","text":"// geojson / io.github.dellisd.spatialk.geojson.serialization / FeatureSerializer / deserialize deserialize [common] Content open override fun deserialize (input: JsonDecoder): Feature","title":"Deserialize"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.serialization/-feature-serializer/deserialize/#deserialize","text":"[common] Content open override fun deserialize (input: JsonDecoder): Feature","title":"deserialize"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.serialization/-feature-serializer/serialize/","text":"// geojson / io.github.dellisd.spatialk.geojson.serialization / FeatureSerializer / serialize serialize [common] Content open override fun serialize (output: JsonEncoder, value: Feature )","title":"Serialize"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.serialization/-feature-serializer/serialize/#serialize","text":"[common] Content open override fun serialize (output: JsonEncoder, value: Feature )","title":"serialize"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.serialization/-geometry-serializer/","text":"// geojson / io.github.dellisd.spatialk.geojson.serialization / GeometrySerializer GeometrySerializer [common] object GeometrySerializer : KSerializer< Geometry > Functions Name Summary deserialize [common] Content open override fun deserialize (decoder: Decoder): Geometry serialize [common] Content open override fun serialize (encoder: Encoder, value: Geometry ) Properties Name Summary descriptor [common] open override val descriptor : SerialDescriptor","title":"Index"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.serialization/-geometry-serializer/#geometryserializer","text":"[common] object GeometrySerializer : KSerializer< Geometry >","title":"GeometrySerializer"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.serialization/-geometry-serializer/#functions","text":"Name Summary deserialize [common] Content open override fun deserialize (decoder: Decoder): Geometry serialize [common] Content open override fun serialize (encoder: Encoder, value: Geometry )","title":"Functions"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.serialization/-geometry-serializer/#properties","text":"Name Summary descriptor [common] open override val descriptor : SerialDescriptor","title":"Properties"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.serialization/-geometry-serializer/descriptor/","text":"// geojson / io.github.dellisd.spatialk.geojson.serialization / GeometrySerializer / descriptor descriptor [common] Content open override val descriptor : SerialDescriptor","title":"Descriptor"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.serialization/-geometry-serializer/descriptor/#descriptor","text":"[common] Content open override val descriptor : SerialDescriptor","title":"descriptor"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.serialization/-geometry-serializer/deserialize/","text":"// geojson / io.github.dellisd.spatialk.geojson.serialization / GeometrySerializer / deserialize deserialize [common] Content open override fun deserialize (decoder: Decoder): Geometry","title":"Deserialize"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.serialization/-geometry-serializer/deserialize/#deserialize","text":"[common] Content open override fun deserialize (decoder: Decoder): Geometry","title":"deserialize"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.serialization/-geometry-serializer/serialize/","text":"// geojson / io.github.dellisd.spatialk.geojson.serialization / GeometrySerializer / serialize serialize [common] Content open override fun serialize (encoder: Encoder, value: Geometry )","title":"Serialize"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.serialization/-geometry-serializer/serialize/#serialize","text":"[common] Content open override fun serialize (encoder: Encoder, value: Geometry )","title":"serialize"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.serialization/-position-serializer/","text":"// geojson / io.github.dellisd.spatialk.geojson.serialization / PositionSerializer PositionSerializer [common] object PositionSerializer : KSerializer< Position > KSerializer implementation for implementations of the Position interface. Serializes a Position down to an array of numbers as specified by GeoJSON. This serializer only works for converting to and from JSON. A position maps to [longitude, latitude, altitude]. A position's altitude is only included in the array if it is not null. An instance of the serializer can be obtained from the Position.Companion.serializer extension function. See also common Position.Companion.serializer Functions Name Summary deserialize [common] Content open override fun deserialize (decoder: Decoder): Position serialize [common] Content open override fun serialize (encoder: Encoder, value: Position ) Properties Name Summary descriptor [common] open override val descriptor : SerialDescriptor","title":"Index"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.serialization/-position-serializer/#positionserializer","text":"[common] object PositionSerializer : KSerializer< Position > KSerializer implementation for implementations of the Position interface. Serializes a Position down to an array of numbers as specified by GeoJSON. This serializer only works for converting to and from JSON. A position maps to [longitude, latitude, altitude]. A position's altitude is only included in the array if it is not null. An instance of the serializer can be obtained from the Position.Companion.serializer extension function.","title":"PositionSerializer"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.serialization/-position-serializer/#see-also","text":"common Position.Companion.serializer","title":"See also"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.serialization/-position-serializer/#functions","text":"Name Summary deserialize [common] Content open override fun deserialize (decoder: Decoder): Position serialize [common] Content open override fun serialize (encoder: Encoder, value: Position )","title":"Functions"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.serialization/-position-serializer/#properties","text":"Name Summary descriptor [common] open override val descriptor : SerialDescriptor","title":"Properties"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.serialization/-position-serializer/descriptor/","text":"// geojson / io.github.dellisd.spatialk.geojson.serialization / PositionSerializer / descriptor descriptor [common] Content open override val descriptor : SerialDescriptor","title":"Descriptor"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.serialization/-position-serializer/descriptor/#descriptor","text":"[common] Content open override val descriptor : SerialDescriptor","title":"descriptor"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.serialization/-position-serializer/deserialize/","text":"// geojson / io.github.dellisd.spatialk.geojson.serialization / PositionSerializer / deserialize deserialize [common] Content open override fun deserialize (decoder: Decoder): Position","title":"Deserialize"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.serialization/-position-serializer/deserialize/#deserialize","text":"[common] Content open override fun deserialize (decoder: Decoder): Position","title":"deserialize"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.serialization/-position-serializer/serialize/","text":"// geojson / io.github.dellisd.spatialk.geojson.serialization / PositionSerializer / serialize serialize [common] Content open override fun serialize (encoder: Encoder, value: Position )","title":"Serialize"},{"location":"api/geojson/geojson/io.github.dellisd.spatialk.geojson.serialization/-position-serializer/serialize/#serialize","text":"[common] Content open override fun serialize (encoder: Encoder, value: Position )","title":"serialize"},{"location":"api/turf/","text":"// turf turf Packages Name io.github.dellisd.spatialk.turf","title":"turf"},{"location":"api/turf/#turf","text":"","title":"turf"},{"location":"api/turf/#packages","text":"Name io.github.dellisd.spatialk.turf","title":"Packages"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/","text":"// turf / io.github.dellisd.spatialk.turf Package io.github.dellisd.spatialk.turf Types Name Summary ExperimentalTurfApi [common] Content @ Target (allowedTargets = [ AnnotationTarget.CLASS , AnnotationTarget.FUNCTION ]) annotation class ExperimentalTurfApi NearestPointOnLineResult [common] Content data class NearestPointOnLineResult ( point : Position , distance : Double , location : Double , index : Int ) More info Result values from nearestPointOnLine . Units [common] Content enum Units : Enum < Units > More info Supported units of measurement in Turf. Functions Name Summary along [common] Content @ JvmOverloads () fun along (line: LineString , distance: Double , units: Units = Units.Kilometers): Position More info Takes a LineString and returns a position at a specified distance along the line. area [common] Content fun area (geometry: Geometry ): Double More info Takes a geometry and returns its area in square meters. bbox [common] Content fun bbox (feature: Feature ): BoundingBox ? More info Takes a feature and calculates the bbox of the feature's geometry, and returns a bounding box. [common] Content fun bbox (featureCollection: FeatureCollection ): BoundingBox More info Takes a feature collection and calculates a bbox that covers all features in the collection. [common] Content fun bbox (geometry: Geometry ): BoundingBox fun bbox (geometry: LineString ): BoundingBox fun bbox (geometry: MultiLineString ): BoundingBox fun bbox (geometry: MultiPoint ): BoundingBox fun bbox (geometry: MultiPolygon ): BoundingBox fun bbox (geometry: Point ): BoundingBox fun bbox (geometry: Polygon ): BoundingBox More info Takes a geometry and calculates the bbox of all input features, and returns a bounding box. bboxPolygon [common] Content fun bboxPolygon (bbox: BoundingBox ): Polygon More info Takes a bbox and returns an equivalent Polygon . bearing [common] Content @ JvmOverloads () fun bearing (start: Position , end: Position , final: Boolean = false): Double More info Takes two positions ( start , end ) and finds the geographic bearing between them, i.e. bearingToAzimuth [common] Content fun bearingToAzimuth (bearing: Double ): Double More info Converts any bearing angle from the north line direction (positive clockwise) and returns an angle between 0-360 degrees (positive clockwise), 0 being the north line booleanPointInPolygon [common] Content @ JvmOverloads () fun booleanPointInPolygon (point: Point , polygon: MultiPolygon , ignoreBoundary: Boolean = false): Boolean More info Takes a Point and a MultiPolygon and determines if the point resides inside the polygon. [common] Content @ JvmOverloads () fun booleanPointInPolygon (point: Point , polygon: Polygon , ignoreBoundary: Boolean = false): Boolean More info Takes a Point and a Polygon and determines if the point resides inside the polygon. convertArea [common] Content fun convertArea (area: Double , from: Units = Units.Meters, to: Units = Units.Kilometers): Double More info Converts an area to the requested unit. convertLength [common] Content fun convertLength (length: Double , from: Units = Units.Meters, to: Units = Units.Kilometers): Double More info Converts a length to the requested unit coordAll [common] Content fun Feature . coordAll (): List < Position >? fun FeatureCollection . coordAll (): fun Geometry . coordAll (): List < Position > fun GeometryCollection . coordAll (): fun LineString . coordAll (): List < Position > fun MultiLineString . coordAll (): fun MultiPoint . coordAll (): List < Position > fun MultiPolygon . coordAll (): fun Point . coordAll (): fun Polygon . coordAll (): destination [common] Content @ JvmOverloads () fun destination (origin: Position , distance: Double , bearing: Double , units: Units = Units.Kilometers): Position More info Takes a position and calculates the location of a destination position given a distance in degrees, radians, miles, or kilometers; and bearing in degrees. distance [common] Content @ JvmOverloads () fun distance (from: Position , to: Position , units: Units = Units.Kilometers): Double More info Calculates the distance between two positions. length [common] Content fun length (lineString: LineString , units: Units ): Double More info Calculates the length of the given LineString in the given Units . [common] Content fun length (multiLineString: MultiLineString , units: Units ): Double More info Calculates the combined length of all LineString s from the given MultiLineString in the given Units . [common] Content fun length (multiPolygon: MultiPolygon , units: Units ): Double More info Calculates the combined length of perimeter the Polygon s in the MultiPolygon in the given Units . [common] Content fun length (polygon: Polygon , units: Units ): Double More info Calculates the length of perimeter the given Polygon in the given Units . lengthToDegrees [common] Content fun lengthToDegrees (distance: Double , units: Units = Units.Kilometers): More info Convert a distance measurement (assuming a spherical Earth) from a real-world unit into degrees. lengthToRadians [common] Content fun lengthToRadians (distance: Double , units: Units = Units.Kilometers): Double More info Convert a distance measurement (assuming a spherical Earth) from a real-world unit into radians. lineIntersect [common] Content fun lineIntersect (line1: LineString , line2: LineString ): List < Position > More info Returns intersecting points between two LineString s. lineSlice [common] Content fun lineSlice (start: Position , stop: Position , line: LineString ): LineString More info Takes a LineString , a start and a stop Position and returns a subsection of the line between those points. midpoint [common] Content fun midpoint (point1: Position , point2: Position ): Position More info Takes two Position s and returns a point midway between them. nearestPointOnLine [common] Content fun nearestPointOnLine (line: LineString , point: Position , units: Units = Units.Kilometers): NearestPointOnLineResult More info Finds the closest Position along a LineString to a given position [common] Content fun nearestPointOnLine (lines: MultiLineString , point: Position , units: Units = Units.Kilometers): NearestPointOnLineResult More info Finds the closest Position along a MultiLineString to a given position radiansToLength [common] Content fun radiansToLength (radians: Double , units: Units = Units.Kilometers): Double More info Convert a distance measurement (assuming a spherical Earth) from radians to a more friendly unit. toPolygon [common] Content fun BoundingBox . toPolygon (): Polygon Properties Name Summary AREA_EARTH_RADIUS [common] const val AREA_EARTH_RADIUS : Int = 6378137 EARTH_RADIUS [common] const val EARTH_RADIUS : Double = 6371008.8Radius of the Earth used with the Harvesine formula.","title":"Index"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/#package-iogithubdellisdspatialkturf","text":"","title":"Package io.github.dellisd.spatialk.turf"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/#types","text":"Name Summary ExperimentalTurfApi [common] Content @ Target (allowedTargets = [ AnnotationTarget.CLASS , AnnotationTarget.FUNCTION ]) annotation class ExperimentalTurfApi NearestPointOnLineResult [common] Content data class NearestPointOnLineResult ( point : Position , distance : Double , location : Double , index : Int ) More info Result values from nearestPointOnLine . Units [common] Content enum Units : Enum < Units > More info Supported units of measurement in Turf.","title":"Types"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/#functions","text":"Name Summary along [common] Content @ JvmOverloads () fun along (line: LineString , distance: Double , units: Units = Units.Kilometers): Position More info Takes a LineString and returns a position at a specified distance along the line. area [common] Content fun area (geometry: Geometry ): Double More info Takes a geometry and returns its area in square meters. bbox [common] Content fun bbox (feature: Feature ): BoundingBox ? More info Takes a feature and calculates the bbox of the feature's geometry, and returns a bounding box. [common] Content fun bbox (featureCollection: FeatureCollection ): BoundingBox More info Takes a feature collection and calculates a bbox that covers all features in the collection. [common] Content fun bbox (geometry: Geometry ): BoundingBox fun bbox (geometry: LineString ): BoundingBox fun bbox (geometry: MultiLineString ): BoundingBox fun bbox (geometry: MultiPoint ): BoundingBox fun bbox (geometry: MultiPolygon ): BoundingBox fun bbox (geometry: Point ): BoundingBox fun bbox (geometry: Polygon ): BoundingBox More info Takes a geometry and calculates the bbox of all input features, and returns a bounding box. bboxPolygon [common] Content fun bboxPolygon (bbox: BoundingBox ): Polygon More info Takes a bbox and returns an equivalent Polygon . bearing [common] Content @ JvmOverloads () fun bearing (start: Position , end: Position , final: Boolean = false): Double More info Takes two positions ( start , end ) and finds the geographic bearing between them, i.e. bearingToAzimuth [common] Content fun bearingToAzimuth (bearing: Double ): Double More info Converts any bearing angle from the north line direction (positive clockwise) and returns an angle between 0-360 degrees (positive clockwise), 0 being the north line booleanPointInPolygon [common] Content @ JvmOverloads () fun booleanPointInPolygon (point: Point , polygon: MultiPolygon , ignoreBoundary: Boolean = false): Boolean More info Takes a Point and a MultiPolygon and determines if the point resides inside the polygon. [common] Content @ JvmOverloads () fun booleanPointInPolygon (point: Point , polygon: Polygon , ignoreBoundary: Boolean = false): Boolean More info Takes a Point and a Polygon and determines if the point resides inside the polygon. convertArea [common] Content fun convertArea (area: Double , from: Units = Units.Meters, to: Units = Units.Kilometers): Double More info Converts an area to the requested unit. convertLength [common] Content fun convertLength (length: Double , from: Units = Units.Meters, to: Units = Units.Kilometers): Double More info Converts a length to the requested unit coordAll [common] Content fun Feature . coordAll (): List < Position >? fun FeatureCollection . coordAll (): fun Geometry . coordAll (): List < Position > fun GeometryCollection . coordAll (): fun LineString . coordAll (): List < Position > fun MultiLineString . coordAll (): fun MultiPoint . coordAll (): List < Position > fun MultiPolygon . coordAll (): fun Point . coordAll (): fun Polygon . coordAll (): destination [common] Content @ JvmOverloads () fun destination (origin: Position , distance: Double , bearing: Double , units: Units = Units.Kilometers): Position More info Takes a position and calculates the location of a destination position given a distance in degrees, radians, miles, or kilometers; and bearing in degrees. distance [common] Content @ JvmOverloads () fun distance (from: Position , to: Position , units: Units = Units.Kilometers): Double More info Calculates the distance between two positions. length [common] Content fun length (lineString: LineString , units: Units ): Double More info Calculates the length of the given LineString in the given Units . [common] Content fun length (multiLineString: MultiLineString , units: Units ): Double More info Calculates the combined length of all LineString s from the given MultiLineString in the given Units . [common] Content fun length (multiPolygon: MultiPolygon , units: Units ): Double More info Calculates the combined length of perimeter the Polygon s in the MultiPolygon in the given Units . [common] Content fun length (polygon: Polygon , units: Units ): Double More info Calculates the length of perimeter the given Polygon in the given Units . lengthToDegrees [common] Content fun lengthToDegrees (distance: Double , units: Units = Units.Kilometers): More info Convert a distance measurement (assuming a spherical Earth) from a real-world unit into degrees. lengthToRadians [common] Content fun lengthToRadians (distance: Double , units: Units = Units.Kilometers): Double More info Convert a distance measurement (assuming a spherical Earth) from a real-world unit into radians. lineIntersect [common] Content fun lineIntersect (line1: LineString , line2: LineString ): List < Position > More info Returns intersecting points between two LineString s. lineSlice [common] Content fun lineSlice (start: Position , stop: Position , line: LineString ): LineString More info Takes a LineString , a start and a stop Position and returns a subsection of the line between those points. midpoint [common] Content fun midpoint (point1: Position , point2: Position ): Position More info Takes two Position s and returns a point midway between them. nearestPointOnLine [common] Content fun nearestPointOnLine (line: LineString , point: Position , units: Units = Units.Kilometers): NearestPointOnLineResult More info Finds the closest Position along a LineString to a given position [common] Content fun nearestPointOnLine (lines: MultiLineString , point: Position , units: Units = Units.Kilometers): NearestPointOnLineResult More info Finds the closest Position along a MultiLineString to a given position radiansToLength [common] Content fun radiansToLength (radians: Double , units: Units = Units.Kilometers): Double More info Convert a distance measurement (assuming a spherical Earth) from radians to a more friendly unit. toPolygon [common] Content fun BoundingBox . toPolygon (): Polygon","title":"Functions"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/#properties","text":"Name Summary AREA_EARTH_RADIUS [common] const val AREA_EARTH_RADIUS : Int = 6378137 EARTH_RADIUS [common] const val EARTH_RADIUS : Double = 6371008.8Radius of the Earth used with the Harvesine formula.","title":"Properties"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-a-r-e-a_-e-a-r-t-h_-r-a-d-i-u-s/","text":"// turf / io.github.dellisd.spatialk.turf / AREA_EARTH_RADIUS AREA_EARTH_RADIUS [common] Content const val AREA_EARTH_RADIUS : Int = 6378137","title":" a r e a  e a r t h  r a d i u s"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-a-r-e-a_-e-a-r-t-h_-r-a-d-i-u-s/#area_earth_radius","text":"[common] Content const val AREA_EARTH_RADIUS : Int = 6378137","title":"AREA_EARTH_RADIUS"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-e-a-r-t-h_-r-a-d-i-u-s/","text":"// turf / io.github.dellisd.spatialk.turf / EARTH_RADIUS EARTH_RADIUS [common] Content const val EARTH_RADIUS : Double = 6371008.8 More info Radius of the Earth used with the Harvesine formula. Approximated using a spherical (non-ellipsoid) Earth.","title":" e a r t h  r a d i u s"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-e-a-r-t-h_-r-a-d-i-u-s/#earth_radius","text":"[common] Content const val EARTH_RADIUS : Double = 6371008.8 More info Radius of the Earth used with the Harvesine formula. Approximated using a spherical (non-ellipsoid) Earth.","title":"EARTH_RADIUS"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/along/","text":"// turf / io.github.dellisd.spatialk.turf / along along [common] Content @ JvmOverloads () fun along (line: LineString , distance: Double , units: Units = Units.Kilometers): Position More info Takes a LineString and returns a position at a specified distance along the line. Return A position distance along the line Parameters common line input line distance distance along the line units units of distance","title":"Along"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/along/#along","text":"[common] Content @ JvmOverloads () fun along (line: LineString , distance: Double , units: Units = Units.Kilometers): Position More info Takes a LineString and returns a position at a specified distance along the line.","title":"along"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/along/#return","text":"A position distance along the line","title":"Return"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/along/#parameters","text":"common line input line distance distance along the line units units of distance","title":"Parameters"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/area/","text":"// turf / io.github.dellisd.spatialk.turf / area area [common] Content fun area (geometry: Geometry ): Double More info Takes a geometry and returns its area in square meters. Return area in square meters Parameters common geometry input geometry","title":"Area"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/area/#area","text":"[common] Content fun area (geometry: Geometry ): Double More info Takes a geometry and returns its area in square meters.","title":"area"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/area/#return","text":"area in square meters","title":"Return"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/area/#parameters","text":"common geometry input geometry","title":"Parameters"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/bbox-polygon/","text":"// turf / io.github.dellisd.spatialk.turf / bboxPolygon bboxPolygon [common] Content fun bboxPolygon (bbox: BoundingBox ): Polygon More info Takes a bbox and returns an equivalent Polygon . Return The bounding box as a polygon See also common BoundingBox.toPolygon Parameters common bbox The bounding box to convert to a Polygon.","title":"Bbox polygon"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/bbox-polygon/#bboxpolygon","text":"[common] Content fun bboxPolygon (bbox: BoundingBox ): Polygon More info Takes a bbox and returns an equivalent Polygon .","title":"bboxPolygon"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/bbox-polygon/#return","text":"The bounding box as a polygon","title":"Return"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/bbox-polygon/#see-also","text":"common BoundingBox.toPolygon","title":"See also"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/bbox-polygon/#parameters","text":"common bbox The bounding box to convert to a Polygon.","title":"Parameters"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/bbox/","text":"// turf / io.github.dellisd.spatialk.turf / bbox bbox [common] Content fun bbox (geometry: Geometry ): BoundingBox More info Takes a geometry and calculates the bbox of all input features, and returns a bounding box. Return A BoundingBox that covers the geometry. Parameters common geometry The geometry to compute a bounding box for. [common] Content fun bbox (geometry: Point ): BoundingBox More info Takes a geometry and calculates the bbox of all input features, and returns a bounding box. Return A BoundingBox that covers the geometry. Parameters common geometry The geometry to compute a bounding box for. [common] Content fun bbox (geometry: MultiPoint ): BoundingBox More info Takes a geometry and calculates the bbox of all input features, and returns a bounding box. Return A BoundingBox that covers the geometry. Parameters common geometry The geometry to compute a bounding box for. [common] Content fun bbox (geometry: LineString ): BoundingBox More info Takes a geometry and calculates the bbox of all input features, and returns a bounding box. Return A BoundingBox that covers the geometry. Parameters common geometry The geometry to compute a bounding box for. [common] Content fun bbox (geometry: MultiLineString ): BoundingBox More info Takes a geometry and calculates the bbox of all input features, and returns a bounding box. Return A BoundingBox that covers the geometry. Parameters common geometry The geometry to compute a bounding box for. [common] Content fun bbox (geometry: Polygon ): BoundingBox More info Takes a geometry and calculates the bbox of all input features, and returns a bounding box. Return A BoundingBox that covers the geometry. Parameters common geometry The geometry to compute a bounding box for. [common] Content fun bbox (geometry: MultiPolygon ): BoundingBox More info Takes a geometry and calculates the bbox of all input features, and returns a bounding box. Return A BoundingBox that covers the geometry. Parameters common geometry The geometry to compute a bounding box for. [common] Content fun bbox (feature: Feature ): BoundingBox ? More info Takes a feature and calculates the bbox of the feature's geometry, and returns a bounding box. Return A BoundingBox that covers the geometry. Parameters common feature The feature to compute a bounding box for. [common] Content fun bbox (featureCollection: FeatureCollection ): BoundingBox More info Takes a feature collection and calculates a bbox that covers all features in the collection. Return A BoundingBox that covers the geometry. Parameters common featureCollection The collection of features to compute a bounding box for.","title":"Bbox"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/bbox/#bbox","text":"[common] Content fun bbox (geometry: Geometry ): BoundingBox More info Takes a geometry and calculates the bbox of all input features, and returns a bounding box.","title":"bbox"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/bbox/#return","text":"A BoundingBox that covers the geometry.","title":"Return"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/bbox/#parameters","text":"common geometry The geometry to compute a bounding box for. [common] Content fun bbox (geometry: Point ): BoundingBox More info Takes a geometry and calculates the bbox of all input features, and returns a bounding box.","title":"Parameters"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/bbox/#return_1","text":"A BoundingBox that covers the geometry.","title":"Return"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/bbox/#parameters_1","text":"common geometry The geometry to compute a bounding box for. [common] Content fun bbox (geometry: MultiPoint ): BoundingBox More info Takes a geometry and calculates the bbox of all input features, and returns a bounding box.","title":"Parameters"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/bbox/#return_2","text":"A BoundingBox that covers the geometry.","title":"Return"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/bbox/#parameters_2","text":"common geometry The geometry to compute a bounding box for. [common] Content fun bbox (geometry: LineString ): BoundingBox More info Takes a geometry and calculates the bbox of all input features, and returns a bounding box.","title":"Parameters"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/bbox/#return_3","text":"A BoundingBox that covers the geometry.","title":"Return"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/bbox/#parameters_3","text":"common geometry The geometry to compute a bounding box for. [common] Content fun bbox (geometry: MultiLineString ): BoundingBox More info Takes a geometry and calculates the bbox of all input features, and returns a bounding box.","title":"Parameters"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/bbox/#return_4","text":"A BoundingBox that covers the geometry.","title":"Return"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/bbox/#parameters_4","text":"common geometry The geometry to compute a bounding box for. [common] Content fun bbox (geometry: Polygon ): BoundingBox More info Takes a geometry and calculates the bbox of all input features, and returns a bounding box.","title":"Parameters"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/bbox/#return_5","text":"A BoundingBox that covers the geometry.","title":"Return"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/bbox/#parameters_5","text":"common geometry The geometry to compute a bounding box for. [common] Content fun bbox (geometry: MultiPolygon ): BoundingBox More info Takes a geometry and calculates the bbox of all input features, and returns a bounding box.","title":"Parameters"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/bbox/#return_6","text":"A BoundingBox that covers the geometry.","title":"Return"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/bbox/#parameters_6","text":"common geometry The geometry to compute a bounding box for. [common] Content fun bbox (feature: Feature ): BoundingBox ? More info Takes a feature and calculates the bbox of the feature's geometry, and returns a bounding box.","title":"Parameters"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/bbox/#return_7","text":"A BoundingBox that covers the geometry.","title":"Return"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/bbox/#parameters_7","text":"common feature The feature to compute a bounding box for. [common] Content fun bbox (featureCollection: FeatureCollection ): BoundingBox More info Takes a feature collection and calculates a bbox that covers all features in the collection.","title":"Parameters"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/bbox/#return_8","text":"A BoundingBox that covers the geometry.","title":"Return"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/bbox/#parameters_8","text":"common featureCollection The collection of features to compute a bounding box for.","title":"Parameters"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/bearing-to-azimuth/","text":"// turf / io.github.dellisd.spatialk.turf / bearingToAzimuth bearingToAzimuth [common] Content fun bearingToAzimuth (bearing: Double ): Double More info Converts any bearing angle from the north line direction (positive clockwise) and returns an angle between 0-360 degrees (positive clockwise), 0 being the north line Return angle between 0 and 360 degrees Parameters common bearing angle, between -180 and +180 degrees","title":"Bearing to azimuth"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/bearing-to-azimuth/#bearingtoazimuth","text":"[common] Content fun bearingToAzimuth (bearing: Double ): Double More info Converts any bearing angle from the north line direction (positive clockwise) and returns an angle between 0-360 degrees (positive clockwise), 0 being the north line","title":"bearingToAzimuth"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/bearing-to-azimuth/#return","text":"angle between 0 and 360 degrees","title":"Return"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/bearing-to-azimuth/#parameters","text":"common bearing angle, between -180 and +180 degrees","title":"Parameters"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/bearing/","text":"// turf / io.github.dellisd.spatialk.turf / bearing bearing [common] Content @ JvmOverloads () fun bearing (start: Position , end: Position , final: Boolean = false): Double More info Takes two positions ( start , end ) and finds the geographic bearing between them, i.e. the angle measured in degrees from the north line (0 degrees) Return bearing in decimal degrees, between -180 and 180 degrees (positive clockwise) Parameters common start starting point end ending point final calculates the final bearing if true","title":"Bearing"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/bearing/#bearing","text":"[common] Content @ JvmOverloads () fun bearing (start: Position , end: Position , final: Boolean = false): Double More info Takes two positions ( start , end ) and finds the geographic bearing between them, i.e. the angle measured in degrees from the north line (0 degrees)","title":"bearing"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/bearing/#return","text":"bearing in decimal degrees, between -180 and 180 degrees (positive clockwise)","title":"Return"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/bearing/#parameters","text":"common start starting point end ending point final calculates the final bearing if true","title":"Parameters"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/boolean-point-in-polygon/","text":"// turf / io.github.dellisd.spatialk.turf / booleanPointInPolygon booleanPointInPolygon [common] Content @ JvmOverloads () fun booleanPointInPolygon (point: Point , polygon: Polygon , ignoreBoundary: Boolean = false): Boolean More info Takes a Point and a Polygon and determines if the point resides inside the polygon. The polygon can be convex or concave. The function accounts for holes. Return true if the Position is inside the Polygon; false if the Position is not inside the Polygon Parameters common point input point polygon input polygon ignoreBoundary True if polygon boundary should be ignored when determining if the point is inside the polygon otherwise false. [common] Content @ JvmOverloads () fun booleanPointInPolygon (point: Point , polygon: MultiPolygon , ignoreBoundary: Boolean = false): Boolean More info Takes a Point and a MultiPolygon and determines if the point resides inside the polygon. The polygon can be convex or concave. The function accounts for holes. Return true if the Position is inside the Polygon; false if the Position is not inside the Polygon Parameters common point input point polygon input multipolygon ignoreBoundary True if polygon boundary should be ignored when determining if the point is inside the polygon otherwise false.","title":"Boolean point in polygon"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/boolean-point-in-polygon/#booleanpointinpolygon","text":"[common] Content @ JvmOverloads () fun booleanPointInPolygon (point: Point , polygon: Polygon , ignoreBoundary: Boolean = false): Boolean More info Takes a Point and a Polygon and determines if the point resides inside the polygon. The polygon can be convex or concave. The function accounts for holes.","title":"booleanPointInPolygon"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/boolean-point-in-polygon/#return","text":"true if the Position is inside the Polygon; false if the Position is not inside the Polygon","title":"Return"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/boolean-point-in-polygon/#parameters","text":"common point input point polygon input polygon ignoreBoundary True if polygon boundary should be ignored when determining if the point is inside the polygon otherwise false. [common] Content @ JvmOverloads () fun booleanPointInPolygon (point: Point , polygon: MultiPolygon , ignoreBoundary: Boolean = false): Boolean More info Takes a Point and a MultiPolygon and determines if the point resides inside the polygon. The polygon can be convex or concave. The function accounts for holes.","title":"Parameters"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/boolean-point-in-polygon/#return_1","text":"true if the Position is inside the Polygon; false if the Position is not inside the Polygon","title":"Return"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/boolean-point-in-polygon/#parameters_1","text":"common point input point polygon input multipolygon ignoreBoundary True if polygon boundary should be ignored when determining if the point is inside the polygon otherwise false.","title":"Parameters"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/convert-area/","text":"// turf / io.github.dellisd.spatialk.turf / convertArea convertArea [common] Content fun convertArea (area: Double , from: Units = Units.Meters, to: Units = Units.Kilometers): Double More info Converts an area to the requested unit. Valid units: Acres , Miles , Inches , Yards , Meters , Kilometers , Centimeters , Feet Return the converted area Parameters common area Area to be converted from Original units of the area to Units to convert the area to Throws kotlin.IllegalArgumentException if the given units are invalid, or if the area is negative","title":"Convert area"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/convert-area/#convertarea","text":"[common] Content fun convertArea (area: Double , from: Units = Units.Meters, to: Units = Units.Kilometers): Double More info Converts an area to the requested unit. Valid units: Acres , Miles , Inches , Yards , Meters , Kilometers , Centimeters , Feet","title":"convertArea"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/convert-area/#return","text":"the converted area","title":"Return"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/convert-area/#parameters","text":"common area Area to be converted from Original units of the area to Units to convert the area to","title":"Parameters"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/convert-area/#throws","text":"kotlin.IllegalArgumentException if the given units are invalid, or if the area is negative","title":"Throws"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/convert-length/","text":"// turf / io.github.dellisd.spatialk.turf / convertLength convertLength [common] Content fun convertLength (length: Double , from: Units = Units.Meters, to: Units = Units.Kilometers): Double More info Converts a length to the requested unit Parameters common length Length to be converted from Unit of the length to Unit to convert the length to Throws kotlin.IllegalArgumentException if the given length is negative","title":"Convert length"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/convert-length/#convertlength","text":"[common] Content fun convertLength (length: Double , from: Units = Units.Meters, to: Units = Units.Kilometers): Double More info Converts a length to the requested unit","title":"convertLength"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/convert-length/#parameters","text":"common length Length to be converted from Unit of the length to Unit to convert the length to","title":"Parameters"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/convert-length/#throws","text":"kotlin.IllegalArgumentException if the given length is negative","title":"Throws"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/coord-all/","text":"// turf / io.github.dellisd.spatialk.turf / coordAll coordAll [common] Content fun Geometry . coordAll (): List < Position > fun Point . coordAll (): fun MultiPoint . coordAll (): List < Position > fun LineString . coordAll (): List < Position > fun MultiLineString . coordAll (): fun Polygon . coordAll (): fun MultiPolygon . coordAll (): fun GeometryCollection . coordAll (): fun Feature . coordAll (): List < Position >? fun FeatureCollection . coordAll ():","title":"Coord all"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/coord-all/#coordall","text":"[common] Content fun Geometry . coordAll (): List < Position > fun Point . coordAll (): fun MultiPoint . coordAll (): List < Position > fun LineString . coordAll (): List < Position > fun MultiLineString . coordAll (): fun Polygon . coordAll (): fun MultiPolygon . coordAll (): fun GeometryCollection . coordAll (): fun Feature . coordAll (): List < Position >? fun FeatureCollection . coordAll ():","title":"coordAll"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/destination/","text":"// turf / io.github.dellisd.spatialk.turf / destination destination [common] Content @ JvmOverloads () fun destination (origin: Position , distance: Double , bearing: Double , units: Units = Units.Kilometers): Position More info Takes a position and calculates the location of a destination position given a distance in degrees, radians, miles, or kilometers; and bearing in degrees. This uses the Haversine formula to account for global curvature. Return destination position See also common Haversine formula Parameters common origin starting point distance distance from the origin point bearing ranging from -180 to 180 units Unit of distance","title":"Destination"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/destination/#destination","text":"[common] Content @ JvmOverloads () fun destination (origin: Position , distance: Double , bearing: Double , units: Units = Units.Kilometers): Position More info Takes a position and calculates the location of a destination position given a distance in degrees, radians, miles, or kilometers; and bearing in degrees. This uses the Haversine formula to account for global curvature.","title":"destination"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/destination/#return","text":"destination position","title":"Return"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/destination/#see-also","text":"common Haversine formula","title":"See also"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/destination/#parameters","text":"common origin starting point distance distance from the origin point bearing ranging from -180 to 180 units Unit of distance","title":"Parameters"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/distance/","text":"// turf / io.github.dellisd.spatialk.turf / distance distance [common] Content @ JvmOverloads () fun distance (from: Position , to: Position , units: Units = Units.Kilometers): Double More info Calculates the distance between two positions. This uses the Haversine formula to account for global curvature. Return distance between the two points in units See also common Haversine formula Parameters common from origin point to destination point units units of returned distance","title":"Distance"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/distance/#distance","text":"[common] Content @ JvmOverloads () fun distance (from: Position , to: Position , units: Units = Units.Kilometers): Double More info Calculates the distance between two positions. This uses the Haversine formula to account for global curvature.","title":"distance"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/distance/#return","text":"distance between the two points in units","title":"Return"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/distance/#see-also","text":"common Haversine formula","title":"See also"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/distance/#parameters","text":"common from origin point to destination point units units of returned distance","title":"Parameters"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/length-to-degrees/","text":"// turf / io.github.dellisd.spatialk.turf / lengthToDegrees lengthToDegrees [common] Content fun lengthToDegrees (distance: Double , units: Units = Units.Kilometers): More info Convert a distance measurement (assuming a spherical Earth) from a real-world unit into degrees. Return Degrees Parameters common distance Distance in real units units Can be Miles , NauticalMiles , Inches , Yards , Meters , Kilometers , Centimeters , Feet , Degrees , Radians Throws kotlin.IllegalArgumentException if the given units are invalid","title":"Length to degrees"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/length-to-degrees/#lengthtodegrees","text":"[common] Content fun lengthToDegrees (distance: Double , units: Units = Units.Kilometers): More info Convert a distance measurement (assuming a spherical Earth) from a real-world unit into degrees.","title":"lengthToDegrees"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/length-to-degrees/#return","text":"Degrees","title":"Return"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/length-to-degrees/#parameters","text":"common distance Distance in real units units Can be Miles , NauticalMiles , Inches , Yards , Meters , Kilometers , Centimeters , Feet , Degrees , Radians","title":"Parameters"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/length-to-degrees/#throws","text":"kotlin.IllegalArgumentException if the given units are invalid","title":"Throws"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/length-to-radians/","text":"// turf / io.github.dellisd.spatialk.turf / lengthToRadians lengthToRadians [common] Content fun lengthToRadians (distance: Double , units: Units = Units.Kilometers): Double More info Convert a distance measurement (assuming a spherical Earth) from a real-world unit into radians. Return Radians Parameters common distance Distance in real units units Can be Miles , NauticalMiles , Inches , Yards , Meters , Kilometers , Centimeters , Feet , Degrees , Radians Throws kotlin.IllegalArgumentException if the given units are invalid","title":"Length to radians"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/length-to-radians/#lengthtoradians","text":"[common] Content fun lengthToRadians (distance: Double , units: Units = Units.Kilometers): Double More info Convert a distance measurement (assuming a spherical Earth) from a real-world unit into radians.","title":"lengthToRadians"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/length-to-radians/#return","text":"Radians","title":"Return"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/length-to-radians/#parameters","text":"common distance Distance in real units units Can be Miles , NauticalMiles , Inches , Yards , Meters , Kilometers , Centimeters , Feet , Degrees , Radians","title":"Parameters"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/length-to-radians/#throws","text":"kotlin.IllegalArgumentException if the given units are invalid","title":"Throws"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/length/","text":"// turf / io.github.dellisd.spatialk.turf / length length [common] Content fun length (lineString: LineString , units: Units ): Double More info Calculates the length of the given LineString in the given Units . Return The length of the geometry in units . Parameters common lineString The geometry to measure units The unit of measurement to return the length in [common] Content fun length (multiLineString: MultiLineString , units: Units ): Double More info Calculates the combined length of all LineString s from the given MultiLineString in the given Units . Return The length of the geometry in units . Parameters common multiLineString The geometry to measure units The unit of measurement to return the length in [common] Content fun length (polygon: Polygon , units: Units ): Double More info Calculates the length of perimeter the given Polygon in the given Units . Any holes in the polygon will be included in the length. Return The length of the geometry in units . Parameters common polygon The geometry to measure units The unit of measurement to return the length in [common] Content fun length (multiPolygon: MultiPolygon , units: Units ): Double More info Calculates the combined length of perimeter the Polygon s in the MultiPolygon in the given Units . Any holes in the polygons will be included in the length. Return The length of the geometry in units . Parameters common multiPolygon The geometry to measure units The unit of measurement to return the length in","title":"Length"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/length/#length","text":"[common] Content fun length (lineString: LineString , units: Units ): Double More info Calculates the length of the given LineString in the given Units .","title":"length"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/length/#return","text":"The length of the geometry in units .","title":"Return"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/length/#parameters","text":"common lineString The geometry to measure units The unit of measurement to return the length in [common] Content fun length (multiLineString: MultiLineString , units: Units ): Double More info Calculates the combined length of all LineString s from the given MultiLineString in the given Units .","title":"Parameters"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/length/#return_1","text":"The length of the geometry in units .","title":"Return"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/length/#parameters_1","text":"common multiLineString The geometry to measure units The unit of measurement to return the length in [common] Content fun length (polygon: Polygon , units: Units ): Double More info Calculates the length of perimeter the given Polygon in the given Units . Any holes in the polygon will be included in the length.","title":"Parameters"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/length/#return_2","text":"The length of the geometry in units .","title":"Return"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/length/#parameters_2","text":"common polygon The geometry to measure units The unit of measurement to return the length in [common] Content fun length (multiPolygon: MultiPolygon , units: Units ): Double More info Calculates the combined length of perimeter the Polygon s in the MultiPolygon in the given Units . Any holes in the polygons will be included in the length.","title":"Parameters"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/length/#return_3","text":"The length of the geometry in units .","title":"Return"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/length/#parameters_3","text":"common multiPolygon The geometry to measure units The unit of measurement to return the length in","title":"Parameters"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/line-intersect/","text":"// turf / io.github.dellisd.spatialk.turf / lineIntersect lineIntersect [common] Content fun lineIntersect (line1: LineString , line2: LineString ): List < Position > More info Returns intersecting points between two LineString s. Currently only supports primitive LineStrings containing exactly two points each! Return A list containing any intersections between line1 and line2 Throws kotlin.NotImplementedError if either LineString does not contain exactly two points","title":"Line intersect"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/line-intersect/#lineintersect","text":"[common] Content fun lineIntersect (line1: LineString , line2: LineString ): List < Position > More info Returns intersecting points between two LineString s. Currently only supports primitive LineStrings containing exactly two points each!","title":"lineIntersect"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/line-intersect/#return","text":"A list containing any intersections between line1 and line2","title":"Return"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/line-intersect/#throws","text":"kotlin.NotImplementedError if either LineString does not contain exactly two points","title":"Throws"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/line-slice/","text":"// turf / io.github.dellisd.spatialk.turf / lineSlice lineSlice [common] Content fun lineSlice (start: Position , stop: Position , line: LineString ): LineString More info Takes a LineString , a start and a stop Position and returns a subsection of the line between those points. The start and stop points do not need to fall exactly on the line. Return The sliced subsection of the line Parameters common start Start position stop Stop position line The line string to slice","title":"Line slice"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/line-slice/#lineslice","text":"[common] Content fun lineSlice (start: Position , stop: Position , line: LineString ): LineString More info Takes a LineString , a start and a stop Position and returns a subsection of the line between those points. The start and stop points do not need to fall exactly on the line.","title":"lineSlice"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/line-slice/#return","text":"The sliced subsection of the line","title":"Return"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/line-slice/#parameters","text":"common start Start position stop Stop position line The line string to slice","title":"Parameters"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/midpoint/","text":"// turf / io.github.dellisd.spatialk.turf / midpoint midpoint [common] Content fun midpoint (point1: Position , point2: Position ): Position More info Takes two Position s and returns a point midway between them. The midpoint is calculated geodesically, meaning the curvature of the earth is taken into account. Return A Position midway between point1 and point2 Parameters common point1 the first point point2 the second point","title":"Midpoint"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/midpoint/#midpoint","text":"[common] Content fun midpoint (point1: Position , point2: Position ): Position More info Takes two Position s and returns a point midway between them. The midpoint is calculated geodesically, meaning the curvature of the earth is taken into account.","title":"midpoint"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/midpoint/#return","text":"A Position midway between point1 and point2","title":"Return"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/midpoint/#parameters","text":"common point1 the first point point2 the second point","title":"Parameters"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/nearest-point-on-line/","text":"// turf / io.github.dellisd.spatialk.turf / nearestPointOnLine nearestPointOnLine [common] Content fun nearestPointOnLine (line: LineString , point: Position , units: Units = Units.Kilometers): NearestPointOnLineResult More info Finds the closest Position along a LineString to a given position Return The closest position along the line Parameters common line The LineString to find a position along point The Position given to find the closest point along the line [common] Content fun nearestPointOnLine (lines: MultiLineString , point: Position , units: Units = Units.Kilometers): NearestPointOnLineResult More info Finds the closest Position along a MultiLineString to a given position Return The closest position along the lines Parameters common lines The MultiLineString to find a position along point The Position given to find the closest point along the lines","title":"Nearest point on line"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/nearest-point-on-line/#nearestpointonline","text":"[common] Content fun nearestPointOnLine (line: LineString , point: Position , units: Units = Units.Kilometers): NearestPointOnLineResult More info Finds the closest Position along a LineString to a given position","title":"nearestPointOnLine"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/nearest-point-on-line/#return","text":"The closest position along the line","title":"Return"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/nearest-point-on-line/#parameters","text":"common line The LineString to find a position along point The Position given to find the closest point along the line [common] Content fun nearestPointOnLine (lines: MultiLineString , point: Position , units: Units = Units.Kilometers): NearestPointOnLineResult More info Finds the closest Position along a MultiLineString to a given position","title":"Parameters"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/nearest-point-on-line/#return_1","text":"The closest position along the lines","title":"Return"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/nearest-point-on-line/#parameters_1","text":"common lines The MultiLineString to find a position along point The Position given to find the closest point along the lines","title":"Parameters"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/radians-to-length/","text":"// turf / io.github.dellisd.spatialk.turf / radiansToLength radiansToLength [common] Content fun radiansToLength (radians: Double , units: Units = Units.Kilometers): Double More info Convert a distance measurement (assuming a spherical Earth) from radians to a more friendly unit. Return Distance Parameters common radians Radians in radians across the sphere units Can be Miles , NauticalMiles , Inches , Yards , Meters , Kilometers , Centimeters , Feet , Degrees , Radians Throws kotlin.IllegalArgumentException if the given units are invalid","title":"Radians to length"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/radians-to-length/#radianstolength","text":"[common] Content fun radiansToLength (radians: Double , units: Units = Units.Kilometers): Double More info Convert a distance measurement (assuming a spherical Earth) from radians to a more friendly unit.","title":"radiansToLength"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/radians-to-length/#return","text":"Distance","title":"Return"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/radians-to-length/#parameters","text":"common radians Radians in radians across the sphere units Can be Miles , NauticalMiles , Inches , Yards , Meters , Kilometers , Centimeters , Feet , Degrees , Radians","title":"Parameters"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/radians-to-length/#throws","text":"kotlin.IllegalArgumentException if the given units are invalid","title":"Throws"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/to-polygon/","text":"// turf / io.github.dellisd.spatialk.turf / toPolygon toPolygon [common] Content fun BoundingBox . toPolygon (): Polygon","title":"To polygon"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/to-polygon/#topolygon","text":"[common] Content fun BoundingBox . toPolygon (): Polygon","title":"toPolygon"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-experimental-turf-api/","text":"// turf / io.github.dellisd.spatialk.turf / ExperimentalTurfApi ExperimentalTurfApi [common] @ Target (allowedTargets = [ AnnotationTarget.CLASS , AnnotationTarget.FUNCTION ]) annotation class ExperimentalTurfApi","title":"Index"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-experimental-turf-api/#experimentalturfapi","text":"[common] @ Target (allowedTargets = [ AnnotationTarget.CLASS , AnnotationTarget.FUNCTION ]) annotation class ExperimentalTurfApi","title":"ExperimentalTurfApi"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-experimental-turf-api/-experimental-turf-api/","text":"// turf / io.github.dellisd.spatialk.turf / ExperimentalTurfApi / ExperimentalTurfApi ExperimentalTurfApi [common] Content fun ExperimentalTurfApi ()","title":" experimental turf api"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-experimental-turf-api/-experimental-turf-api/#experimentalturfapi","text":"[common] Content fun ExperimentalTurfApi ()","title":"ExperimentalTurfApi"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-nearest-point-on-line-result/","text":"// turf / io.github.dellisd.spatialk.turf / NearestPointOnLineResult NearestPointOnLineResult [common] data class NearestPointOnLineResult ( point : Position , distance : Double , location : Double , index : Int ) Result values from nearestPointOnLine . Constructors NearestPointOnLineResult [common] fun NearestPointOnLineResult (point: Position , distance: Double , location: Double , index: Int ) Properties Name Summary distance [common] val distance : Double Distance between the input position and point index [common] val index : Int Index of the segment of the line on which point lies. location [common] val location : Double Distance along the line from the stat to the point point [common] val point : Position The point on the line nearest to the input position","title":"Index"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-nearest-point-on-line-result/#nearestpointonlineresult","text":"[common] data class NearestPointOnLineResult ( point : Position , distance : Double , location : Double , index : Int ) Result values from nearestPointOnLine .","title":"NearestPointOnLineResult"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-nearest-point-on-line-result/#constructors","text":"NearestPointOnLineResult [common] fun NearestPointOnLineResult (point: Position , distance: Double , location: Double , index: Int )","title":"Constructors"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-nearest-point-on-line-result/#properties","text":"Name Summary distance [common] val distance : Double Distance between the input position and point index [common] val index : Int Index of the segment of the line on which point lies. location [common] val location : Double Distance along the line from the stat to the point point [common] val point : Position The point on the line nearest to the input position","title":"Properties"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-nearest-point-on-line-result/--index--/","text":"// turf / io.github.dellisd.spatialk.turf / NearestPointOnLineResult / index index [common] Content val index : Int","title":"  index  "},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-nearest-point-on-line-result/--index--/#index","text":"[common] Content val index : Int","title":"index"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-nearest-point-on-line-result/-nearest-point-on-line-result/","text":"// turf / io.github.dellisd.spatialk.turf / NearestPointOnLineResult / NearestPointOnLineResult NearestPointOnLineResult [common] Content fun NearestPointOnLineResult (point: Position , distance: Double , location: Double , index: Int )","title":" nearest point on line result"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-nearest-point-on-line-result/-nearest-point-on-line-result/#nearestpointonlineresult","text":"[common] Content fun NearestPointOnLineResult (point: Position , distance: Double , location: Double , index: Int )","title":"NearestPointOnLineResult"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-nearest-point-on-line-result/distance/","text":"// turf / io.github.dellisd.spatialk.turf / NearestPointOnLineResult / distance distance [common] Content val distance : Double","title":"Distance"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-nearest-point-on-line-result/distance/#distance","text":"[common] Content val distance : Double","title":"distance"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-nearest-point-on-line-result/location/","text":"// turf / io.github.dellisd.spatialk.turf / NearestPointOnLineResult / location location [common] Content val location : Double","title":"Location"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-nearest-point-on-line-result/location/#location","text":"[common] Content val location : Double","title":"location"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-nearest-point-on-line-result/point/","text":"// turf / io.github.dellisd.spatialk.turf / NearestPointOnLineResult / point point [common] Content val point : Position","title":"Point"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-nearest-point-on-line-result/point/#point","text":"[common] Content val point : Position","title":"point"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-units/","text":"// turf / io.github.dellisd.spatialk.turf / Units Units [common] enum Units : Enum < Units > Supported units of measurement in Turf. Entries Degrees [common] Degrees (1 / 111325.0, EARTH_RADIUS / 111325, Double.NaN) Radians [common] Radians (1 / EARTH_RADIUS, 1.0, Double.NaN) Feet [common] Feet (3.28084, EARTH_RADIUS * 3.28084, 10.763_910_417) Yards [common] Yards (1 / 1.0936, EARTH_RADIUS / 1.0936, 1.195_990_046) Inches [common] Inches (39.370, EARTH_RADIUS * 39.370, 1550.003_100_006) NauticalMiles [common] NauticalMiles (1 / 1852.0, EARTH_RADIUS / 1852.0, Double.NaN) Miles [common] Miles (1 / 1609.344, EARTH_RADIUS / 1609.344, 3.86e-7) Acres [common] Acres (Double.NaN, Double.NaN, 0.000_247_105) Kilometers [common] Kilometers (1 / 1000.0, EARTH_RADIUS / 1000, 0.000_001) Centimeters [common] Centimeters (100.0, EARTH_RADIUS * 100, 10_000.0) Millimeters [common] Millimeters (1000.0, EARTH_RADIUS * 1000, 1_000_000.0) Meters [common] Meters (1.0, EARTH_RADIUS, 1.0) Properties Name Summary name [common] val name : String ordinal [common] val ordinal : Int","title":"Index"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-units/#units","text":"[common] enum Units : Enum < Units > Supported units of measurement in Turf.","title":"Units"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-units/#entries","text":"Degrees [common] Degrees (1 / 111325.0, EARTH_RADIUS / 111325, Double.NaN) Radians [common] Radians (1 / EARTH_RADIUS, 1.0, Double.NaN) Feet [common] Feet (3.28084, EARTH_RADIUS * 3.28084, 10.763_910_417) Yards [common] Yards (1 / 1.0936, EARTH_RADIUS / 1.0936, 1.195_990_046) Inches [common] Inches (39.370, EARTH_RADIUS * 39.370, 1550.003_100_006) NauticalMiles [common] NauticalMiles (1 / 1852.0, EARTH_RADIUS / 1852.0, Double.NaN) Miles [common] Miles (1 / 1609.344, EARTH_RADIUS / 1609.344, 3.86e-7) Acres [common] Acres (Double.NaN, Double.NaN, 0.000_247_105) Kilometers [common] Kilometers (1 / 1000.0, EARTH_RADIUS / 1000, 0.000_001) Centimeters [common] Centimeters (100.0, EARTH_RADIUS * 100, 10_000.0) Millimeters [common] Millimeters (1000.0, EARTH_RADIUS * 1000, 1_000_000.0) Meters [common] Meters (1.0, EARTH_RADIUS, 1.0)","title":"Entries"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-units/#properties","text":"Name Summary name [common] val name : String ordinal [common] val ordinal : Int","title":"Properties"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-units/-acres/","text":"// turf / io.github.dellisd.spatialk.turf / Units / Acres Acres [common] Acres (Double.NaN, Double.NaN, 0.000_247_105) Properties Name Summary name [common] val name : String ordinal [common] val ordinal : Int","title":"Index"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-units/-acres/#acres","text":"[common] Acres (Double.NaN, Double.NaN, 0.000_247_105)","title":"Acres"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-units/-acres/#properties","text":"Name Summary name [common] val name : String ordinal [common] val ordinal : Int","title":"Properties"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-units/-acres/name/","text":"// turf / io.github.dellisd.spatialk.turf / Units / Acres / name name [common] Content val name : String","title":"Name"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-units/-acres/name/#name","text":"[common] Content val name : String","title":"name"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-units/-acres/ordinal/","text":"// turf / io.github.dellisd.spatialk.turf / Units / Acres / ordinal ordinal [common] Content val ordinal : Int","title":"Ordinal"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-units/-acres/ordinal/#ordinal","text":"[common] Content val ordinal : Int","title":"ordinal"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-units/-centimeters/","text":"// turf / io.github.dellisd.spatialk.turf / Units / Centimeters Centimeters [common] Centimeters (100.0, EARTH_RADIUS * 100, 10_000.0) Properties Name Summary name [common] val name : String ordinal [common] val ordinal : Int","title":"Index"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-units/-centimeters/#centimeters","text":"[common] Centimeters (100.0, EARTH_RADIUS * 100, 10_000.0)","title":"Centimeters"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-units/-centimeters/#properties","text":"Name Summary name [common] val name : String ordinal [common] val ordinal : Int","title":"Properties"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-units/-centimeters/name/","text":"// turf / io.github.dellisd.spatialk.turf / Units / Centimeters / name name [common] Content val name : String","title":"Name"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-units/-centimeters/name/#name","text":"[common] Content val name : String","title":"name"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-units/-centimeters/ordinal/","text":"// turf / io.github.dellisd.spatialk.turf / Units / Centimeters / ordinal ordinal [common] Content val ordinal : Int","title":"Ordinal"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-units/-centimeters/ordinal/#ordinal","text":"[common] Content val ordinal : Int","title":"ordinal"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-units/-degrees/","text":"// turf / io.github.dellisd.spatialk.turf / Units / Degrees Degrees [common] Degrees (1 / 111325.0, EARTH_RADIUS / 111325, Double.NaN) Properties Name Summary name [common] val name : String ordinal [common] val ordinal : Int","title":"Index"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-units/-degrees/#degrees","text":"[common] Degrees (1 / 111325.0, EARTH_RADIUS / 111325, Double.NaN)","title":"Degrees"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-units/-degrees/#properties","text":"Name Summary name [common] val name : String ordinal [common] val ordinal : Int","title":"Properties"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-units/-degrees/name/","text":"// turf / io.github.dellisd.spatialk.turf / Units / Degrees / name name [common] Content val name : String","title":"Name"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-units/-degrees/name/#name","text":"[common] Content val name : String","title":"name"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-units/-degrees/ordinal/","text":"// turf / io.github.dellisd.spatialk.turf / Units / Degrees / ordinal ordinal [common] Content val ordinal : Int","title":"Ordinal"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-units/-degrees/ordinal/#ordinal","text":"[common] Content val ordinal : Int","title":"ordinal"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-units/-feet/","text":"// turf / io.github.dellisd.spatialk.turf / Units / Feet Feet [common] Feet (3.28084, EARTH_RADIUS * 3.28084, 10.763_910_417) Properties Name Summary name [common] val name : String ordinal [common] val ordinal : Int","title":"Index"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-units/-feet/#feet","text":"[common] Feet (3.28084, EARTH_RADIUS * 3.28084, 10.763_910_417)","title":"Feet"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-units/-feet/#properties","text":"Name Summary name [common] val name : String ordinal [common] val ordinal : Int","title":"Properties"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-units/-feet/name/","text":"// turf / io.github.dellisd.spatialk.turf / Units / Feet / name name [common] Content val name : String","title":"Name"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-units/-feet/name/#name","text":"[common] Content val name : String","title":"name"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-units/-feet/ordinal/","text":"// turf / io.github.dellisd.spatialk.turf / Units / Feet / ordinal ordinal [common] Content val ordinal : Int","title":"Ordinal"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-units/-feet/ordinal/#ordinal","text":"[common] Content val ordinal : Int","title":"ordinal"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-units/-inches/","text":"// turf / io.github.dellisd.spatialk.turf / Units / Inches Inches [common] Inches (39.370, EARTH_RADIUS * 39.370, 1550.003_100_006) Properties Name Summary name [common] val name : String ordinal [common] val ordinal : Int","title":"Index"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-units/-inches/#inches","text":"[common] Inches (39.370, EARTH_RADIUS * 39.370, 1550.003_100_006)","title":"Inches"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-units/-inches/#properties","text":"Name Summary name [common] val name : String ordinal [common] val ordinal : Int","title":"Properties"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-units/-inches/name/","text":"// turf / io.github.dellisd.spatialk.turf / Units / Inches / name name [common] Content val name : String","title":"Name"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-units/-inches/name/#name","text":"[common] Content val name : String","title":"name"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-units/-inches/ordinal/","text":"// turf / io.github.dellisd.spatialk.turf / Units / Inches / ordinal ordinal [common] Content val ordinal : Int","title":"Ordinal"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-units/-inches/ordinal/#ordinal","text":"[common] Content val ordinal : Int","title":"ordinal"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-units/-kilometers/","text":"// turf / io.github.dellisd.spatialk.turf / Units / Kilometers Kilometers [common] Kilometers (1 / 1000.0, EARTH_RADIUS / 1000, 0.000_001) Properties Name Summary name [common] val name : String ordinal [common] val ordinal : Int","title":"Index"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-units/-kilometers/#kilometers","text":"[common] Kilometers (1 / 1000.0, EARTH_RADIUS / 1000, 0.000_001)","title":"Kilometers"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-units/-kilometers/#properties","text":"Name Summary name [common] val name : String ordinal [common] val ordinal : Int","title":"Properties"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-units/-kilometers/name/","text":"// turf / io.github.dellisd.spatialk.turf / Units / Kilometers / name name [common] Content val name : String","title":"Name"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-units/-kilometers/name/#name","text":"[common] Content val name : String","title":"name"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-units/-kilometers/ordinal/","text":"// turf / io.github.dellisd.spatialk.turf / Units / Kilometers / ordinal ordinal [common] Content val ordinal : Int","title":"Ordinal"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-units/-kilometers/ordinal/#ordinal","text":"[common] Content val ordinal : Int","title":"ordinal"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-units/-meters/","text":"// turf / io.github.dellisd.spatialk.turf / Units / Meters Meters [common] Meters (1.0, EARTH_RADIUS, 1.0) Properties Name Summary name [common] val name : String ordinal [common] val ordinal : Int","title":"Index"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-units/-meters/#meters","text":"[common] Meters (1.0, EARTH_RADIUS, 1.0)","title":"Meters"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-units/-meters/#properties","text":"Name Summary name [common] val name : String ordinal [common] val ordinal : Int","title":"Properties"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-units/-meters/name/","text":"// turf / io.github.dellisd.spatialk.turf / Units / Meters / name name [common] Content val name : String","title":"Name"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-units/-meters/name/#name","text":"[common] Content val name : String","title":"name"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-units/-meters/ordinal/","text":"// turf / io.github.dellisd.spatialk.turf / Units / Meters / ordinal ordinal [common] Content val ordinal : Int","title":"Ordinal"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-units/-meters/ordinal/#ordinal","text":"[common] Content val ordinal : Int","title":"ordinal"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-units/-miles/","text":"// turf / io.github.dellisd.spatialk.turf / Units / Miles Miles [common] Miles (1 / 1609.344, EARTH_RADIUS / 1609.344, 3.86e-7) Properties Name Summary name [common] val name : String ordinal [common] val ordinal : Int","title":"Index"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-units/-miles/#miles","text":"[common] Miles (1 / 1609.344, EARTH_RADIUS / 1609.344, 3.86e-7)","title":"Miles"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-units/-miles/#properties","text":"Name Summary name [common] val name : String ordinal [common] val ordinal : Int","title":"Properties"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-units/-miles/name/","text":"// turf / io.github.dellisd.spatialk.turf / Units / Miles / name name [common] Content val name : String","title":"Name"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-units/-miles/name/#name","text":"[common] Content val name : String","title":"name"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-units/-miles/ordinal/","text":"// turf / io.github.dellisd.spatialk.turf / Units / Miles / ordinal ordinal [common] Content val ordinal : Int","title":"Ordinal"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-units/-miles/ordinal/#ordinal","text":"[common] Content val ordinal : Int","title":"ordinal"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-units/-millimeters/","text":"// turf / io.github.dellisd.spatialk.turf / Units / Millimeters Millimeters [common] Millimeters (1000.0, EARTH_RADIUS * 1000, 1_000_000.0) Properties Name Summary name [common] val name : String ordinal [common] val ordinal : Int","title":"Index"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-units/-millimeters/#millimeters","text":"[common] Millimeters (1000.0, EARTH_RADIUS * 1000, 1_000_000.0)","title":"Millimeters"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-units/-millimeters/#properties","text":"Name Summary name [common] val name : String ordinal [common] val ordinal : Int","title":"Properties"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-units/-millimeters/name/","text":"// turf / io.github.dellisd.spatialk.turf / Units / Millimeters / name name [common] Content val name : String","title":"Name"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-units/-millimeters/name/#name","text":"[common] Content val name : String","title":"name"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-units/-millimeters/ordinal/","text":"// turf / io.github.dellisd.spatialk.turf / Units / Millimeters / ordinal ordinal [common] Content val ordinal : Int","title":"Ordinal"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-units/-millimeters/ordinal/#ordinal","text":"[common] Content val ordinal : Int","title":"ordinal"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-units/-nautical-miles/","text":"// turf / io.github.dellisd.spatialk.turf / Units / NauticalMiles NauticalMiles [common] NauticalMiles (1 / 1852.0, EARTH_RADIUS / 1852.0, Double.NaN) Properties Name Summary name [common] val name : String ordinal [common] val ordinal : Int","title":"Index"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-units/-nautical-miles/#nauticalmiles","text":"[common] NauticalMiles (1 / 1852.0, EARTH_RADIUS / 1852.0, Double.NaN)","title":"NauticalMiles"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-units/-nautical-miles/#properties","text":"Name Summary name [common] val name : String ordinal [common] val ordinal : Int","title":"Properties"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-units/-nautical-miles/name/","text":"// turf / io.github.dellisd.spatialk.turf / Units / NauticalMiles / name name [common] Content val name : String","title":"Name"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-units/-nautical-miles/name/#name","text":"[common] Content val name : String","title":"name"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-units/-nautical-miles/ordinal/","text":"// turf / io.github.dellisd.spatialk.turf / Units / NauticalMiles / ordinal ordinal [common] Content val ordinal : Int","title":"Ordinal"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-units/-nautical-miles/ordinal/#ordinal","text":"[common] Content val ordinal : Int","title":"ordinal"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-units/-radians/","text":"// turf / io.github.dellisd.spatialk.turf / Units / Radians Radians [common] Radians (1 / EARTH_RADIUS, 1.0, Double.NaN) Properties Name Summary name [common] val name : String ordinal [common] val ordinal : Int","title":"Index"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-units/-radians/#radians","text":"[common] Radians (1 / EARTH_RADIUS, 1.0, Double.NaN)","title":"Radians"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-units/-radians/#properties","text":"Name Summary name [common] val name : String ordinal [common] val ordinal : Int","title":"Properties"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-units/-radians/name/","text":"// turf / io.github.dellisd.spatialk.turf / Units / Radians / name name [common] Content val name : String","title":"Name"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-units/-radians/name/#name","text":"[common] Content val name : String","title":"name"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-units/-radians/ordinal/","text":"// turf / io.github.dellisd.spatialk.turf / Units / Radians / ordinal ordinal [common] Content val ordinal : Int","title":"Ordinal"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-units/-radians/ordinal/#ordinal","text":"[common] Content val ordinal : Int","title":"ordinal"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-units/-yards/","text":"// turf / io.github.dellisd.spatialk.turf / Units / Yards Yards [common] Yards (1 / 1.0936, EARTH_RADIUS / 1.0936, 1.195_990_046) Properties Name Summary name [common] val name : String ordinal [common] val ordinal : Int","title":"Index"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-units/-yards/#yards","text":"[common] Yards (1 / 1.0936, EARTH_RADIUS / 1.0936, 1.195_990_046)","title":"Yards"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-units/-yards/#properties","text":"Name Summary name [common] val name : String ordinal [common] val ordinal : Int","title":"Properties"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-units/-yards/name/","text":"// turf / io.github.dellisd.spatialk.turf / Units / Yards / name name [common] Content val name : String","title":"Name"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-units/-yards/name/#name","text":"[common] Content val name : String","title":"name"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-units/-yards/ordinal/","text":"// turf / io.github.dellisd.spatialk.turf / Units / Yards / ordinal ordinal [common] Content val ordinal : Int","title":"Ordinal"},{"location":"api/turf/turf/io.github.dellisd.spatialk.turf/-units/-yards/ordinal/#ordinal","text":"[common] Content val ordinal : Int","title":"ordinal"}]}